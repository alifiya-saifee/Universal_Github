{
  "team_id": "aline123",
  "items": [
    {
      "title": "I love meritocracy, but all the recent anti-DEI rhetoric is bad",
      "content": "# I love meritocracy, but all the recent anti-DEI rhetoric is bad\n\n## DEI‚Äôs outcomes problem\n\n## The dark side of diversity (and two stories of diversity initiatives gone wrong)\n\n## The false promise of meritocracy\n\n## How to actually ‚Äúdo‚Äù meritocracy, if you mean it\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Change how you read resumes\n\n### Give candidates the option of submitting some writing about a past project they‚Äôre proud of\n\n### Give candidates the option of doing a take-home or an asynchronous assessment\n\n### [EXTRA CREDIT] Invest what you can in closing the gaps\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Simplify Path\n\n### Transformation Dictionary\n\n### Alien Dictionary\n\n#### Related posts\n\n#### Stuff we write about\n\nI‚Äôm the founder of interviewing.io, an anonymous technical recruiting marketplace. In some ways, I‚Äôm the meritocracy hipster who waswriting about how eng hiring should be meritocraticand abouthow quotas are bad, way before saying either was cool.  At interviewing.io, my team and I have been trying to make hiring meritocratic for the last decade. Briefly, we do anonymous mock interviews. If people perform well in those interviews, they get introduced directly to decision-makers at top-tier companies, regardless of how they look on paper. 40% of the thousands of people we‚Äôve helped were excellent engineers who did not look good on paper and would NOT have gotten in the door through traditional, ‚Äúmeritocratic‚Äù channels. Many of those engineers were rejected based on their resumes by the very same companies where they were later hired through us.\n\nRecently, there‚Äôs been a lot of pro-meritocracy, anti-DEI rhetoric. The most salient example isAlexandr Wang‚Äôs (CEO of Scale AI) tweet about how their hiring process has to be meritocratic(including a catchy new acronym, ‚ÄúMEI‚Äù).\n\nToday we‚Äôve formalized an important hiring policy at Scale. We hire for MEI: merit, excellence, and intelligence.This is the email I‚Äôve shared with our@scale_AIteam.‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚ÄîMERITOCRACY AT SCALEIn the wake of our fundraise, I‚Äôve been getting a lot of questions‚Ä¶\n\nThe post got a resounding ‚ÄúGreat!‚Äù from Elon Musk a half hour later, followed by a wall of accolades from the Twitterverse. Since then, a‚Äúmeritocracy board‚Äùhas sprung up as well.\n\nIf you read Wang‚Äôs post carefully, you‚Äôll see that he provides no specific examples of how Scale AI makes hiring meritocratic and doesn‚Äôt share any details about their current hiring process. I don‚Äôt know anyone from the Scale AI team personally, but after doing eng hiring in some form or another for over 15 years, I have questions. Does Scale AI‚Äôs hiring process differ substantially from other companies‚Äô? Or are they doing the same thing as everyone else: recruiters look at resumes, pick people who have top brands on their resume, and interview them?\n\nIf their process is indeed like everyone else‚Äôs, no matter what they say, they‚Äôre no more meritocratic than the companies who tout DEI hiring practices‚Ä¶ and are just virtue signaling on Twitter.\n\nI‚Äôll be the first to admit that DEI is ideologically flawed because of its emphasis on race and gender-based outcomes and its insistence on equality of those outcomes. In the last decade, we‚Äôve seen some pretty bad DEI practices, the most egregious being a company looking up candidate photos on LinkedIn and rejecting qualified white, male candidates. (I talk more about the worst-offending hiring practices I‚Äôve seen over the last decade in the section calledThe dark side of diversity‚Ä¶ and two stories of diversity initiatives gone wrongbelow. If you just want the juicy bits, read that part.)\n\nHowever, yelling ‚ÄúMeritocracy!‚Äù as if it‚Äôs a fait accompli is just as harmful as the worst parts of DEI.In the last decade, we‚Äôve seen countless companies claim to be meritocratic but refuse to talk to candidates unless they had a CS degree from one of a select few schools. There is nothing meritocratic about that. After seeing the pendulum swing back and forth a bunch in this space,I‚Äôd even go so far to say that, ironically, the DEI movement has done more for meritocracy than the loud pro-meritocracy movement is doing right now.\n\nI‚Äôm delighted that ‚Äúmeritocracy‚Äù is no longer a dirty word. But, just saying it isn‚Äôt enough. We have to change our hiring practices.We need to stop using meritocracy as a shield to preserve the status quo.If we could instead put into practice the best part of DEI ‚Äì openness to hiring candidates from non-traditional backgrounds while eliminating the toxic hyperfocus on race and gender and the insistence on equality of outcomes, then we could create a real meritocracy, which is what most reasonable people actually want.1\n\nA quick disclaimer before we go further. To the right, DEI has come to mean mediocrity, and as such, it‚Äôs pitted, apples to apples, against meritocracy. That is not the intent here. When I talk about DEI, I‚Äôm not talking about the political side of it or how it‚Äôs often co-opted by the left as a gateway to Marxism. Similarly, meritocracy has been co-opted by the right to justify racism, eugenics, and god knows what other horrid things. Both extremes are bad. I‚Äôm trying to shed all political associations from either word and to just talk about them purely as hiring ideologies.\n\nOn its face, increasing diversity sounds great. Some groups are underrepresented in tech, likely because of inequality of opportunity. Talent is distributed uniformly, opportunity is not. Let‚Äôs fix it!\n\nTwitter threads like this one (from an engineering leader at Google) are hard to argue with. You should read the whole thing ‚Äî it‚Äôs about a (white) lumberjack‚Äôs son who ended up as one of the founding employees at SpaceX.\n\nEveryone loves SpaceX, and thinks of Elon as the genius founder that invents new types of rockets that are cheaper, faster, more efficient.It's fun to think of it as SpaceX versus NASA, or Silicon Valley vs Aerospace.But let's talk about D&I, and logs. Logs as in timber. üå≤\n\nAnd indeed, ostensibly, DEI is hard to argue against because it speaks to our innate desire for fairness and equal access to opportunity. Many DEI leaders honestly believe this. However, despite the good intentions, in practice, DEI tends to laser focus on race and genderoutcomes, and that is hard to arguefor.\n\nOver the years, I‚Äôve seen claims that diverse teams perform better, as well as claims that one must have a diverse workforce if one has a diverse customer base. Though it‚Äôs often stated as fact, the former is inconclusive ‚Äî there are studies with clear results for AND clear results against.2To the best of my knowledge, the latter point is unsubstantiated as well ‚Äî isn‚Äôt the hallmark of a good designer that they be able to design for customers who are different than they are?3\n\nThe arguments for diversity are inconclusive, and as such, the ultimate measure of success for diversity isn‚Äôt about the performance of an organization or about customer satisfaction. Those are packaged up as obvious side benefits. The way we measure success for diversity is tautological: success is measured by the diversity of our workforce.\n\nWhat does that mean?In practice, recruiting orgs usually define success by looking at some demographic and its representation in the general population.So, in the case of women in tech, women make up half the U.S. population, so 50% of engineers in an organization should be women. Similarly, 12% of the U.S. population is Black, so for hiring to be equitable, 12% of the engineers in an organization should be Black. Likewise, 19% of the U.S. population is Hispanic, so 19% of engineers should be Hispanic, and so on.\n\nWhat‚Äôs the problem with this approach? It does not account for inputs. The most basic input is:  How many female engineers are there in the US? And how many Black or Hispanic engineers are there in the US?\n\nThe answer: not enough. Only 20% of CS graduates in the US are women. And there are also not enough engineers of color to get to race parity either. Only 6% of CS graduates in the US are Black, and only 7% are Hispanic.4\n\nThose numbers get even more grim when you pare them down to how companies usually hire: from top-ranked schools. We‚Äôll talk more about this pedigree-based approach to hiring when we discuss the pitfalls of meritocracy. For now, suffice it to say that a few years ago,we ran the numbers to show that getting to gender parity in software engineering is mathematically impossiblegiven companies‚Äô focus on pedigree; though it was unfashionable to admit it, we called out that there really is a pipeline problem.\n\nAnd then there‚Äôs this issue: What portion of those candidates are even applying to your company in the first place? And what portion of those applicants are actually qualified to do the work? The ONLY way to really take race and gender bias off the table is to do blind as much of the hiring process as possible and then to accept that you may not get the numbers you want but that your outcomes willactuallybe fair.\n\nIn addition to mock interviews, interviewing.io also helps companies source engineering candidates. We know how people perform in mock interviews, and that lets us reliably predict who‚Äôll do well in real interviews. We identify the top performers from practice and introduce them to companies. We‚Äôve been doing it for a while, and our top performers have consistently outperformed candidates from other sources by about 3X.\n\nI promised in the beginning of this post that I‚Äôd spill some juicy tidbits. Here goes.\n\nYears ago, we pitched Facebook‚Äôs university recruiting team on using us to hire for their intern class. The pitch was thatwe had thousands of college students from all over the U.S.who had done a bunch of mock interviews, and that we knew who the top performers were. Many of our students did NOT come from the handful of top-tier schools that Meta typically recruited from. If they were to recruit through us, they‚Äôd have to do way fewer interviews (we had already taken care of technical vetting), and they‚Äôd get a much more diverse slice of the population.\n\nOur only process request was that they conduct interviews with students anonymously, on our platform, so they wouldn‚Äôt be biased against top-performing students who didn‚Äôt go to top schools.\n\nWe didn‚Äôt get the gig. The main bit of pushback from Facebook was that anonymity violated guidelines set by the OFCCP.TheOFCCP(Office of Federal Contract Compliance Programs) is part of the U.S. Department of Labor and is ‚Äúresponsible for ensuring that employers doing business with the Federal government comply with the laws and regulations requiring nondiscrimination.‚Äù One of the many things that the OFCCP requires you to track, if you do business with the federal government, is the race and gender of your applicants. We couldn‚Äôt agree to this. While the requirement makes sense on the surface ‚Äî as they say, you can‚Äôt fix what you can‚Äôt measure ‚Äî in this case, it was a Kafkaesque roadblock to achieving the very thing that the OFCCP is fighting for: reducing discrimination.5\n\nMore broadly, you can‚Äôt take an outcomes-based approach unless your inputs are homogenous and the playing field is level. The biggest advocates of DEI will argue, correctly, that the playing field is not level. Given that it‚Äôs not level, focusing exclusively on outcomes creates all manners of perverse incentives ‚Äî the dark side of diversity is the logical conclusion of an outcomes-based approach: incentivizing the selection of candidates based on race and gender and ultimately discriminating against non-URM candidates.\n\nWe‚Äôve worked with companies of all sizes, from seed stage startups to FAANG, and at one point or another, we‚Äôve worked with most FAANGs and FAANG-adjacent companies. We‚Äôve seen it all. In 2022, at the height of diversity fever, one well-known FAANG-adjacent customer approached us with a specific request. Let‚Äôs call them AcmeCorp (name obviously changed; they‚Äôre a household name, but I don‚Äôt want to rake them over the coals publicly because they were a great partner to us until this thing happened).\n\nAcmeCorp‚Äôs recruiting team wanted us to do some pre-filtering on the candidates we introduced to them.\n\nWe already do some pre-filtering: location, years of experience, visa status, and obviously historical performance in mock interviews. Only the top few percent of our candidates get to talk to employers.\n\nBut on our platform, everything is candidate driven. We don‚Äôt have a searchable candidate database, and we don‚Äôt share candidate data with companies. Rather, we list the companies who hire through us, and our top-performing users can connect with them.\n\nOver our lifetime, plenty of companies have approached us asking if they could get access tojusttop-performing women and people of color on our platform. It makes sense. Recruiters are given marching orders to find more ‚Äúdiverse‚Äù candidates, and this is the result. And it‚Äôs a convenient way to pass on liability. Now, instead of their sourcers having to filter out candidates who aren‚Äôt ‚Äúdiverse‚Äù, we have to do it.\n\nOf course, we‚Äôve always denied these requests. We‚Äôre not a ‚Äúdiversity‚Äù platform, and we can‚Äôt imagine a world where we‚Äôd block what jobs and employers our users could see based on their race and gender (information we don‚Äôt collect systematically in the first place).6\n\nEven though, on their face, these requests weren‚Äôt really OK, we got so many of them that, over time, we got desensitized and would joke internally about how yet another company wanted abinder full of women.\n\nHowever, AcmeCorp‚Äôs request was more egregious than the rest because it gave us visibility into how many companies were behaving internally when faced with diversity goals. It was common knowledge that many companies were doing diversity-specific sourcing, so we weren‚Äôt shocked when we were asked to help with that. What wasn‚Äôt common knowledge is that companies were blatantly rejecting qualified applicants who didn‚Äôt meet their diversity criteria.\n\nAcmeCorp had a fairly complex candidate filtering process in place, and they wanted us to run that same process on any of our top performers who expressed interest in working there.\n\nHere‚Äôs how their process worked. Note that AcmeCorp, like many companies, pays differently depending on where you live.\n\nIn other words, a white man from San Francisco would have no shot at getting an interview at this company ‚Äî he would be auto-rejected and left to wonder what was wrong with his resume.\n\nWhy did this company take this approach? They were willing to pay top dollar for women and people of color but not for other types of engineers, and they hid behind geography to do it. Because of the geographical element, it‚Äôs not as blatant as outright rejecting people based on race and gender, but for all intents and purposes, it‚Äôs the same.\n\nOutside of this practice being questionably legal at best, it‚Äôs also unethical. You can argue that companies should be able to do outreach to any demographic groups that they want. It‚Äôs much harder to argue that it‚Äôs ok to reject applicants based on their race and gender.\n\nWe terminated the relationship.7\n\nUnfortunately, when you tie the success of your recruiting program to gender and race outcomes, these are the behaviors that inevitably arise. For all its flaws, though, the DEI movement, coupled with increasing demand for engineers, propelled companies to make deep changes to their hiring processes. For every DEI horror story, there is an equal and opposing story about a Head of Talent or investor engineering leader who persuaded their eng hiring managers to stop looking just at students from MIT and Stanford, to change their interview processes, to blind resumes, and to do a bunch of other useful things that benefitted every non-traditional candidate.\n\nBut, back to what‚Äôs happening today. You don‚Äôt just get to say ‚Äúmeritocracy‚Äù and be done with it. In practice, meritocratic hiring doesn‚Äôt really exist, and what companies call meritocracy is anything but.\n\nFor most sane people, the concept of meritocracy is hard to argue against. Shouldn‚Äôt the most qualified person get the job?\n\nUnfortunately, because the definition of ‚Äúqualified‚Äù is murky, meritocracy often becomes a justification for over-indexing on pedigree: where people went to school or where they worked previously.‚ÄúWe just hire the best‚Äù often means ‚Äúwe hire people from FAANG, MIT, and Stanford.‚Äù Unfortunately, those are proxies for ability, not actual measures of it. Our research has consistently shown that where people go to school isn‚Äôt very predictive of what they can do. Where they‚Äôve worked issomewhatpredictive, but it‚Äôs not the most important thing.8\n\nDespite that, those are the main criteria that companies use when they decide whom to interview, and because that‚Äôs the first step in a hiring funnel, it‚Äôs the one that gets applied to the most candidates. Any attempts at making the process meritocratic after the resume review (e.g., training interviewers, doing anonymous interviews) are bound to be less impactful because they affect 10X-100X fewer candidates.\n\nFortunately, for all their flaws, at least technical interviews do focus on ability ‚Äî once you get in the door, it‚Äôs not about how you look on paper but about how you perform. As a result, all other things being equal, how you decide which candidates to let into your process is the litmus test for whether your process is truly meritocratic or not.\n\nUnfortunately, the pedigree-based approach isn‚Äôt particularly meritocratic. In our 9 years, we‚Äôve diligently tracked the backgrounds of our candidates, and as I mentioned in the intro to this post, about 40% of our top performers don‚Äôt look good on paper (but do as well as or outperform their pedigreed counterparts in interviews).\n\nOne of our users got rejected from a top-tier social network company three times‚Ä¶ THREE TIMES‚Ä¶ based on his resume before he got hired there through us, after doing very well in an anonymous interview. I‚Äôve shared a few diversity horror stories, but the sad reality is that (faux) meritocracy horror stories like this one happen every day. I wish I had a real meritocracy horror story to share, but as far as I know, eng hiring has never been truly meritocratic. If you know otherwise, please do share.\n\nOur data also shows that pedigree has very little bearing on interview performance. Where people went to school has no bearing on their interview performance, and though where people have worked does carry some signal, it‚Äôs not nearly as important as other traits ‚Äî in past research, we‚Äôve found that not having typos/grammatical errors on your resume is a much stronger signal than whether they‚Äôve worked at a top company, as is whether they‚Äôve done a lot of autodidactic work.8\n\nMoreover, in two separate studies completed a decade apart, where recruiters had to judge resumes and try to pick out the strong candidates, we consistently saw that recruiters are only as accurate as a coin flip and largely disagree with each other about what a good candidate looks like.9\n\nThat‚Äôs why posts like the one from Scale AI get my hackles up. You don‚Äôt get to say that you‚Äôre meritocratic if you‚Äôre just scanning resumes for top brands. That‚Äôs not meritocracy. It‚Äôs co-opting a hot-button word for clout.\n\nAnd it‚Äôs not just Scale AI. This is how tech companies define being meritocratic and hiring the best. It‚Äôs just that not all of them are so self-congratulatory about it.\n\nSo how do you ensure that your hiring isactuallymeritocratic?\n\nIn arecent study, we looked at how recruiters read resumes and how good they are at finding talent. As you saw above, we learned that recruiters are barely better than a coin flip. Another thing we looked at in the same study was what made them pick certain resumes over others.\n\nThe two traits that were the most predictive of whether a recruiter would pick you? First, whether you had top brands on your resume, and second, whether you were Black or Hispanic. This is how recruiters work today. If you don‚Äôt intervene and make changes, today‚Äôs competing approaches willbothbe implemented by your team simultaneously, resulting in a farcical chimera of fake meritocracy and outcomes-based diversity goals.\n\nSo what can you actually do, if you, in good faith, want to run a meritocratic hiring process? (By the way, if you believe that talent is distributed uniformly, by definition, this approach will entail being open to talent from traditionally underrepresented backgrounds.)\n\nFirst, you have to move away from identity politics and expand the definition of ‚Äúunderrepresented.‚ÄùYou have to believe, in your heart of hearts, that great talent can come from anywhere and must stop focusing arbitrarily on one marginalized group at the expense of another. Basically, you have to be open to any candidate who‚Äôs good, regardless of how they look on paper, without prioritizing race and gender. This certainly includes race and gender, but it also includes socioeconomic status, educational background (or lack thereof), and any number of other traits that have nothing to do with someone‚Äôs ability to do the job. Hell, why not just stop worrying about candidate backgrounds and have a process that welcomes all and surfaces the best? Following this path will logically require moving away from race and gender outcomes-based goals.\n\nThen, you have to accept and internalize that your current method of deciding who gets to interview, which is very likely focused on brands (where people have worked or where they‚Äôve gone to school), is not only NOT meritocratic but also ineffective.We talked above about how pedigree is very limited in its ability to predict performance.\n\nIf you accept both of these premises ‚Äî expanding the definition of ‚Äúunderrepresented‚Äù and moving away from focusing on brands ‚Äî the hard work begins.Companies have used resumes (and brands by extension) since time immemorial because they‚Äôre easy, and as you saw in our data above, they do carrysomesignal. But even though they carry a little signal, recruiters are not very good at extracting it.\n\nHere‚Äôs what you should do to pragmatically and realistically revamp your hiring process to be more meritocratic.I challenge Scale AI and all the leaders on the ‚Äúmeritocracy board‚Äù to publicly commit to at least two of these ‚Äî or to name the specific, actionable approaches they plan to take.\n\nFirst, SLOW DOWN. Inthe study I mentioned above, we saw that recruiters take a median of 31 seconds to judge a resume, but spending just 15 extra seconds reading a resume could improve your accuracy by 34%.\n\nOur second piece of advice is this. More than 20 years ago, Freada Kapor Klein from Kapor Capital coined the term ‚Äúdistance traveled,‚Äù referring to what someone accomplished, in the context of where they started. For instance, Kapor Klein recommends that, in their admissions processes, universities should consider not just the number of AP tests a candidate has passed but the number of AP tests taken divided by the total number offered at their high school. For example, if an applicant took 5 AP tests and their school offered 27, that paints a very different picture from another applicant who also took 5 AP tests when that‚Äôs the total number offered at their school. Kapor Capital uses distance traveled as one of their metrics for determining which entrepreneurs to fund. One can easily apply this concept to hiring as well.\n\nThe data shows that slowing down is important, and as part of slowing down, when you read a resume, try to evaluate candidates‚Äô achievements, not in a vacuum, but in the context of where they came from. Think about the denominator. But don‚Äôt think for a moment that we recommend that you lower the bar ‚Äî absolutely not. On interviewing.io, we regularly see nontraditional candidates objectively outperforming their FAANG counterparts.\n\nMy friends at KeepSafe and Iran an experiment about a decade ago where we tried replacing resumes with a writing sample about a past project. It was a huge success.\n\nEven today, when we hire at interviewing.io, we use this approach. We mostly hire off of our own platform (we just list our own open positions alongside others). However, not all of our users have done enough mock interviews to have a rating, and for those users, we have a different flow where we ask them to write about a past project. Boy, are the results telling.\n\nHere‚Äôs what our application form looks like. Steal it if you want.\n\nTake-homes and asynchronous assessments are not well-loved by candidates, primarily because of value asymmetry. They ask a lot of the candidate but nothing of the company, and it‚Äôs not uncommon for a candidate to have to do hours of work and then never hear anything back.\n\nTo be clear, this is NOT the setup we‚Äôre advocating. Here‚Äôs what we‚Äôd advise instead:\n\nGive candidates the option of doing a take-home/assessment that takes no more than 1 hour,instead of submitting their resume. When we say option, we mean that the candidate can decide whether they want to do the take-home or not. If they choose not to, then you‚Äôll read their resume, hopefully using our suggestions above. If they choose to complete the take-home, then you forgo their resume and make your go/no-go decision based entirely on the results of the take-home.\n\nIf you choose this route, it‚Äôs critical tocome up with an assessment whose results you trust. Many companies use a take-home in addition to getting the resume and will still not move forward with candidates who look good on paper. That‚Äôs not meritocratic. Take the time you need to come up with a question that‚Äôs hard to cheat on and that gets you the signal you need. Yes, coming up with a good assessment takes work. But no one said that making your hiring process meritocratic was easy.\n\nThis advice probably applies more to big companies than smaller ones, because bigger ones have more resources to effect change. Regardless,  if you believe in meritocracy, then you understand that a true meritocracy is not possible without a level playing field for your candidates. One of the best things about the DEI movement is that it‚Äôs made us aware how unlevel the playing field really is. Whether you subscribe to DEI or not, this is probably not a controversial statement, and if you want to see true, meritocratic hiring, you have some obligation to help promote equality ofopportunity.\n\nAlthough I expect that it‚Äôs not level in many places, and there are plenty of opportunities to effect change, starting with elementary education11, I'll talk about the inequality I‚Äôve observed firsthand repeatedly over the last decade:the technical interview practice gap. How much you practice is the biggest predictive factor of interview performance ‚Äî not seniority, not gender, and not a CS degree. And so is socialization. After all, if you‚Äôre around people going through the same thing, like at a top-tier CS school, rather than beating yourself up after a disappointing interview, you‚Äôll start to internalize that technical interviewing is flawed and that the outcomes are sometimes unpredictable. Fortunately, there are interventions one can make to close these gaps, and the simplest is to provide practice and community for people who don‚Äôt have access to them. Reach out to us about this, find a non-profit that helps people practice, donate to your favorite university if they have a good practice program, or any number of other things.\n\nUltimately, which gap you choose to help close and how you choose to do it is up to you. But if your company has the means, it‚Äôs your responsibility to invest in gap-closing measures. You don‚Äôt have to donate money. You can offer mock interviews to your candidates before their real interviews. You can start an apprenticeship program. You can encourage your engineers to do some tutoring. However you approach it, though, you can‚Äôt talk about meritocracy with a straight face and not dosomethingto level the playing field.\n\nIn fairness, the Scale AI post positioned them as symbiotic. I believe that as well.‚Ü©\n\nThere are many sources arguing for and against diversity leading to better-performing teams. Here are some examples:For:https://www.mckinsey.com/featured-insights/diversity-and-inclusion/diversity-wins-how-inclusion-mattersAgainst:https://medium.com/the-liberators/in-depth-the-double-edged-sword-of-diversity-in-teams-765ff72a55da(except for ‚Äúage diversity‚Äù) andhttps://corpgov.law.harvard.edu/2021/05/25/diversity-and-performance-in-entrepreneurial-teams/‚Ü©\n\nOne of the most insulting examples of the ‚Äúwe need a diverse workforce to serve our diverse customer base‚Äù argument occurred  when I was pitching Amazon on using interviewing.io to hire. This was years ago, and back then, out of curiosity, I‚Äôd always ask the organizations we were pitching why they valued diversity. I don‚Äôt think I ever got a good answer, but this one was especially bad. One of the recruiters we met with went on a long diatribe about how Amazon sells lots of shoes and you need women on the eng team because women understand shoes better than men.‚Ü©\n\nGetting more women and people of color to study computer science is a worthy cause. Hell, getting anyone who‚Äôs historically been marginalized to study computer science is worthwhile. It‚Äôs great for our economy, and it‚Äôs currently one of the best levers for upward social mobility available. But, while we hope more companies do these things, it is not reasonable to expect that companies can be responsible for educational interventions that often need to start at the elementary school level. Of course, companies should do what they can. But expecting them to pull off mathematical impossibilities is irrational, and the DEI movement‚Äôs stalwart refusal to acknowledge the pipeline problem undermines the movement as a whole.‚Ü©\n\nI was actually able to get in touch with a former OFCCP higher-up who admitted that rejecting anonymity in hiring was against the spirit of OFCCP requirements. But they sadly wouldn‚Äôt go on the record.‚Ü©\n\nThe closest we‚Äôve ever come to doing this is our Fellowship program, where we gave free practice to engineers from traditionally underrepresented backgrounds. It was a great program, but what made it great was that our interviewers were eager to help these candidates. We were able to do free practice because our interviewers graciously agreed not to charge. That said, if I were to run this program again, I‚Äôd probably focus more on socioeconomic status and non-traditional credentials rather than just race and gender.‚Ü©\n\nHere‚Äôs the email we ended the relationship with. I‚Äôm including it because it was hard to write and even harder to hit send on, but I think we did the right thing, and maybe someone else will need to write something like this in the future‚Ä¶ in which case, please steal our copy.‚Ü©\n\nResearch that shows that having attended a top school isn‚Äôt very predictive and that, while experience at a top company is somewhat predictive, it‚Äôs not the most important thing:\n\nAnyone who‚Äôs read my writing for a long time will pause here and wonder why I‚Äôm OK with resumes and recommending anything about reading them. Until recently, I was stalwartly against resumes and convinced that they carried no signal whatsoever. Then, as part ofthe recruiter study I mentioned, we built some simple ML models to judge resumes and compared their performance to human recruiters. They all outperformed recruiters, and that surprising result made me reverse my stance.‚Ü©\n\nFirst study (2014):https://interviewing.io/blog/resumes-suck-heres-the-dataSecond study (2024):https://interviewing.io/blog/are-recruiters-better-than-a-coin-flip-at-judging-resumes‚Ü©\n\nThere are other gaps that start way before someone gets to college. Enumerating the is out of scope of this piece, butthis writeup by the National Math and Science Initiativeis a good place to start.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/i-love-meritocracy-but-all-the-recent-anti-dei-rhetoric-is-bad",
      "author": "",
      "user_id": ""
    },
    {
      "title": "The unwritten rules (till now) of negotiating with Meta",
      "content": "# The unwritten rules (till now) of negotiating with Meta\n\n## Meta basically has a monopoly on FAANG hiring right now\n\n## How Meta negotiates, given their effective monopoly on eng hiring\n\n## How to negotiate with Meta\n\n## Footnotes\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Don‚Äôt share anything with your recruiter\n\n### Make sure you have other offers\n\n### Slow-play team matching\n\n### Situations where slow-playing may bite you, and how to know the difference\n\n### Build rapport with every hiring manager you talk to\n\n### Actually negotiate (this is the easy part)\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Design WhatsApp\n\n### Integer Replacement\n\n### Lucky Numbers in a Matrix\n\n#### Related posts\n\n#### Stuff we write about\n\nIf you don't like reading, here's me presenting the contents of this blog post in a video. Pick your poison.\n\nEDIT: This post is based on stories from users who were interviewing for E4-E6 SWE and MLE roles at Meta. Other, more specialized roles may have different processes than what's described here.\n\nEDIT 2: As of Q1 2025, it looks like Meta is sometimes foregoing team matching in favor of driving candidates to their Monetization org (which apparently has a lot of open headcount). If this happens to you, after you pass the hiring committee, instead of entering team matching, your recruiter will tell you that you‚Äôve been assigned to this particular org and, if you proceed, you‚Äôll just get an offer. You won‚Äôt get to talk to your future manager, and you‚Äôll find out team details a week after you join. From what we know, it‚Äôs possible to insist on team matching instead, with the downside that it‚Äôll take an unknown amount of time rather than certainty.\n\nWhy does this matter?\n\nIf you‚Äôre looking to use your Meta offer primarily as leverage with other companies, this is a great thing because you‚Äôll get numbers quickly. If you‚Äôre seriously interested in Meta, then this could be good or bad and depends where you are in the process and how much you want to work on monetization versus other things/how much you want to meet your manager before you work for them.\n\nSo if you‚Äôre seriously interested in Meta, whether this is good or bad depends on where you are in the process. If you need them to move quickly, it‚Äôs great because you know you won‚Äôt be stuck in team matching. However, if you need them to slow down because you aren‚Äôt as far along with other companies or because you want to work in a different org, you may want to ask your recruiter to stick with the old team matching process. In our experience, it‚Äôs ok to ask this. Your recruiter may not tell you outright that that‚Äôs an option, but if you ask, they will probably do it. Of course, you may be stuck longer than you want. But at least then you will have more of a say in what you work on.\n\nAt interviewing.io, one of the services we offer our users is salary negotiation. Even though I‚Äôm the founder, I still do many of the sessions myself because they give me an invaluable insider‚Äôs perspective on what‚Äôs actually going on in the engineering market, what different companies‚Äô offers look like, how companies extend offers, what kinds of deadlines they give, and how much they go up in compensation, under what circumstances.\n\nAccess to this kind of data is great because it helps me make better business decisions. But sometimes I see questionable patterns of behavior among companies. Recently, I‚Äôve observed a string of practices at Meta that I find reprehensible, and that‚Äôs what this post is about. I‚Äôve seen the same practices with enough candidates, and across enough different titles and positions, that it‚Äôs become clear to me that they are not isolated incidents or a rogue recruiter‚Äôs doing but rather a consistent implementation of a deliberate strategy that comes from the top.\n\nI‚Äôm writing about this for two reasons. First, if you‚Äôre negotiating with Meta, you need to know how they operate and understand the unwritten rules of the game. If you do not know the rules, you will fail ‚Äî long before you even start negotiating.\n\nSecond, I‚Äôm hoping that someone at Meta sees this post and that maybe it‚Äôll spark an internal discussion about changing the rules.\n\nBy the way, if I‚Äôm wrong, I will gladly issue a retraction and a public apology. Please contact me if you‚Äôre a recruiter at Meta and find something incorrect in this post. My email isaline@interviewing.io.\n\nLastly, if you‚Äôre about to interview there or are interviewing there already, pleaseread our free, long-form guide to their interview process and questions.\n\nI mentioned above that we do salary negotiation, but our main business is mock interviews. We offer anonymous mock interviews in the style of a bunch of different companies (mostly FAANGs). This means we know how many people are practicing for interviews at Google vs. Meta vs. other FAANGs, and that lets us guess (pretty accurately) how much hiring is actually happening at these companies.\n\nYou can read in way more detail about how all the FAANGs are doing in ourrecent blog post where we made 2024 predictionsbased on our proprietary data. But while I was writing that post, I noticed something odd. Meta was hiring way more engineers than any of the other FAANGs. In fact, Meta hiring is up more than 10X since January of last year.You can see that more recently Amazon has picked up a bit, but it‚Äôs very recent and not enough to drive major change in other companies‚Äô behaviors (at least not yet). And, yes, Netflix is hiring too, but Meta‚Äôs eng team is more than 10X the size of Netflix‚Äôs, so in the absolute, Netflix‚Äôs hiring volume isn‚Äôt enough to balance Meta out. For all intents and purposes, Meta‚Äôs the only FAANG that‚Äôs really hiring at scale ‚Äî and they‚Äôre currently getting away with treating candidates really poorly as a result.\n\nHere‚Äôs how Meta runs their hiring process. These practices have been consistent across every negotiation client we‚Äôve had in the past 6 months or so.\n\nMeta‚Äôs hiring is centralized, which means that you enter one big interview process that‚Äôs completely divorced from which team you might end up on and you interview with people whom you might never work with again. If you do well, there will be a team matching component after you pass the onsite but before you get an offer1. With that in mind, here‚Äôs how they run their process, once you get the green light.\n\nBelow are the steps for negotiating with Meta in a hard climate where they have a monopoly on hiring. We hope that most of these won‚Äôt be necessary in the future. They are:\n\nWe wrote a whole post about how to avoid sharing information with your recruiter and why this is so vital. If you share where you‚Äôre interviewing or how far along you are, or if you start negotiating prematurely, the strategies below won‚Äôt work.\n\nPleaseread our post on not shooting yourself in the foot during negotiationsbefore you continue!\n\nYou should also be aware of a few tricks specific to Meta recruiters. If you're not forthcoming about where else you're interviewing, they may say a few sneaky things.\n\nFirst, they may say something like, \"Well, we just want to know where you're interviewing so we can intro you to others who interviewed at those companies but ultimately chose Meta.\" Don't fall for that early in the process. It's a trap to get information out of you. You can always ask for those intros later, when you're negotiating and it's the right time information about your other offers.\n\nThe other thing they do is fish, saying something like, \"Well, in case you're interviewing at {Google, Netflix, some other big company they don't want to lose candidates to}, just so you know, they move kind of slowly, so we may not be able to wait.\" There, the Meta recruiter's goal is to get you to say, \"Oh, no, don't worry, I'm not interviewing at Google!\"\n\nNow, you've lost leverage in their eyes because that's one less competitive company they might lose you to... and they'll be more confident about lowballing you later on.\n\nAs you may have guessed from reading the previous section, it‚Äôs critical to have other offers, and not just any offers but ones from top-tier companies who pay very competitively3.\n\nWe realize that saying ‚Äúhave other offers‚Äù doesn‚Äôt capture the blood, sweat, and tears that go into months of interview prep, applications, emails, recruiter calls, and interviews. We know it‚Äôs hard, but as you‚Äôll see, it makes a huge difference in your compensation.\n\nGetting those offers doesn‚Äôt start when you‚Äôve received your Meta offer. It starts months before. Make sure that you get enough initial conversations with other FAANGs, FAANG-adjacent companies, and late-stage sexy startups to end up with at least one other offer, ideally at least two. Depending on your interview performance, this might be anywhere from 4 to 10 initial conversations.4\n\nHaving your offers come in around the same time is critical forany negotiation, but it‚Äôs especially important with Meta because they take such a hard line ‚Äî without other offers, they will not meaningfully budge.\n\nObviously, you‚Äôll want to start your conversations with other companies well in advance of your Meta interviews and do everything you can to make sure they all come in at the same time. However, even with your best efforts, it‚Äôs not guaranteed that your timing will match up.Here‚Äôs how to make sure that your offers come in at the same time: slow-play Meta‚Äôs team-matching process.\n\nTeam matching is actually the part of your Meta journey where you have the most leverage and power. Why leverage? At this point, they know they want you, but they can‚Äôt yet hold an offer deadline over you. We‚Äôve already mentioned that once they make the offer, your recruiter is going to push very hard to have you accept, often giving you a deadline of something like two days. In your recruiter‚Äôs eyes, you‚Äôre a ticking time bomb, where for every day you don‚Äôt sign, the deal loses momentum, and your odds of signing drop off. Recruiters are also evaluated on how many candidates they close, so it‚Äôs in their interest to create a false sense of scarcity in order to rush you and to use high-pressure sales tactics to get you to seal the deal.\n\nAnd what power do you have? It turns out you can really control how long team matching takes, within reason. If you‚Äôre still wrapping phone screens with other companies, slow-playing is the best thing you can do. Here‚Äôs how to do it.\n\nWe‚Äôve recently heard that Meta is now insisting that hiring manager conversations happen in series, but even if Meta lets you talk to multiple hiring managers concurrently, try to serialize those conversations as much as possible. For instance, if you hear from your recruiter that you‚Äôre going to start team matching on a Monday, and they offer to set up some calls for Wednesday, ask to do the first call on a Friday and the next call the following Tuesday.\nWhen we advise our users to do this, we often get pushback because they‚Äôre worried that slowing things down will make them look disinterested/not serious. We promise you that‚Äôs not the case. The biggest risk you run when you slow-play team matching scheduling like this is losing the chance to work on a specific team. If you find that your recruiter has proposed what seems like the perfect team for you, you can and should prioritize doing that call as soon as possible.\n\nIn addition to serializing your hiring manager conversations, for each team, ask to talk to a few individual contributors on teams that you‚Äôre serious about. This isn‚Äôt just a stalling tactic. These are the people you‚Äôll be working closely with every day, and they‚Äôre the ones doing the job you may have in the future. They‚Äôre also less likely to do hard sells, and if you ask thoughtful questions, you‚Äôll learn a lot about what to expect. We‚Äôre always surprised by how few candidates ask to speak to their future peers, out of a mistaken concern that asking for too much will make them look disinterested or unengaged.\nJust like with hiring manager calls, if you need to slow things down, we recommend scheduling calls with your peers a few days apart.\n\nWe have seen two instances when our advice about slow-playing could backfire. You probably remember when companies started to freeze hiring aggressively in mid-2022 ‚Äî if you didn‚Äôt get matched before the ax came down, you were left out in the cold. Much more recently, we heard from some of our users that Meta put a pause on team matching for E4 roles (largely outside the Bay Area), and many candidates were stuck in a holding pattern (while Meta figured out headcount constraints, though it looks like it‚Äôs since been resolved, and picking back up in earnest. Slow-playing and then getting stuck is obviously an unfortunate situation, as is being on the wrong end of a hiring freeze, but these situations are rare, and in our humble opinion, not worth optimizing for ‚Äî in most cases, you will not be dealing with an impending freeze or stalled matching. If you‚Äôre unsure about team supply or the state of hiring, you can do two things:\n\nThere's one more situation where slow-playing may bite you. If you match with a team and really click well with the manager, to the point where you have your heart set on it, it may be wise to accept that team instead of trying to drag things out. We've heard of times where, even if the candidate asked the manager about open headcount and confirmed they didn't have to rush, the role got filled from under them (they were able to talk to other teams afterwards but missed the chance to be on that specific team). If a specific team feels irreplaceable to you and you'd be crushed if you didn't get it, then that may be more important than maximizing your negotiation.\n\nOutside of using the team-matching process to control your timeline, there is one other important tactical piece of advice: Do your best to build rapport with hiring managers.\n\nAs we said above, recruiters are trying to close the deal. That‚Äôs their job. Hiring managers, on the other hand, are trying to lay the groundwork for a good working relationship with you. As a result, their interests are much more aligned with yours. Of course, they still want to close you, but it‚Äôs not worth it to them to employ high-pressure tactics, and it‚Äôs not something they‚Äôre trained in or comfortable with (in fact, many of them hated these tactics when they were on the other end of it while looking for work)5.\n\nAs such, hiring managers will generally be a lot more transparent with you about how much time you actually have to make a decision, and their answers will likely be very different from the ones you get from recruiters.\n\nWe‚Äôve advised all of our Meta candidates to ask their prospective hiring managers about when they realistically have to make a decision by, and the differences between what the hiring manager has told them (‚ÄúTake your time; you have a few weeks at least.‚Äù) and what their recruiter has told them (‚ÄúWe‚Äôre talking to a lot of candidates for that team. To ensure your spot, you should make a decision in the next few days.‚Äù) are stark.\n\nThere‚Äôs simply no downside to building rapport with hiring managers. At worst, you make a professional connection. At best, you get a head start on a great working relationship with your new boss.\n\nOne practical note: Always ask your hiring manager for their email address in case you have more questions later. This way, if your recruiter starts telling you that you need to make a decision by Friday, you can ping your hiring manager, explain that you‚Äôre still thinking, and ask if it‚Äôs OK to take a few more days. Almost always they will say yes.\n\nIf you‚Äôve done everything else in this post, the negotiation is the easy part. By now, you‚Äôve wrapped up team matching, chosen a team, and have likely gotten an aggressive offer deadline.\n\nYou have also not shared any offer details till now. As we said at the beginning of this post, the success of your strategy hinges on the recruiter not being aware of the other companies you‚Äôre interviewing with. This will be the first time they find out about it, and that will put them on their proverbial back foot.\n\nTo respond to the offer, you can send an email6that looks something like the below. The details will differ, and how much you reveal about the other offers will vary, but here‚Äôs the general idea.\n\nHey [Recruiter name],\n\nThank you so much for the offer, for working with me throughout this process, and for all your help with team matching.  I wanted to share some details with you. I currently have offers from {Company 1}, {Company 2}, and {Company 3}.\n\n{Company 1} has offered me a significantly higher base salary of $220k. {Company 2} has a comparable base but has offered me significantly more equity: $500k. I know {Company 2} is a startup, but they‚Äôre late stage and handing out RSUs. Those RSUs are as valuable to me as public company equity.\n\nFinally, {Company 3} has thrown in a meaningful signing bonus, and their performance bonus is actually at 25%, not 15%.\n\nI‚Äôm very excited about the opportunity to work at Meta and about the team. {Insert some authentic reasons why you‚Äôre excited about the company, the team, your new boss, etc.} It‚Äôd be great to see a meaningful increase in compensation to make my decision easier.\n\nThank you, and I look forward to hearing from you.\n\nBy the way, this isn‚Äôt the only approach you can take, and with other companies, you might have better luck with theReverse Used Car Salesman. However, in our experience, if you don‚Äôt share offer details, your Meta recruiter will immediately ask you to share, so you might as well control the flow of information.\n\nIn the template above, I‚Äôve assumed that not all of your offers are stronger than Meta‚Äôs across the board, which is why I‚Äôve cherry-picked which pieces to share. Sometimes, if you‚Äôre lucky, you‚Äôll have multiple offers that have a higher base, more equity, and a higher signing bonus. In that case, it‚Äôs less of a game of skill ‚Äî just throw the numbers at them, and they‚Äôll exceed the other offers without much prompting.\n\nIf you run this play, your recruiter will apologize for low-balling you, blaming the ‚Äúcomputer‚Äù for giving them those numbers. Then, like clockwork, you will see a $50k to $150k jump in your offer (precisely how much depends on where your other offers are from and how strong they are).7\n\nNow, whether you take that offer is up to you.\n\nSome closing thoughts. I‚Äôm a capitalist. Meta‚Äôs behavior here is aggressively capitalistic, if short-sighted ‚Äì once other FAANGs start meaningfully hiring again, and Meta employees figure out that there‚Äôs a $150k comp differential between people with the same job title, they‚Äôre going to pay the piper and likely see a bunch of attrition. Ultimately, the market will correct these practices. However, I also believe that individuals have the right and duty to be as informed as possible and to wield whatever weapons in their arsenal to advocate for themselves, rather than waiting on the mercy of slow, indifferent market forces.\n\nAs such, we hope this post has given you some ammunition in your negotiations and helped reduce the information asymmetry between you and Meta, a huge, aggressive player with basically a monopoly on eng hiring at the moment. And we hope that if anyone from Meta is reading this, it‚Äôll spark some internal conversations about what‚Äôs right. And if they don‚Äôt, other FAANGs‚Äô recruiters will swoop in soon enough.\n\nWant to know if you‚Äôre ready to interview at Meta? Do anonymous mock interviews with real Meta interviewers, and see exactly where you stack up.\n\nHow team matching works changed fairly recently. In the past, you‚Äôd get an offer before you matched with a team and do a 6-week ‚Äúbootcamp‚Äù where you‚Äôd get up to speed on Meta‚Äôs tech stack, infrastructure, and systems, followed by a multi-week ‚Äúspeed dating‚Äù-esque team matching cycle. Bootcamp still exists, but now it's much shorter (2-4 weeks), and the focus is getting new engineers ramped up on generic tools. After that, new engineers continue to ramp up on their specific teams.‚Ü©\n\nWe‚Äôve recently heard that Meta may now be insisting that team matching conversations happen in serial, i.e., you can only do one at a time. However, this doesn‚Äôt meaningfully change our advice.‚Ü©\n\nYou might say, ‚ÄúAline, why can‚Äôt I just make up offers?‚Äù We could never, in good conscience, advise that. It‚Äôs unethical, and though I‚Äôd argue that while Meta‚Äôs negotiation practices are also unethical, that‚Äôs not the way to win. Outside of ethical considerations, while the risks of getting caught are low, they‚Äôre not zero. Lying about offers, in our mind, is the last refuge of the incompetent.‚Ü©\n\nThe advice in this post is orthogonal from your career goals and what you want to work on. This blog post is about navigating an unfair system filled with opaque rules while maximizing your cash. It is not about self-actualization, though we‚Äôd argue that creating the most optionality for yourself helps with self-actualization as well. You can also talk to smaller companies and use your big-co offers as leverage to increase your startup equity. There‚Äôs nothing wrong with that, but more detail on optionality and self-actualization is outside the scope of this post.‚Ü©\n\nOf course, some hiring managers will use high-pressure sales tactics or create false timelines to try to close you. But that‚Äôs the exception rather than the rule. You can decide if that‚Äôs something that you want to weigh when judging whether or not you want to work for them.‚Ü©\n\nWe strongly urge you to avoid negotiating over the phone and over text, whenever possible. Your recruiter does 5 of these calls a day. You might do one of these calls every few years. Do the hard part over email. It‚Äôs the best way to level the playing field.Read this postto learn how to avoid synchronous phone negotiations (just look for ‚Äúphone‚Äù).‚Ü©\n\nOne advanced maneuver is to pit all your other companies against each other and raise up their initial offers BEFORE talking to Meta. We‚Äôll likely write about how to run this play in a future post.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/how-to-negotiate-with-meta",
      "author": "",
      "user_id": ""
    },
    {
      "title": "How well do LeetCode ratings predict interview performance? Here's the data.",
      "content": "# How well do LeetCode ratings predict interview performance? Here's the data.\n\n## The experiment\n\n## Results\n\n## Conclusion\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### The total number of questions you have completed matters!\n\n### The difficulty level you attempt matters, too!\n\n### Contests and rankings don't matter\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Subarray Sum Equals K\n\n### Top K Frequent Elements\n\n### LRU Cache\n\n#### Related posts\n\n#### Stuff we write about\n\nMike Mroczka, a former senior SWE (Google, Salesforce, GE), is the primary author ofBeyond Cracking the Coding Interview‚Äîthe official sequel to Gayle McDowell's original CTCI. He works as a tech consultant and has a decade of experience helping engineers land their dream jobs. He‚Äôs a top-rated mentor (interviewing.io, Karat, Pathrise, Skilled.inc) and the author of viral technical content on system design and technical interview strategies featured on HackerNews, Business Insider, and Wired. He also sometimes writes technical content for interviewing.io (like this piece) and was one of the authors of interviewing.io‚ÄôsA Senior Engineer's Guide to the System Design Interview.\n\nYou can find him online atmikemroczka.com,LinkedIn, andX.\n\nHave you ever wondered if you should spend more time on LeetCode, participate in those contests, or focus on solving harder problems? Apopular Reddit postsuggests you need 700+ questions and a LeetCode rating between 1800-2000 to pass FAANG interviews. Is this really what the data supports? To answer these questions and more, we looked at our users' LeetCode ranks and ratings and tied them back to interview performance on our platform and whether those users worked at FAANG.\n\nIn this post, we‚Äôll share what we‚Äôve learned.\n\ninterviewing.io is an interview practice platform and recruiting marketplace for engineers. Engineers use us for mock interviews. Companies use us to hire top performers. Hundreds of thousands of engineers have used our platform to prepare for interviews, and we have performance data for over 100k technical interviews (split between real interviews and mocks).\n\nWe surveyed almost 700 of our users and asked them to share their LeetCode and LinkedIn profiles. From those profiles, we pulled our users‚Äô employment history, as well as their LeetCode data: number of problems worked, ratings, and, if they had it, contest performance. Finally, we cross-referenced all this data with their performance in mock and real interviews on interviewing.io.\n\nThis data set allowed us to start asking interesting questions. How much LeetCoding is useful? What kinds of problems are most useful to practice? How does LeetCode performance relate to performance in interviews with real people? Do LeetCode contest scores predict interview performance, and is a competitive coder likelier to work at a big tech company? Are hard questions worth solving or should we just stick with mediums? Let's find out!\n\nThe matrix below summarizes our findings. In addition to all LeetCode fields listed below, we also looked into global ratings and contest ratings. It was harder to find a large enough sample size to see any effect of those who did contests. Since the results were not large enough to be informative we have excluded them from the rest of this piece. All findings listed below are statistically significant, with lighter squares indicating stronger correlations.\n\nFor each profile, we looked at the following attributes:\n\nThis matrix summarizes the correlations between LeetCode attributes (y axis) with 1) whether people worked at a FAANG and 2) how well they performed in interviews on interviewing.io (x axis). The higher the number (and the darker the color), the stronger the relationship.\n\nFor instance, the number of questions a user solved correlates with working at a FAANG company and a user‚Äôs percentile ranking on interviewing.io. We see that it is a stronger predictor of interview performance than it is for working at a FAANG company (0.27 and 0.17, respectively).\n\nLet's dig into the most exciting findings!\n\nUnsurprisingly, the total number of questions a user has completed correlates with having FAANG on their resume and doing well in technical interviews.Those who work at FAANG companies appear to have completed more questions than those who do not.\n\nDon't fret, though, as this doesn't mean you're doomed to be behind people who have started sooner and have amassed thousands of questions. The vast majority of our top users stop LeetCoding after they've hit about 500 questions. Only a fraction of top users have done more than ~500 questions, and only about 10 did more than a thousand questions.As you might expect, there are seriously diminishing returns associated with doing more than 500 questions. Those who continued past the 500 questions performed only marginally better than those who had stopped near 500.\n\nIn the zero-sum interviewing game, those who complete the most LeetCode questions generally get the highest interview scores and work at the most desirable tech companies, but completing ~500 questions will put you among the top talent in the current market.\n\nIt is common wisdom on the LeetCode discussion board and subreddits to \"do medium questions, not hard questions,\" with the argument that companies don't ask LeetCode hards. Does this advice stand up to scrutiny?Mostly no.\n\nThe data shows a clear bias towards those who solved more challenging problems, the exact point at which this matters is up for debate. At interviewing.io we find that before tackling difficult questions, you just need to first start doing problems.Getting started matters more than attempting to complete a particular question difficulty, so don't focus arbitrarily on medium/hard questions, just focus on practicing!\n\nTip 1: Start with anything. Getting started matters more than picking the perfect set of questions.For those just starting, you might think, \"I'm a straight-A student and a fast learner, so I should be able to manage hard questions.\" Don't make this mistake, or you'll burn out quickly. Instead, just focus on doing questions and getting into the habit of translating your thoughts into code efficiently.\n\nBefore tackling mediums and hards, we need to first get good at easy questions.Once we can tackle mediums, for each additional 50 questions you complete, you increase your score of passing your interviews by three percentage points.\n\nOn the other hand, a LeetCode hard carries overtwicethe benefits of a medium question. Completing 50 hard questions increases your interview score by seven percentage points!Our data shows that you'd need to complete close to 233 medium questions to get the same benefits that 100 hard questions would give. Consider these two people (fictitious but inspired by real examples in our data):\n\nThese two people are statistically likely to have similar interview scores, yet Kara completed half the number of questions Alex did. While it goes against standard advice, harder questions having a higher benefit make sense. A LeetCode medium tends to require you to do one thing (perform a DFS, scan an array, etc.) to get the correct answer. In contrast, hard questions require you to do multiple things (memoize results while performing a DFS, tally prefix sums while scanning an array, etc.).The compounding nature of multiple tasks in harder questions necessitates deeper learning in fewer questions.\n\nAdmittedly, there is a chicken-and-egg scenario going on here. Naively, one might think everyone should just do hard questions, but that doesn't work in practice. Jumping straight to hard questions is an infeasible leap for most people, and the reason many people can complete hard questions is preciselybecausethey have finished many medium questions first. Our advice is not to jump to hard questions immediately. Instead, you should be mindful and not stay at the medium difficulty level longer than necessary. It isn't that the advice to \"do medium questions\" is wrong‚Äîit is just overused. It is natural to want to be able to complete a question regularly in a short period of time. Still, if you find yourself completing LeetCode mediums quickly, it indicates that you have stagnated and would be better off moving on to hards. If you have solved 100 or more medium questions, you'll likely get more bang for your buck by transitioning to hard.\n\nTip 2: Don't ignore hard questions.Balance your medium questions with the hard ones. The compounding nature of multiple tasks in harder questions necessitates deeper learning in fewer questions.\n\nFinally, we must also acknowledge that not all hard questions are created equal. This tip is my gut feeling, and we don't have data to back it up, but intuitively, we've all done hard questions that seemimpossible, hard questions that seemed like they should have been ratedmedium, and even medium questions that seem like they should have beenhard. Question difficulty is somewhat subjective, so if you focus on hard questions, choose questions with a high acceptance rating and/or ones that are \"frequently asked.\" These questions tend to beachievable(they don't have a single impossible trick you need to just have known),realistic(they don't test nonsense algorithms no one knows like Manacher‚Äôs algorithm), andsolution-flexible(there is often more than one valid approach).\n\nTip 3: When choosing hard questions, pick popular questions.They are more likely to beachievable,realistic, andsolution-flexible, which will likely result in more learning per question.\n\nSurprisingly, we found no correlation between LeetCode ratings and their interviewing percentile. Those who were great at contests also didn't appear more likely to have FAANG on their resume.  Two confounding variables that might have caused these unexpected results are:\n\nTip 4: Don't worry about contests unless you enjoy them.They provide a way to practice managing your time and keep yourself honest with how fast you are moving, but they don't contribute much to your success apart from containing more questions for you to attempt.\n\nIn the end, LeetCode questions are a reasonable proxy for predictors of interview performance. While ratings and contest scores don't seem to matter,1questions ‚Äîand question difficulty‚Äîdo. Focus on tackling increasingly difficult questions until you've hit that point of diminishing returns near ~500. Don't stagnate with medium questions; pick popular and frequently asked hard questions, too. And don't stress if your friend has a higher LeetCode score than you do; turns out it doesn't mean much!\n\nA caveat here is that, strictly speaking, we're reporting correlations‚Äînot necessarily causal relationships. This leaves open the possibility that what we were measuring was not exactly a return to LeetCode but rather the effect of some third variable that increases both LeetCode activity and job prospects. For example, say MIT has a course that emphasizes coding puzzles, and MIT grads also get better jobs. In that case, what might look like a LeetCode benefit is actually an MIT benefit, and controlling for that would make the apparent benefit disappear. At the very least, though, these patterns are informative about the typical profile of successful engineers, which is likely a useful thing to emulate in general. Also, remember that our data still shows solving a healthy number of questions regardless of their difficulty can boost your chances of getting through difficult interviews. By definition, many people can pass interviews with far fewer problems completed, and many will pass after doing more problems.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/how-well-do-leetcode-ratings-predict-interview-performance",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Are recruiters better than a coin flip at judging resumes? Here's the data.",
      "content": "# Are recruiters better than a coin flip at judging resumes? Here's the data.\n\n## The setup\n\n## Recruiters‚Äô resume judgments are just slightly better than a coin flip\n\n## Recruiters can‚Äôt agree on what a good candidate looks like\n\n## The most sought-after resume attributes\n\n## How do recruiters‚Äô stated reasons for rejecting candidates line up with actual rejection reasons?\n\n## Slowing down is associated with better decisions\n\n## Can AI do better?\n\n## Where does this leave us?\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Question #1: Would you interview this candidate?\n\n### Question #2: What is the likelihood this candidate will pass the technical interview?\n\n### Advice for candidates\n\n### Advice for recruiters\n\n### What this means for our industry\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Maximum Subarray\n\n### Partition to K Equal Sum Subsets\n\n### Find Peak Element in a 2D Array\n\n#### Related posts\n\n#### Stuff we write about\n\nThis post is a very exciting first for interviewing.io because it‚Äôs about a proper experiment run by a real, live academic research lab. If you‚Äôve been reading my work for the past decade, you know that I‚Äôve always been something of an armchair researcher. I ran some experiments before starting interviewing.io, and since then, my team and I havekept it up.\n\nOne of the experiments I ran before I founded interviewing.io was an attempt to figure out how good recruiters were at judging candidate quality based on resumes. I ran it 10 years ago and discovered that not only was everyone bad at judging resumes (about as accurate as flipping a coin),they all disagreed with each other about what a good candidate looked like.\n\nEven though these results were shocking at the time, the study had some serious limitations. First, I had no objective measures for which candidates were actually good. I was working as a recruiter at the time, so I knew whom I had been able to place, but that‚Äôs obviously not the be-all and end-all of engineering ability. Second, I had a non-representative sample of software engineers. Due to my brand, I had managed to attract a lot of excellent, non-traditional candidates ‚Äî engineers who were actually very good but didn‚Äôt look good on paper. These types of resumes are the hardest for recruiters to judge, and the data was full of them. Finally, my sample size wasn‚Äôt that big: I ended up with 716 data points in total, only about half of which came from recruiters (the rest came from engineers and hiring managers ‚Äî my original hypothesis was that they might be better at the task, but I was wrong‚Ä¶ everyone was bad at judging resumes).\n\nSo, now that I‚Äôm CEO of interviewing.io, with access to a lot more data, resources, and a team of excellent academics atLearning Collider, we decided to run this study again, but with a more rigorous treatment and better conditions, to see if we could replicate the results. This time, we focused just on recruiters, given that they‚Äôre most often the gatekeepers who decide which candidates get an interview.\n\nBelow are all the details, but here‚Äôs the TL;DR: we reproduced my results from 10 years ago! Our new study showed that recruiters were only a bit better than a coin flip at making value judgments, and they still all disagreed with each other about what a good candidate looks like.\n\nIn this piece, we also talk about:\n\nThe rest of this piece is co-authored by Peter Bergman, Tushar Kundu, and Kadeem Noray of Learning Collider.\n\nIn the real world, resumes (or LinkedIn profiles) are evaluated by recruiters in minutes ‚Äî even seconds ‚Äî and these evaluations are THE thing that determines who gets an interview.\n\nBut what do these word walls tell recruiters? How predictive are their evaluations of actual interview success? Ultimately, how good are recruiters at judging resumes?\n\nTo answer these questions, we designed a study approximating technical recruiters‚Äô decisions in the real world. We asked176 technical recruiters (both agency and in-house) to review and make judgments about 30 engineers‚Äô resumes each, just as they would in their current roles.\n\nThey answered two questions per resume:\n\nWe ended up with nearly 2,200 evaluations of over 1,000 resumes.\n\nThe resumes in this study belonged to interviewing.io users (with their consent) ‚Äî actual engineers currently on the job market.\n\nCollaborating on this study with interviewing.io is an ideal scenario, precisely because outcome data were available for comparison purposes. Each engineer in this study has completed multiple mock interviews on the platform. Performance in these interviews is quite predictive of performance in real interviews: top performers (roughly the top 5% of users) on interviewing.io are 3X more likely to pass technical interviews at top-tier companies than candidates from other sources. Even passing a single interview on interviewing.io is a strong predictor of outcomes; it's associated with a 32% increase in the chance of working at a FAANG company post-interview.\n\nOnce we had recruiters‚Äô evaluations of the resumes, we compared them to how those engineers actually performed on interviewing.io: skills scores, feedback from interviewers, and ultimately, whether they passed or failed their mock interviews.\n\nIn aggregate, recruiters in the study recommended 62% of candidates for an interview. But how did recruiter evaluations stack up against candidates‚Äô performance on the platform?\n\nWe calculated recruiter accuracy by treating each candidate‚Äôs first interview (pass/fail) as the truth, and recruiters‚Äô decision to interview as a prediction. It turns out that recruiters chose correctly 55% of the time, which is just slightly better than a coin flip.\n\nRecruiters predicted the likelihood that each candidate would pass the technical interview. In most hiring processes, the technical interview follows the recruiter call and determines whether candidates proceed to the onsite. Being able to accurately predict which candidates will succeed at this stage is important and should inform the decision about whether to interview the candidate or not.\n\nWhat we found most surprising is how far their predictions were from the truth:\n\nBelow is a graph that shows recruiter predictions vs. actual performance. The x-axis is the bucketed recruiter rating. In other words, the first point is all the candidates that recruiters assigned a 0-5% likelihood of passing. The y-axis is the average interviewing.io pass rate for those candidates. The red dotted line represents 100% accuracy ‚Äì in an ideal world, the higher a recruiter's ranking of a candidate, the higher their actual performance would be. The orange line represents reality ‚Äì as you can see, there isn‚Äôt much correspondence between how recruiters predicted candidates would perform and their actual performance.\n\nRecruiters‚Äô predictions below 40% underestimate these candidates by an average of 23 percentage points. Above 60%, they‚Äôre overestimating by an average of 20 percentage points.If this was predicting student performance, recruiters would be off by two full letter grades.\n\nClearly, there is lots of noise in resume evaluations. Were recruiters‚Äô noisy judgments at least consistent when reviewing the same resumes?\n\nNearly 500 resumes were evaluated by more than one recruiter. Based on a random selection of two evaluations per resume, the overall likelihood of two recruiters agreeing to either interview or not interview a given candidate was 64%.\n\nSince recruiters also guess the probability a candidate will pass the technical interview, we can compare how different these guesses are for a given candidate.The average differential between two randomly selected recruiters‚Äô evaluations of the same resume was 41 percentage points. So, let‚Äôs say one recruiter predicts a 30% probability the candidate would pass; another recruiter evaluating the same resume would predict, on average, a 71% probability of passing.\n\nTo further understand just how prevalent the disagreement is, we looked at the standard deviations for across-candidate evaluations and same-candidate evaluations:\n\nSo, when two recruiters are asked to judge the same candidate, their level of disagreement is nearly the same as if they evaluated two completely different candidates.\n\nDespite the noise and variability in the study‚Äôs resume evaluations, there were some characteristics that recruiters consistently favored: experience at a top-tier tech3company (FAANG or FAANG-adjacent) and URM (underrepresented minority) status (in tech, this means being Black or Hispanic).\n\nMost predictive for Question #1 (whether a recruiter would want to interview that candidate) was experience at a top company ‚Äî these candidates were 35% more likely to be picked. Black or Hispanic candidates are also associated with an increased likelihood a recruiter would interview a candidate ‚Äî by 21%.4\n\nWith Question #2 (how likely the candidate was to pass a technical interview), having a top company on your resume is associated with a 21% increase in the likelihood that recruiters believe the candidate will pass the interview. Compared to the actual pass rates, recruiters‚Äô predictions of FAANG candidates are generally accurate (average 4 percentage point overestimate).5Unlike the presence of a top company, URM status didn't appear to influence recruiter decisions here.\n\nSo, we know what recruiters tend to favor, whether they‚Äôd admit to it or not: 1) FAANG/FAANG-adjacent experience and 2) URM status. But what‚Äôs even more interesting than why a recruiter would say yes is why they would say no.\n\nWhen we asked recruiters to judge a resume, we also asked them WHY they made that decision.6Below are recruiters‚Äô stated reasons for rejecting candidates. As you can see, ‚Äúmissing skill‚Äù is the main reason by far, with ‚Äúno top firm‚Äù a distant third.\n\nSo, then, we wondered‚Ä¶ How do recruiters‚Äô stated reasons for rejecting candidates line up with reality? To figure that out, we analyzed the resumes that ended up in the rejected pile and looked at common traits.\n\nBelow is a graph of actual rejection reasons, based on our analysis. The main rejection reason isn‚Äôt ‚Äúmissing skill‚Äù ‚Äî it‚Äôs ‚Äúno top firm.‚Äù This is followed, somewhat surprisingly, but much less reliably (note the huge error bars), by having an MBA. ‚ÄúNo top school‚Äù and having a Master‚Äôs degree come in at third and fourth. Note that these top four rejection reasons are all based on a candidate‚Äôs background, NOT their skill set.\n\nAnother key piece of this study is time. In hiring settings, recruiters make decisions quickly. Moving stacks of candidates through the funnel gives little room to second-guess or even wait before determining whether or not to give a candidate the opportunity to interview.\n\nIn our study,the median time spent on resume evaluations was just 31 seconds. Broken down further by Question #1 ‚Äî whether or not the recruiter would interview them ‚Äî the median time spent was:\n\nGiven the weight placed on single variables (e.g., experience at a top firm), how quickly recruiters make judgments isn‚Äôt surprising. But might they be more accurate if they slowed down?It turns out that spending more time on resume evaluations, notably >45 seconds, is associated with more accurate predictions ‚Äî just spending 15 more seconds appears to increase accuracy by 34%.7It could be that encouraging recruiters to slow down might result in more accurate resume screening.\n\nAs a gaggle of technologists and data geeks, we tested whether algorithms could quiet the noise and inconsistencies in recruiters‚Äô predictions.\n\nWe trained two local, off-the-rack machine-learning models.8\n\nJust like human recruiters, the models were trained to predict which candidates would pass technical interviews. The training dataset was drawn from interviewing.io and included anonymized resume data (years of experience, whether they had worked at a top firm, and whether they had attended a top 10 school for either grad or undergrad), candidates‚Äô race and gender, and interview outcomes.9\n\nDespite the very limited types of data we input into both models, when presented with out-of-sample candidate profiles, both models made predictions more accurately than human recruiters.\n\nRandom Forest was somewhat more accurate than recruiters when predicting lower performing candidates. XGBoost, however, was more accurate across the board than both the Random Forest model AND recruiters.\n\nIn this section, when we say ‚Äúwe,‚Äù we are speaking as interviewing.io, not as the researchers involved in this study. Just FYI.\n\nAt interviewing.io, we routinely get requests from our users to add resume review to our list of offerings. So far, we have declined to build it. Why? Because we suspected that recruiters, regardless of what they say publicly, primarily hunt for name brands on your resume. Therefore, highlighting your skills or acquiring new skills is unlikely to make a big difference in your outcomes.\n\nWe are sad to see the numbers back up our intuition that it mostly is about brands.10As such, here‚Äôs an actionable piece of advice: maintain a healthy skepticism when recruiters advise you to grow your skill set. Acquiring new skills will very likely make you a better engineer. But it will very likely NOT increase your marketability.\n\nIf enhancing your skill set won‚Äôt help, what can you do to get in front of companies? We‚Äôre in the midst of a brutal market, the likes of which we haven‚Äôt seen since the dot-com crash in 2000. According to anecdotes shared in our Discord community, even engineering managers from FAANGs are getting something like a 10% response rate when they apply to companies online. If that‚Äôs true, what chance do the rest of us have?\n\nWe strongly encourage anyone looking for work in this market, especially if you come from a non-traditional background, to stop spending energy on applying online, full stop. Instead, reach out to hiring managers. The numbers will be on your side there, as relatively few candidates are targeting hiring managers directly. We plan to write a full blog post on how to do this kind of outreach well, but this CliffsNotes version will get you started:\n\nWe know that recruiting is a tough job, especially in the current climate, where there are more applicants than ever and fewer recruiters to parse through them. So, it rationally makes sense to us that a recruiter would spend no more than 30 seconds per resume and focus primarily on looking for top brands.\n\nWe hope, though, that this piece may have given a measure of pause about your approach, and we‚Äôd like to leave you with two actionable pieces of advice. First, if you do nothing else, please slow down. As you saw above,  taking just 15 extra seconds to read a resume could improve your accuracy by 34%.11\n\nOur second piece of advice is this. Freada Kapor Klein from Kapor Capital coined the term ‚Äúdistance traveled‚Äù more than two decades ago. It refers to what someone accomplished, in the context of where they started. For instance, Kapor Klein recommends that, in their admissions processes, universities should consider not just the number of AP tests a candidate has passed but the number of AP tests divided by the total number offered at their high school. For example, if an applicant took 5 AP tests and their school offered 27, that paints a very different picture from another applicant who also took 5 AP tests when that‚Äôs the total number offered at their school. Kapor Capital uses distance traveled as one of their metrics for determining which entrepreneurs to fund. One can easily apply this concept to hiring as well.\n\nTake a look at the resume below. \"John\" (name has been changed; scrubbed resume shared with permission) studied chemical engineering and worked his way into software engineering by starting as a service engineer focused on pen testing. In the meantime, he completed a bootcamp, attended the Bradfield School of Computer Science (a school dedicated to teaching computer science at a depth beyond what many university programs, and certainly most bootcamps, offer), and ended up with a senior title in just three years.\n\nJohn was consistently rated poorly by recruiters but is one of the top performers on interviewing.io.\n\nIt takes just a bit more time, so please spend a little longer reading resumes, and evaluate candidates‚Äô achievements in the context of where they came from. Think about the denominator. But don‚Äôt think for a moment that we recommend that you lower the bar ‚Äî absolutely not. On interviewing.io, we regularly see candidates like John objectively outperforming their FAANG counterparts.\n\nThe last time I did this research, I wrote about how being bad at judging resumes isn‚Äôt anything to be ashamed about and that comes down to the resume itself being a low-signal and not-very-useful document.\n\nI held that same opinion for the last decade (and even wrote arecent post about how AI can‚Äôt do recruiting)‚Ä¶ right up until we ran this study and successfully built two ML models that outperformed recruiters.\n\nSo, I stand corrected.\n\nAs you saw above, both models were limited ‚Äì they were looking at the same types of features that recruiters do when they quickly scan a resume, certainly fewer features than recruiters have access to. But, despite that, the AI models still outperformed humans. What happens then, if you can build a model that behaves like a recruiter who really slows down and reads everything? These results make me believe that resumes do carry some signal, and you can uncover it if you carefully read what people write about their jobs and themselves and also analyze how they write it. Unfortunately, this takes more time and effort to uncover than most human recruiters are able to devote. And, in retrospect, that‚Äôs a good task for AI. Though we haven‚Äôt built a model like that for this post, I‚Äôm optimistic that we may be able to do it in the future.\n\nAs I said in the AI piece I linked above, in order for AI to do useful recruiting work, rather than just perpetuating the biases that human recruiters hold, it needs a data set that contains some objective measure of performance. Most recruiting AI models today do one of three things: glorified keyword matching, training on what recruiters prefer (the outcome is whether a recruiter would want to talk to the candidate, NOT whether the candidate is good), or live on top of existing tools like ChatGPT (whichwe recently showed doesn‚Äôt perform very well and is biased against non-traditional candidates). These three approaches just result in the wrong thing being done, faster.\n\nI hope that, in the not too distant future, we can use AI to make less-biased decisions, using meaningful performance data. And I hope that this type of AI solution can get adoption among the recruiting community.\n\nParticipating technical recruiters were paid a base rate and then received additional $$ for each accurate prediction.‚Ü©\n\nDifferent roles have different requirements. To correct for that, we asked each candidate to specify which eng role they were applying for: Software Engineer (back-end or full-stack), Mobile Engineer, Front-end Engineer, ML Engineer, Data Engineer, or Engineering Manager. Then we prompted recruiters to evaluate them specifically for that role. If no role was specified by the candidate, the default role to evaluate for was Software Engineer (back-end or full-stack).‚Ü©\n\nTop firms = Airbnb, Amazon, Anthropic, AWS, Apple, Asana, Atlassian, Bloomberg LP, Checkr, Coinbase, Coursera, Cruise, Dropbox, Etsy, Facebook, Flexport, GitHub, Google, Gusto, HashiCorp, Instacart, Instagram, Jane Street, Jump Trading, Khan Academy, LinkedIn, Lyft, Medium, Microsoft, Mozilla, Netflix, Oculus, OpenAI, Palantir, Peloton, Pinterest, Postmates, Quora, Reddit, Robinhood, Roblox, Salesforce, Segment, Slack, Snap, Snowflake, SpaceX, Spotify, Square, Stripe, Tesla, Thumbtack, TikTok, Twilio, Twitch, Twitter, Two Sigma, Uber, Udemy, Waymo, Whatsapp, Yelp, and Zoom.‚Ü©\n\nWe corrected by FAANG & FAANG-adjacent experience (and all of our other variables) before making this statement, i.e., the effect existed for engineers from underrepresented backgrounds who did not have FAANG/FAANG-adjacent companies on their resumes. We expect that recruiters favor underrepresented minority candidates because of guidelines from their employers to focus on sourcing these types of candidates, as part of DEI initiatives. Discussion about the magnitude of this effect and its implications is out of scope of this piece.‚Ü©\n\nInterestingly, recruiters might penalize, for example, alternative education. Candidates with only alternative education pathways post-high school ‚Äî coding bootcamps or digital certifications ‚Äî appeared to be penalized by recruiters in this study. However, with limited observations (n=11), it‚Äôs inconclusive without further study.‚Ü©\n\nThat field was optional, so most of the reasons recruiters provided were in cases when they said no ‚Äî presumably because the reasons for saying yes may have seemed self-evident.‚Ü©\n\nIt‚Äôs not that recruiters who generally take their time make more accurate judgements. Any recruiter slowing down might make them better at judging resumes!‚Ü©\n\nIt‚Äôs important to stress that neither algorithm was custom-built. The models, one using a Random Forest algorithm and the other an XGBoost algorithm, are distinct but interrelated approaches akin toDecision Tree algorithms. Decision trees sort data into groups based on features. Random forest algorithms combine multiple decision trees to improve predictions. XGBoost builds multiple decision trees one after another, with each new tree focusing on prediction errors from the previous trees.‚Ü©\n\nTraining data excluded data in this study. We take user privacy very seriously, and we want to stress that all models were local and anonymized and that no data in this study was shared with cloud LLMs.‚Ü©\n\nTo see a particularly egregious example of recruiters favoring brands over substance, take a close look atthis fake resume that got a bunch of recruiter responses.And this one too.‚Ü©\n\nWe haven‚Äôt proven causality here, but when we just scoped our analysis to the same person, it appeared that taking more time did help (in other words, it‚Äôs not just that recruiters who spend more time usually are more accurate; it‚Äôs the added time). Still, this is something that merits more work, and we'll try to investigate it causally in the future.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/are-recruiters-better-than-a-coin-flip-at-judging-resumes",
      "author": "",
      "user_id": ""
    },
    {
      "title": "How to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.",
      "content": "# How to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.\n\n## Prerequisites/tooling\n\n## Treat your job search like a sales funnel\n\n## What to actually do\n\n## Two templates for you to use\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Look up their email addresses\n\n### Write succinct, highly personalized emails\n\n### Template #1: Use this template if your target has an online presence\n\n### Template #2: Use this template if you don‚Äôt have anything except a LinkedIn profile for your target\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Reverse Integer\n\n### Confusing Number\n\n### Infinite Binary Print\n\n#### Finding common ground\n\n#### Selling yourself\n\n#### Accomplishments\n\n#### Social proof\n\n#### Formulating a strong call to action\n\n#### Related posts\n\n#### Stuff we write about\n\nInpart 1 of this post, we talked about which channels are most effective for getting in the door and did an analysis of those channels along two axes: effectiveness and how much control you actually have. Here‚Äôs a quick summary.\n\nIn the quadrant above, you can see that while getting contacted by an in-house recruiter is very effective, whether you get contacted or not is largely out of your hands. The channel that maximizes both effectiveness and control is cold outreach to hiring managers (not recruiters!) ‚Äúdone right‚Äù. What does ‚Äúdone right‚Äù mean? That‚Äôs what we‚Äôll talk about in this post (part 2 of 2). Most people do this type of outreach incorrectly. Here, we‚Äôll get very tactical and tell you exactly what to say and do to reach out to hiring managers at the companies you‚Äôre interested in and actually get responses.\n\nHere‚Äôs our recommended, hyper-practical approach.\n\nIf you‚Äôre an engineer, chances are you haven‚Äôt ever done sales (maybe you had a job in high school selling Cutco knives or magazines, in which case what we‚Äôre about to say will resonate). But if you do sales for any appreciable amount of time, you‚Äôll start thinking about everything in life as a funnel.\n\nFunnels are wide at the top and narrow at the bottom. That‚Äôs why they‚Äôre such an apt metaphor for the sales process ‚Äî you do a lot of outreach, and you don‚Äôt get many responses. Of the responses you do get, relatively few will do the thing you want them to do. And even fewer will ultimately ‚Äúclose‚Äù (aka, buying ‚Äî or, in this case, hiring).\n\nIn your engineering career, you‚Äôve intellectually mastered many abstract concepts that are much more complex than a funnel. Despite its simplicity, however, the funnel is one of the hardest concepts to internalize emotionally, especially for people who are used to having control over outcomes. When you write code fornhours, you can expect that you will buildmfeatures.\n\nIn sales though, you do a lot of work, very little of it will pan out, and when it does pan out, it can feel almost random; an impersonal, mediocre email gets a response while your beautifully targeted email is met with deafening silence.\n\nAnd then there‚Äôs rejection. When you apply to jobs online and don‚Äôt hear back, it stings, but the sting is softened by the possibility that a human never even saw your application. You‚Äôre not reaching out to people when you apply online; you‚Äôre dealing with a bureaucratic machine.\n\nOn the other hand, when you email a real human and they don‚Äôt respond, that hurts: you put yourself out there, someone made a value judgment about you, and you lost.\n\nThe good news is that, after a while, the pain lessens, and you build up some useful emotional calluses and acquire the thousand-yard stare of someone who‚Äôs been rejected a million times for a million reasons, ranging from soul-crushingly legitimate to incontrovertibly random.Sadly, there‚Äôs no shortcut. You‚Äôve got to do the reps, you‚Äôve got to get the rejections, and you‚Äôve got to pick yourself up again. You get used to it, and then it doesn‚Äôt hurt as much, because experience has taught you that if you keep going, you will eventually get to a yes.\n\nFirst, come up with a target list of companies.How to do that is out of scope for this post, but we may write about it in the future. For now, we‚Äôll assume you have a list.\n\nOnce you have your list of companies, use LinkedIn Sales Navigator to find hiring managers at those companies (or founders or directors or VPs, as above). Below is an example query where we look for Google hiring managers.\n\nYou might think that Google is so big that sifting through all their various hiring managers will be intractable. Fortunately, you can whittle down the list to a pretty manageable size by applying some filters.\n\nHere are our filters:\n\nOnce you have your list, put their LinkedIn URLs into a spreadsheet. Then, do a pass through your targets‚Äô profiles and see if any of them link to personal websites, social media accounts, blogs, or anything else that will help you find common ground with them.Add any useful links in your spreadsheet because we‚Äôll be mining them when we actually write our emails.\n\nOnce you have your list of LinkedIn URLs, use a tool like RocketReach to look up their emails.\n\nWhy not reach out on LinkedIn? While recruiters live on LinkedIn, managers generally do not. Possibly, they don't even like or check LinkedIn much. They live in their emails, so that's where you want to target them.\n\nRocketReach is a nice tool for email discovery because 1) it takes LinkedIn URLs as inputs and 2) its email database is generally up-to-date and correct.1\n\nIf RocketReach fails or you don't wish to pay for it, you might just be able to guess their email address, as email addresses tend to follow common forms:aline@interviewing.io(my actual email address),alerner@interviewing.io, oraline.lerner@interviewing.io.\n\nWhere possible, contact managers via their work email address.2In some cases, you won‚Äôt be able to find their work email, in which case it‚Äôs acceptable to fall back to their personal email.\n\nNext, compose a fairly personalized, yet short, email.All too often, candidates write a long, generic cover letter that‚Äôs obviously been sent to a ton of people. I get many emails that look like this:\n\nDon‚Äôt do this either! There is nothing here about why this candidate is a good fit for interviewing.io, and the bullets aren‚Äôt compelling enough on their own. Note that this particular email is from a marketer, not an engineer, but the anti-patterns are the same.\n\nEmails like the above are impersonal, but worst of all, they have a poor signal-to-noise ratio ‚Äî I want to find a reason to say yes and to invest my valuable time into this person. But they‚Äôre not giving me one, and they‚Äôre making me work for it in the process.\n\nMore broadly, if you want someone to go out on a limb for you, make it dead simple for them to justify expending their social/political capital on you. Hiring managers, as a rule, want to help. Make it a no-brainer for them.\n\nThere are three components to a great cold email:\n\nNot every cold email will have (1) because you won‚Äôt always be able to find common ground with everyone ‚Äî there‚Äôs simply not enough information out there about some targets to be able to craft a compelling narrative that‚Äôs highly personalized to them.\n\nBut every cold email you write should have (2). It is your job to sell yourself quickly and succinctly. You want your target to feel like they‚Äôd be an idiot to pass up the chance to talk to you.\n\nThe email below is personal, succinct, and finds common ground. Not only that, but it conveniently finds common ground thatbenefits the candidate(a soft-spot for non-traditional candidates, like himself!).\n\nTo find common ground, reference something your target cares about. Then either show them that you care about it too or that helping you would fit into their worldview and further that cause.\n\nAs we mentioned above, finding common ground may be tough because there might not be enough information available about your target, but it‚Äôs important to do the work before you give up on this route ‚Äî finding common ground is the tactic that‚Äôs going to get you the highest response rates.\n\nHere are some examples of great ways to build common ground:\n\nWe understand that you won't always be able to find common ground. But if you can, it'll help you a lot, especially if you‚Äôre light on social proof or accomplishments.\n\nSelling yourself is usually about one of two things:\n\nSome people are fortunate enough to have both, but many will have just one. That‚Äôs okay. We‚Äôll work with what you have!\n\nWhat have you done that most other people haven‚Äôt? What have you done that, if you were to tell it to a stranger, would cause them to pause and think you're special or interesting?\n\nBelow are some examples:\n\nSocial proof is more about your pedigree. If you attended a top school or worked at a company known for having a high engineering bar, you should absolutely mention it!People won't click on links or open your resume untilafterthey're interested, so you need to get them interested right away. That is: you should spoon feed them the most impressive-sounding things about you out of the gate. This may feel strange and uncomfortable, like you‚Äôre bragging. We assure you, however, that it‚Äôs necessary to get your target‚Äôs attention. They‚Äôre not thinking you‚Äôre bragging. They‚Äôre thinking, ‚ÄúIs this worth my time?‚Äù Your job is to convince them that it is.\n\nAlso, don‚Äôt forget to link to your LinkedIn or personal website. Attaching a resume may feel too heavy-handed for a first conversation, as we discussed above.\n\nHere's an example of a prospective intern, leveraging both social proof and accomplishments, to write a compelling email. His email isn't super personalized, but he did make some effort to say that what we do at interviewing.io is important.\n\nA call to action is an invitation for the recipient to do something. You can go one of two ways with your call to action: ask for a job interview or start a conversation.Which you do should be a function of how much firepower you have in the way of social proof and accomplishments. It‚Äôs not fair, but if you can get your target‚Äôs attention with one or both of those, being bold and asking for a job interview makes sense. This approach can be effective, but it won‚Äôt work for most people‚Ä¶ because most people don‚Äôt have enough social proof or accomplishments to justify this type of request.\n\nIf you can‚Äôt leverage social proof or accomplishments, you‚Äôre going to have to work harder and bank entirely on building common ground, which will likely take some time and effort and involve a live conversation before they‚Äôre convinced to expend their social capital on you.\n\nIf you‚Äôre asking for an interview, just come right out and say it. You can use the intern candidate‚Äôs email from earlier as a guide. However, this isn‚Äôt our preferred way to do it, and we really recommend starting a conversation instead.\n\nTake a look at the email below.\n\nIn this email, the candidate doesn‚Äôt ask me about jobs ‚Äî he just asks to meet to discuss a topic. Indeed, he‚Äôs done his research. I write atonabout judging resumes, and it‚Äôs a topic I could go on about for hours if you‚Äôll let me. His email read like he‚Äôs genuinely interested in the subject and that we‚Äôd have a good conversation, so of course I responded. You‚Äôd be surprised how rare emails like this are. If you can find the topic your target cares about and write something that shows earnest, genuine interest, they‚Äôll respond.\n\nWith these emails, you‚Äôre asking for a conversation, not a job interview‚Ä¶ because the conversation is what will hopefully prove to the hiring manager that you‚Äôre worth interviewing.Then, once you have a conversation, the hiring manager will walk away with the impression that you‚Äôre a competent, thoughtful human being who‚Äôs interested in this sort of work. From there, getting a job interview will feel like an afterthought.\n\nAs such, don‚Äôt talk about jobs at all in this type of email, and in this particular case, don‚Äôt attach your resume ‚Äî that will feel out of place and transactional. You can and should link to your LinkedIn so they know who you are and have some context. But spend the bulk of the email building common ground and coming up with an interesting reason for the two of you to talk.\n\nThis approach is much more effective than asking for an interview out of the gate!You‚Äôre not going to land a job from one email, so, as with any seemingly insurmountable goal, it‚Äôs important to think of your outreach as a series of steps where you put one foot in front of the other. Like in sales, all you need is to get to a conversation.\n\nIf your call to action is to set up a time to talk (which it probably should be because it‚Äôs specific), we recommend providing them with a time window. \"Would you want to meet up sometime?\" puts the burden on the recipient to pose a time, while \"Can we talk next Monday at 3pm?\" is problematic because, most likely, they aren't free then. Instead, try something like the candidate above did: \"Would you be available sometime within the next two weeks for a thirty-minute call? I'm free most weekdays between X and Y and can pretty much do any time on weekends if those are better for you.\"\n\nBelow are two templates you can use for cold outreach. The first one is ideal but requires more effort and can't always be used. The second one is weaker but more generic.You can choose what fits your needs best. We expect both of these templates to be far more effective than throwing your resume into the blackhole of online portals.\n\nThis template includes common ground, accomplishments/social proof, and a call to action. It will get you the highest response rates, possibly anywhere from 25-50%. However, it can be challenging to use because it requires you to 1) do a deep dive into their online presence and 2) tie what you find back to something you‚Äôre doing. Sometimes, that tie-in might be tenuous or non-existent (in which case, maybe skip it).\n\nHey {Their First Name},\n\nI‚Äôve read your work on {insert some details about their writing}, and I {insert your thoughts on the work}.\n\n{If you can make the connection between their work and yours, talk about something similar you‚Äôve been working on.}\n\n{If you cannot, ask them a specific, thoughtful question about your work. Don‚Äôt worry about making it ‚Äúthe perfect question‚Äù like you might when you attend a talk and want to sound smart. Any earnest question will do. You don‚Äôt have to use this as a chance to show off!}\n\n{Finally, close with a sentence or two about you, if you have some social proof or impressive accomplishments you can share.}\n\nWould you be up for a quick chat this week or next?\n\n{Your name}{Insert 1-2 useful links about you. If you have a personal site, that‚Äôs great. If not, a LinkedIn will do.}\n\nNote that in this template, we leave some places for you to insert some social proof and your accomplishments. Even though this email is primarily about them and their work, and your references to yourself are primarily through that lens, it never hurts to drop in a few pieces of evidence that you‚Äôre someone who‚Äôs accomplished things and/or someone who looks good on paper.\n\nThe reality is that you won‚Äôt always have enough information about your target to find common ground. In this case, you‚Äôll lead with accomplishments/social proof and a strong call to action. We expect this template will get you response rates anywhere from 5-25%, depending on the strength of your achievements and pedigree. That said, we recommend treating this template as a last resort. Using it means you‚Äôve exhausted any possibility of writing something personal.\n\nHey {Their First Name},\n\n{List 2 things about you. They can be impressive accomplishments of yours or social proof, as above.}\n\nI‚Äôm really interested in the work you‚Äôre doing at {Company Name}. {If you know what team they‚Äôre on and are interested in that specific team or are familiar with that team‚Äôs accomplishments, great! If not, just write a few earnest sentences about why the company is interesting to you.}\n\nWould you be up for a quick chat this week or next?\n\n{Your name}{Insert 1-2 useful links about you. If you have a personal site, that‚Äôs great. If not, a LinkedIn will do.}\n\nKeep your note short. The intent here is to make your target believe you‚Äôre an entity worth paying attention to, rather than them doing the easy thing: deleting your email.\n\nRegardless of which template you use, just like you have to manage your psychology when you prepare for technical interviews, you have to manage your psychology when doing outreach like this. You have to:\n\nNow that you‚Äôve girded your proverbial loins, it‚Äôs time to do the work. If you follow our advice, you‚Äôll get 1-2 orders of magnitude more responses than from applying online, and with this approach, you‚Äôll have at least a hiring manager at that company rooting for you!\n\nRocketReach also has a LinkedIn-like faceted search you can use to find engineering managers, but we‚Äôve found that it‚Äôs not nearly as reliable or rich as LinkedIn, which is why we recommend using LinkedIn for search and then RocketReach for email discovery.‚Ü©\n\nRecruiters should not contact candidates on their work email address, but that's because they're trying to make the candidate leave their job. You are trying to join the manager, which is why it's okay to use their work email address.‚Ü©\n\nMany people think that for something to be worth mentioning, it has to have gone viral. That‚Äôs simply not correct ‚Äî in our niche space, a few hundred likes or a few thousand upvotes is already really impressive.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/how-to-get-in-the-door-at-top-companies-cold-out-reach-to-hiring-managers-part-2",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Stop trying to make recruiters think, or, why your resume is bad and how to fix it",
      "content": "# Stop trying to make recruiters think, or, why your resume is bad and how to fix it\n\n## Stop putting filler buzzwords in your \"About\" section. Use it to spell out the most impressive things about you.\n\n## Don‚Äôt include your GPA if it‚Äôs under 3.8\n\n## Context matters for lesser-known companies\n\n## Avoid the \"job-hopper\" misperception\n\n## Be crystal clear about your work authorization status\n\n## Career changers: provide context about the change\n\n## In conclusion\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Subarray Sum Equals K\n\n### Number of Islands\n\n### Alien Dictionary\n\n#### Related posts\n\n#### Stuff we write about\n\nYears ago, Steve Krug wrote a book about web design calledDon‚Äôt Make Me Think. It‚Äôs a classic, and the main point is that good design should make everything painfully obvious to users without demanding anything of them.\n\nResumes are just the same. Your resume shouldn‚Äôt make recruiters think. It should serve up the most important things about you on a platter that they can digest in 30 seconds or less.\n\nBefore I share some resume tips, there‚Äôs something important I want to reiterate:Don‚Äôt spend a lot of time on your resume. You can read mypiece about how resume writing is snake oil, but the TL;DR is that recruiters spend a median of 30 seconds looking at resumes, and most of that is spent looking for top-tier companies. If you don‚Äôt have top-tier companies (and in some cases niche skills), wordsmithing your bullets or rearranging your sections or changing your layout won‚Äôt help. If you do have top-tier companies, sometimes doing some wordsmithing and rearrangement will help‚Ä¶if your top company experience or niche skills are buried.\n\nIf you don‚Äôt have top-tier brands, the best bang for your buck is to switch from online applications to hiring manager outreach.Here‚Äôs how to do it.\n\nWith that said, I know that no matter what I say, people will still grind on their resumes instead of doing outreach. Grinding on resumes is safe. Outreach is scary and opens you up to personal (rather than impersonal) rejection. So, look, if you‚Äôre going to dosomethingto your resume, let‚Äôs make sure that that something is low-effort and high-return. Unlike the endless resume tweaking that most candidates do, these changes directly address how recruiters actually read resumes.\n\nYour \"About\" or \"Summary\" section is prime real estate. Yet so many candidates fill this section with meaningless jargon like \"passionate self-starter\" or \"detail-oriented team player.\"\nInstead, use this section to explicitly tell recruiters the 2-3 most impressive things about you in plain English. This is your chance to control the narrative.Want recruiters to take something away from reading your resume?Don‚Äôt assume they‚Äôll figure it out. They‚Äôre not reading it long enough to intuit anything. Spell it out for them verbatim in this section.\nDo this, not that:\n\n‚ùå Results-driven full-stack engineer with a passion for scalable systems and user-centric design‚úÖ Senior engineer with 3 years at Amazon, promoted twice in 3 years (2X the company average)1\n\nThis is simple but effective: only include your GPA if it's 3.8 or higher2. A middling GPA doesn't help your case and might inadvertently signal academic mediocrity.\n\nIf your GPA isn't stellar, focus on other academic achievements: hackathons, technical competitions, fellowships or scholarships. These provide better signals about your capabilities than a so-so GPA.\n\nIf you've worked at Google or Facebook, recruiters instantly get what kind of company you're coming from. But when you have \"TechStartup123\" on your resume, they have no idea what they're looking at or how impressive it might be.\n\nFor lesser-known companies, include a one-line description explaining what the company does, along with any impressive metrics or investors:\n\n‚ùå \"Software Engineer, DevTools Inc.\"‚úÖ \"Software Engineer, DevTools Inc. ($50M Series B from Sequoia, 2M+ active users)\"\n\nThis simple addition provides crucial context that helps recruiters evaluate your experience properly. Without it, they might discount valuable experience simply because they don't recognize the company name.\n\nHere's a common mistake: listing each role at the same company as if they were separate jobs. This can make recruiters think you've job-hopped, which is often seen as a red flag.\n\nInstead, group different roles under the same company heading:\n\n‚ùå Listing separate entries for \"Junior Developer at XYZ\" and \"Senior Developer at XYZ\"‚úÖ \"XYZ Company - Senior Developer (2021-Present) - Junior Developer (2019-2021)Promoted in 2 years vs. company average of 3.5 years\"\n\nThe second format clearly shows growth within a single company and explicitly highlights faster-than-average promotion, which is a strong positive signal. (You may also want to carry over your promotion cadence into your ‚ÄúAbout‚Äù section, as you saw above.)\n\nThis one is particularly crucial if you have a foreign-sounding name and/or education outside the US. I've seen many qualified candidates get passed over because recruiters assumed they needed visa sponsorship when they actually didn't. Don't leave this to chance.\n\nMake your work status explicit in your header or summary section:\n\n‚ùå No mention of work authorization (leaving recruiters to guess)‚úÖ \"US Citizen\" or \"Green Card Holder\" or \"Authorized to work in the US without visa sponsorship\"\n\nIf you've switched careers, your resume can look confusing without proper context. Recruiters might struggle to understand why someone with your background is applying for this role, or they might not recognize how your previous experience translates to your current trajectory.\n\nAddress this head-on in your ‚ÄúAbout‚Äù section.\n\n‚ùå Listing previous career experience with no explanation of your transition‚úÖ \"Transitioned from marketing to software engineering in 2021 after completing a bootcamp\" or \"Former accountant who pivoted to data science through self-study and online courses while continuing full-time work\"\n\nThis context helps recruiters understand your timeline and puts your current title and achievements in perspective. Without it, you risk serious misinterpretation:\n\nBoth misinterpretations can be fatal to your application. By providing a clear timeline of your transition, you help recruiters accurately gauge your experience level and set appropriate expectations. This transparency also demonstrates valuable traits like adaptability and determination.\n\nAnd here's another key point for career changers: you don't need to list all your previous positions before the transition... unless they're impressive. Be selective about what pre-transition experience you include:\n\n‚ùå DON'T include mundane or irrelevant details from your previous career that add nothing to your current narrative. Your three years as a retail associate before becoming a developer probably won't strengthen your software engineering application.‚úÖ DO highlight prestigious achievements from your previous career. If you were, say, a concert pianist, a lawyer who graduated from a top-tier law school, or a management consultant at McKinsey, absolutely include that. These signal that you're smart and high-achieving, regardless of domain.\n\nIf you do all these things, you may or may not see a return. After all, even the impact of these tweaks pales in comparison to having top brands on your resume. But, given that these will take you a few minutes to do, it doesn‚Äôt hurt. Here‚Äôs the TL;DR:\n\nI have no idea what the average promotion cadence is at Amazon, and this example is meant to be illustrative rather than accurate, though maybe my readers will tell me the cadence now.‚Ü©\n\nI realize this diverges from the advice inBeyond Cracking the Coding Interview, where Gayle recommends including it if it‚Äôs 3.0 or more. This is one of the cases where the authors had differing opinions. We‚Äôre (mostly) human.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/stop-trying-to-make-recruiters-think-or-why-your-resume-is-bad-and-how-to-fix-it",
      "author": "",
      "user_id": ""
    },
    {
      "title": "We co-wrote the official sequel to Cracking the Coding Interview!",
      "content": "# We co-wrote the official sequel to Cracking the Coding Interview!\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Intersection of Linked List\n\n### Image Filter Service\n\n### Reverse String\n\n#### Related posts\n\n#### Stuff we write about\n\nEDIT 2:Read 9 chapters of the book for free!These include:\n\nEDIT:Beyond Cracking the Coding Interviewis out now! Here's the table of contents:\n\nI have some exciting news. Along with Gayle Laakmann McDowell, Mike Mroczka, and Nil Mamano, I‚Äôm writing the official sequel toCracking the Coding Interview(often called the bible of technical interview prep). It's fittingly calledBeyond Cracking the Coding Interview.\n\nI‚Äôve always wanted to write a book about technical interviewing. And this is it. And of course it'll draw on all the hiring data we've collected over the past decade at interviewing.io.\n\nTechnical interviews are much harder today than they used to be. Engineers study for months and routinely get down-leveled despite that.Beyond Cracking the Coding Interview, in addition to covering a bunch of new questions and topics, teaches you how to think instead of memorizing. Grinding and memorization isn‚Äôt the way in this market (though in fairness, it‚Äôs never really the way). With us, you‚Äôll still have to do the work, of course, but we‚Äôll teach you to work smarter.\n\nWe added at least thirteen new technical topics (I say ‚Äúat least‚Äù because we‚Äôre still writing, and it might be more like twenty)‚Äîand over 150 new problems. Each problem includes step-by-step walkthroughs, and you can work each problem with our (actually good) AI Interviewer. And of course this book was written in partnership with interviewing.io. We‚Äôve pulled in data from over 100k FAANG mock interviews on interviewing.io, and we include hundreds of curated interview replays from interviewing.io (shared with permission of course) ‚Äì watch people make mistakes and learn so you‚Äôre not doomed to repeat them.\n\nBut it‚Äôs notjustabout interview prep. In today‚Äôs job market, the bar is higher but it‚Äôs also harder than ever to get noticed and run your job search end-to-end. My excellent co-authors killed it on the technical chapters. I focused on writing the job search stuff, including, but not limited to:\n\nI also spend some time on owning and sharing data on how flawed technical interviewing is and, most importantly,  how to manage your psychology so you can get past that. I see so many engineers opting out of this interview style, arguably for good reason. But you‚Äôre leaving a lot of good opportunities on the table, and it doesn‚Äôt have to be like that.\n\nThis book is so much of what I‚Äôve blogged about for the last 15 years, but it‚Äôs fleshed out with much more detail and actionable advice. If you read it, let me know what you think. Technical interviewing sucks (and so does looking for a job). But this book will help you do it well and get out alive.\n\nPurchases ofBeyond Cracking the Coding Interviewget a $50 discount for interviewing.io. The book costs $45, so it‚Äôs not a bad deal. The book is  out in January of 2025, and you canget it on Amazon.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/we-co-wrote-the-official-sequel-to-cracking-the-coding-interview-introducing-beyond-ctci",
      "author": "",
      "user_id": ""
    },
    {
      "title": "How to get in the door at top companies: a data-driven, practical guide for software engineers. Part 1.",
      "content": "# How to get in the door at top companies: a data-driven, practical guide for software engineers. Part 1.\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### In-house recruiters contact you\n\n### Apply online\n\n### Warm referrals\n\n### Cold referrals\n\n### Agency recruiters\n\n### Cold outreach (to hiring managers vs. recruiters)\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Intersection of Linked List\n\n### Insert Delete getRandom O(1)\n\n### Longest Palindromic Substring\n\n#### Before\n\n#### Cold outreach to recruiters doesn‚Äôt work\n\n#### Cold outreach to hiring managers is effective\n\n#### Related posts\n\n#### Stuff we write about\n\nIn this post (part 1 of 2), we‚Äôll share some data about which channels are most effective for getting into the door at great companies and why. Inpart 2, we get very tactical and tell you exactly what to say and do to get responses.\n\ninterviewing.io is an anonymous mock interview platform ‚Äî we help engineers prepare for technical interviews by pairing them with senior FAANG and FAANG-adjacent engineers for mock interviews and feedback. In this market, many of our users are struggling with getting in the door at companies, so we ran a survey to see what‚Äôs worked well for our users and what hasn‚Äôt, in today‚Äôs difficult climate.\n\nIn our survey, we gave people the following channels for getting into companies and asked them which were the most and least effective:\n\nWe also asked them which types of companies they got responses from:\n\nWe got ~500 responses. Among survey respondents, which channels were most effective was largely consistent, regardless of company type, but there were some twists depending on who the candidates were. More on that in a bit.\n\nBelow are the channels, ranked by effectiveness.1When more people found a channel effective than ineffective, it ended up in the first list. When more people found a channel to be ineffective than effective, it ended up on the second list.\n\nRecruiting channels that our users found to be effective (ranked from most to least effective):\n\nRecruiting channels that our users found to be ineffective (ranked from least to most ineffective):\n\nThis data came primarily from surveying experienced engineers (4+ years), rather than juniors (we don‚Äôt have that many juniors on our platform; average years of experience is 8). If you‚Äôre a junior engineer in this market, you already know you‚Äôre in for a tough time, and we‚Äôd advise you to take your destiny into your own hands as much as possible by reaching out directly to hiring managers (the same advice we give many of our more experienced users). More on that later in the post.\n\nInterestingly, these results were quite consistent between company types. In other words, channels that worked well for FAANGs tended to work well for startups and vice versa.\n\nOverall, the most useful channels were in-house recruiters (when they reached out to you) and warm referrals. Unfortunately, both of these channels are somewhat out of your control. You have very little control over whether internal recruiters reach out to you. There aresomethings you can do to increase the chances, but they‚Äôre all tied up in your work history and identity, neither of which you can easily change. We‚Äôll talk more about that later on.\n\nWarm referrals (i.e., referrals from people you know), on the other hand, are very useful and are abitmore in your control, but they still depend on the quality of your network.\n\nBelow is a diagram comparing the utility of all the channels to how much control you have over them.\n\nYou might wonder why we speculatively singled out cold outreach to hiring managers as something that can be done right, versus the other channels. In our experience, that channel is both misused and underutilized and is the best bet for many candidates, provided they do it correctly. In our next post, we‚Äôll tell you exactly what to do and what to say when you reach out to hiring managers ‚Äî especially if you come from a non-traditional background and aren‚Äôt getting a lot of recruiter outreach/don‚Äôt have the network to get warm referrals, reaching out to hiring managers is your absolute best bet.\nNow let‚Äôs look at each channel in detail.\n\nThis channel is one of the two where you have the least amount of control (the other is agency recruiters contacting you, though that one is way less useful).\n\nSo, how much control do you have over this channel? One bit of analysis we did on our survey data was to try to find patterns in the background of people who find in-house recruiters particularly useful. Not too surprisingly, some patterns did emerge.\n\nIn-house recruiters are most likely to contact you if:\n\nThese results aren‚Äôt unique to just this survey. Werecently did a studywhere we asked a bunch of recruiters to look at resumes and tell us which candidates they‚Äôd want to interview. While the intent of the study was to see if recruiters are good at identifying talent (spoiler: they were barely better than a coin flip), we learned some other interesting things, including what recruiters actually look for when they read a resume.\n\nThe two most sought-after resume traits were: 1) experience at a top-tier tech company (FAANG or FAANG-adjacent) and 2) URM (underrepresented minority) status (in tech, this means being Black or Hispanic).\n\nThis mirrored what we saw in our user survey when we looked at commonalities among candidates who got value from in-house recruiters.\n\nSo how do you use this information to your advantage? You obviously can‚Äôt magic FAANG/FAANG-adjacent experience or URM status out of thin air2, but if you do have either, our pragmatic advice is to highlight it and make it really easy for recruiters to spot. Of course, whether youwantto lead with URM status is a personal decision. We‚Äôve heard differing opinions on this and are not here to judge. All we can do is share the data ‚Äî do with it what you will.\n\nSo, how do you make sure that, say, your FAANG experience stands out to recruiters? Take a look at the before and after screenshots of the resume below3. This resume belongs to one of our users who was kind enough to let us share it. He actually has two of the three things that recruiters look for: FAANG experience and a niche title (ML engineer). But both are buried! And the section that gets the most attention is wasted on undergraduate awards.\n\nAs you can see, he spent almost 3 years at Apple, but a recruiter skimming his resume might not notice that because it was a while ago. Instead, he showcases an undergrad award and some technologies/languages that he knows. Neither of those is nearly as useful to recruiters as FAANG experience.\n\nHis current title is also ML engineer, and one at the Principal level at that. But it wasn‚Äôt always: He went from back-end to SRE to a little bit of everything to ML, and because of that, it‚Äôs possible a recruiter would miss it as well.\n\nWe edited this candidate‚Äôs resume to put all the things recruiters look for at the very top of the resume and moved the buzzword soup to the bottom. This candidate is obviously well-positioned because he has FAANG experience, several top schools, and niche skills ‚Äî but before, many recruiters didn‚Äôt spot them. After he made these changes, the number of interviews he got increased by 8X.\n\nIf you‚Äôve ever applied to jobs online, then you know it‚Äôs kind of like screaming into a black hole. Though, according to our survey, some candidates (specifically people applying to FAANG/FAANG-adjacent companies and small startups) get some value out of this channel, it‚Äôs still a numbers game. And for large startups, it‚Äôs a losing proposition.\n\nAccording to recruiting tool Gem, applicants that come from recruiter outreach (called ‚Äúoutbound‚Äù in recruiter lingo) are6 - 10X more likely to get hiredthan applicants who apply online (called ‚Äúinbound‚Äù).\n\nAs Lyft recruiting manager Nate Wylie put it:\n\nOur data‚Ä¶ showed higher pass-through rates for candidates [we reached out to] at each stage of the interview process vs. applicants via the careers page. It‚Äôs not that we want to ignore applicants; it‚Äôs just that historically we don‚Äôt get what we‚Äôre looking for ‚Äî and with speed ‚Äî through that channel.\n\nHaving been a recruiter myself, I can confirm that many companies do indeed ignore their online careers page. Many years ago, when I first joined the recruiting team at a top-tier startup, I spent my first few days going through the resumes of people who had applied online. I found a treasure trove of candidates, including very experienced applicants from top-tier companies.4But no one had seen these applicants because no one had been monitoring inbound activity for months!\n\nThe silver lining here is that when you don‚Äôt hear back from a company (or even when you get an automatic rejection email wishing you \"the best in your future endeavors\"), it‚Äôs not because a human looked at your resume and made a deliberate, thoughtful decision about you. It‚Äôs tempting to think that way because it plays so well into our insecurities. The reality is that a human probably never saw your resume in the first place.\n\nSo why do people apply online, despite knowing in their gut that it‚Äôs not an effective strategy? Simply put, it‚Äôs predictable and easy. You get into a routine, you upload your resume, you connect your LinkedIn, and you can knock out hundreds of applications in a matter of hours.\n\nThe other encouraging thing about this channel is that, when we analyzed specifically which types of candidates had success with it, we couldn‚Äôt find any patterns ‚Äî the channel worked equally well (poorly?) for people who looked good on paper vs. not, and there was no preferential treatment for traditionally underrepresented groups in tech (e.g., women and people of color).\n\nTL;DR Applying online doesn‚Äôt hurt‚Ä¶ provided that you don‚Äôt take rejection personally. If you do, it‚Äôll wear you down over time.\n\nWarm referrals are, of course, excellent. That is, assuming it's arealreferral ‚Äî someone who can actually vouch for you, and ideally your work.\n\nPer capita, referrals are most companies‚Äô best source of candidates, and they were a great channel for our users across all company types (they were the best channel for FAANGs/FAANG-adjacents, as well as large startups, and second best for small startups, behind in-house recruiters reaching out).\n\nIf you have the network, you should absolutely use it. Of course, it‚Äôs unlikely that you‚Äôll have meaningful connections at every company you want to work at. What do you do then?\n\nShould you ask people you don't know to refer you? Our survey data says probably not. Cold referrals were net negative for both FAANG and small startups and neutral for large startups.\n\nYears ago, trying to collect cold referrals was a decent strategy. You could track down someone at the company and ask them to toss your proverbial hat into the ring\n\nEngineers were often happy to refer someone ‚Äî even someone they didn't know ‚Äî either to be kind, to avoid the awkwardness of declining, or to collect the potential referral bonus. They couldn't vouch for you, but the referral would ensure that a human looked at your resume.\n\nThis became so common that Blind actually spun out an entire referral marketplace calledRooftop Slushie(the link is to some press because the actual site is now defunct), where applicants would pay a small sum for a referral.\n\nThen, companies wised up and realized that these referrals weren't all that different from normal in-bound applicants. So why treat them differently?\nMany companies nowadays separate referrals into \"true referrals\" and \"leads.\" It‚Äôs great for maintaining the delicate dance of social dynamics, but it‚Äôs completely useless for getting hired ‚Äî dropping someone‚Äôs resume into the ‚Äúleads‚Äù pile is basically the same as throwing it into the inbound black hole.\n\nGiven that cold referrals aren‚Äôt zero effort, our advice is to expend that energy elsewhere. More on that shortly.\n\nAgency recruiters were the worst channel overall, according to our survey, and were net negative for all company types.\n\nFAANGs and FAANG-adjacent companies tend to rely less on agencies than startups, and when they do, it‚Äôs to fill some very specific need (rather than ‚ÄúHey we need more SWEs‚Äù), so it‚Äôs not surprising that our users didn‚Äôt get much value from this channel when applying to FAANGs.\n\nWhile both large and small startups use agencies liberally, clearly the value to candidates is limited.5Out of all of our survey respondents, only a handful of our users said that agencies were useful to them, and of those who mentioned agencies, the majority said that they were the worst channel.\n\nWe won‚Äôt belabor the point, but it‚Äôs probably not in your best interest to spend much time on working with agency recruiters. It has opportunity cost and not much upside. And you canroutinely get screwed in salary negotiations when you work with an agency recruiter, if you even get that far.\n\nNot all cold outreach is created equal, for two reasons. First, there‚Äôs your audience: hiring managers vs. recruiters. And then there‚Äôs the quality of the outreach itself. We‚Äôll come back to how to write the kinds of messages that will get you responses. First, let‚Äôs talk about the audience.\n\nYou can see in our survey results that cold outreach to hiring managers was net positive for FAANG/FAANG-adjacent companies and neutral for the other company types. Cold outreach to recruiters, on the other hand, was net negative for both FAANG/FAANG-adjacents and small startups and neutral for large startups.\n\nIgnoring the quality of the outreach for a moment, which we expect is probably comparable for both types, why does this difference exist?\n\nIf you had to answer the question of who‚Äôs the right person to reach out to about jobs, your gut instinct might be to say it‚Äôs recruiters. After all, hiring is officially their job! However, that‚Äôs not strictly true. Recruiters are not incentivized to make hires, at least not directly. Just like everyone else, recruiters‚Äô main priority is to keep their jobs.\n\nHow does a recruiter keep their job?6Bybringing in the types of candidates that their manager tasked them with. How is that different from hiring? Hiring implies that you‚Äôre evaluated on whether the people you bring in actually get hired, but most in-house recruiters aren‚Äôt evaluated this way‚Ä¶ because it takes too long.\n\nInstead, recruiters are sometimes evaluated on what portion of their candidates get offers or get to onsite. However, because of drop-off and latency (getting an offer can still take months), your organization has to be pretty good at tracking. Many are not.\n\nAs such, many recruiting orgs prefer simpler, faster metrics:\n\nThe downside of measuring success in a single part of the funnel is that you don‚Äôt incentivize people to care about what happens downstream (that is, how many are hired). This would be like if marketers only paid attention to ad clicks, rather than actual purchases. But that‚Äôs how recruiting operates: individuals aren‚Äôt really incentivized to care what happens downstream.\n\nSo, if you are typically just measuring the response rates of your reports, as a recruiting manager, you have to set some guardrails for the types of candidates that you want your team to reach out to. If you don‚Äôt, they‚Äôll end up just reaching out to people who are likely to respond instead of people who are a good fit for the job.\n\nUnfortunately, you don‚Äôt know who is a good fit for the job. You can‚Äôt just say, ‚ÄúGo on LinkedIn, and find me good engineers.‚Äù\n\nThat doesn‚Äôt exist. So instead, you come up with some rules that look like this:\n\nThere may be a few other items on the list if the role requires specific skills (e.g., Android development), but by and large, that‚Äôs what recruiters are tasked with, and that‚Äôs what they‚Äôre focused on.\n\nIt seems counterintuitive, but if you‚Äôre either fairly junior (fewer than 4 years of experience) or you don‚Äôt have fancy brands and schools on your resume, recruiters are not incentivized to help you because you don‚Äôt meet their criteria, and they‚Äôre not incentivized to take risks on candidates because they‚Äôre not getting rewarded when the company makes hires (or punished when the company doesn‚Äôt).\n\nWhat does this mean for you? If you‚Äôre not the type of candidate that recruiters are reaching out to already (senior, well-pedigreed), they will not help you.\n\nWith that sad reality in mind, here‚Äôs the good news: thereissomeone who‚Äôs actually incentivized to make hires and is much more open-minded: the hiring manager7!\n\nAt this point, you might be skeptical. After all, according to the graph comparing all channels, hiring manager outreach is the worst of the best. Sure, it‚Äôs net positive for FAANG/FAANG-adjacent companies, but it lags behind in-house recruiters, warm referrals, and online applications with respect to effectiveness.\n\nHere‚Äôs the thing. Hiring manager outreach is the channel with the most untapped potential for effectiveness, while also being the one where you have the most control. Because companies often ignore them, online applications can‚Äôt come close to the same level of control, and warm referrals have a low ceiling. In-house recruiter outreach is largely out of your control (except for maybe making some limited profile tweaks, as we saw above).\n\nWhy is this the right channel?\n\nUnlike recruiters, hiring managers are actually incentivized to make hires and tend to be more open-minded about candidate backgrounds, all because hiring managers are judged on results. Specifically, they‚Äôre judged on how quickly and effectively they‚Äôre able to build stuff, and are ‚Äî directly or indirectly ‚Äî incentivized to grow headcount. For hiring managers, it‚Äôs not about the appearance of doing the work. It‚Äôs about the cold, hard reality of whether the work got done. And because they‚Äôre judged on actually getting stuff done, hiring managers are also much more incentivized than recruiters to take risks.\n\nOutside of needing more people to build things, hiring managers are also incentivized to hire for their teams because the better they are at recruiting and filling headcount, the more likely they are to get promoted.\n\nAs such, in our minds, when people say that hiring manager outreach hasn‚Äôt worked for them, it‚Äôs because they‚Äôre not doing it right. So, how do you do it?\n\nIn our next post, we‚Äôll get very practical about outreach, provide a bunch of examples of good and bad outreach, and share two templates that you can steal.\n\nFirst, here‚Äôs how we got to these rankings. We asked each engineer who took our survey to rank all the channels they used to get in the door, from best to worst. Then we tallied up the points (+1 for best two channels, -1 for worst two). We didn‚Äôt do a more granular point system (e.g., +2 and -2) because the difference between the top two channels wasn‚Äôt always 2X, and generally, from talking to our users, preferences were somewhat muddy. As such, these results are directionally correct, but we didn‚Äôt feel comfortable numerically comparing them to one another. Finally, we divided the total tally by the number of times that channel came up. As a result, we were able to rank channels from most effective to least effective.‚Ü©\n\nThis is why I generally view resume writers as selling snake oil. Either you have the things recruiters are looking for or you don‚Äôt. If you don‚Äôt, no amount of wordsmithing your bullet points or reorganizing the page is going to make a significant difference. Sure,check your resume for typos, and make sure that it reads decently well. Any more time invested in your resume after those basic things will have diminishing returns. Beware of anyone who tells you otherwise, and beware of any products or services who charge for resume review.‚Ü©\n\nWe realize that recruiters won‚Äôt always have access to your resume when doing outreach and are likely looking at your LinkedIn instead. The same advice stands. Make sure that your About section has all the most important tidbits about you, front and center. Also, even though we didn‚Äôt see the same strong preference for FAANGs and URM status when applying online (more on that in the next section), making these types of changes to your resume certainly won‚Äôt hurt.‚Ü©\n\nOf course we don‚Äôt share the point of view that you can only be a good candidate if you have a brand-name company on your resume. However, many recruiters do, and they are still ignoring this channel.‚Ü©\n\nWe‚Äôd argue that the value to companies is limited as well. Though there are a handful of excellent agency recruiters out there, most are terrible. The hard thing is that, as an employer, you can‚Äôt immediately tell who‚Äôs terrible, and you end up wasting a bunch of time reviewing profiles of candidates who might look promising on the surface, but because of selection bias (these are the people who decided to work with bad agency recruiters, after all) are not a fit. That or they‚Äôre not interested in your company (and have possibly never even opted in to talk to you) or both.‚Ü©\n\nAt larger companies, recruiting is usually split into two functions: sourcing (these are the people who reach out to candidates) and recruiting (these are the people who manage candidates‚Äô journey through the process and extend offers). In this post, for simplicity, we‚Äôre lumping them together because separating them out would change some of the details but wouldn‚Äôt change the key takeaways.‚Ü©\n\nNote that if you‚Äôre interested in smaller startups (Series A and below), you can substitute ‚Äúfounder‚Äù for ‚Äúhiring manager‚Äù in the steps below. Founders are the most incentivized to get shit done and take risks, regardless of company size and stage, but at larger startups, they may be less likely to read cold emails because they get bombarded with all manners of requests and sales pitches. At a Series B or C company or at public companies with fewer than, say, 3000 employees, in addition to hiring managers, you should also target Directors and VPs ‚Äî they have the power to get things done and aren‚Äôt so far removed from feeling the pain of not filling roles that making an extra hire or two is out of their purview. At large public companies, targeting Directors and above doesn‚Äôt make much sense ‚Äî they ARE too far removed from doing the work to make individual hires. If you do contact them, the best outcome is that they‚Äôll pass you on to one of their direct reports.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/how-to-get-in-the-door-at-top-companies-part-1",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Exactly what to say when recruiters ask you to name the first number‚Ä¶ and other negotiation word-for-words",
      "content": "# Exactly what to say when recruiters ask you to name the first number‚Ä¶ and other negotiation word-for-words\n\n## Why negotiate my salary at all, especially if I‚Äôm junior?\n\n## Will my offer be rescinded if I try to negotiate my salary?\n\n## What to say when asked to name the first number\n\n## What to say when you‚Äôre handed an exploding offer\n\n## The reverse used car salesman‚Ä¶ or what to say to always get more\n\n## Other negotiation resources\n\n## Footnotes\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Top K Frequent Elements\n\n### Image Filter Service\n\n### Design a Free Food App\n\n#### Related posts\n\n#### Stuff we write about\n\nThere are a lot of resources out there that talk about salary negotiation but many tend to skew a bit theoretical. In my experience, one of the hardest things about negotiating your salary is knowing what to say in tough, ambiguous situations with a power balance that‚Äôs not in your favor. What‚Äôs OK? What‚Äôs rude? What are the social norms? And so on.\n\nBefore I startedinterviewing.io, I‚Äôve worked as a software engineer, an in-house recruiter, and an agency recruiter, so I‚Äôve literally been on all sides of the negotiating table. For the last few years, I‚Äôve been guest-lecturing MIT‚Äôs 6.UAT, a class about technical communication for computer science majors. Every semester, negotiation is one of the most-requested topics from students. In this post, I‚Äôm sharing the content of that lecture, which is targeted toward students, but has served seasoned industry folks just as well. You‚Äôre never too young or too old to advocate for yourself.\n\nBtw, if you don‚Äôt like reading and prefer long, rambly diatribes in front of an unsightly glass wall, I covered most of this material (and other stuff) in a webinar I did with the fine people at Udacity (where I used to run hiring) a few months ago. So, pick your poison.\n\nIf you‚Äôre early in your career, you might say that negotiation isn‚Äôt worth the hassle ‚Äî after all, junior roles have pretty narrow salary bands. There are a few reasons this view is short-sighted and wrong. First, though it‚Äôs pretty unlikely in the grand scheme of things, if you‚Äôre applying to a startup, there might come a magical day when your equity is worth something. This is especially true if you‚Äôre an early employee ‚Äî with a good exit, a delta of a few tenths of a percent might end up being worth a down payment on a home in San Francisco.\n\nBut, let‚Äôs get real, your equity is likely worthless (except interviewing.io‚Äôs equity‚Ä¶ that‚Äôs totes gonna be worth something), so let me give you a better, more immediate reason to learn to haggle early in your career, precisely because that‚Äôs when the stakes are low. Humans are frighteningly adaptable creatures. Scared of public speaking? Give 3 talks. The first one will be gut-wrenchingly horrific, the stuff of nightmares. Your voice will crack, you‚Äôll mumble, and the whole time, you‚Äôll want to vomit. The next one will be nerve-wracking. The last one will mostly be OK. And after that, you‚Äôll be just fine. Same thing applies to approach anxiety, mathematical proofs, sex, and, you guessed it, salary negotiation!\n\nSo, make all the awkward, teeth-cringing mistakes now, while it doesn‚Äôt matter, and where failure will cost you $5K or $10K a year. Because the further along you get in your career, the bigger the upside will be‚Ä¶ and the bigger the downside will be for not negotiating. Not only will the salary bands be wider for senior roles, but as you get more senior, more of your comp comes from equity, and equity has an even wider range for negotiating. Negotiating your stock well can make 6-figure differences and beyond (especially if you apply some of these same skills to negotiating with investors over term sheets, should you ever start your own company)‚Ä¶ so learn these skills (and fail) while you‚Äôre young, because the older you get, the harder it‚Äôs going to be to start and the more high-stakes it‚Äôs going to be.\n\nSo, below, as promised, I‚Äôll give you a few archetypal, stress-inducing situations and what to say, word-for-word in each one. But first, let me address the elephant in the room‚Ä¶\n\nAs I mentioned earlier, this blog post is coming out of a lecture I give at MIT. Every semester, I start the negotiation portion of the lecture with the unshakeable refrain that no one will ever rescind your offer for negotiating. Last semester was different, though. I was just starting to feel my oats and get into my talk (the negotiation piece comes about halfway through) and smugly recited the bit about offers never being rescinded, followed by my usual caveat‚Ä¶ ‚Äúunless you act like a douche while negotiating.‚Äù Then, a hand shot up in the back of the room. Ah ha, I thought to myself, one of the non-believers. Ready to placate him, I called on the gentleman in the back.\n\n‚ÄúMy offer got rescinded for negotiation.‚Äù\n\nThe class broke out into uproarious laughter. I laughed too. It was kind of funny‚Ä¶ but it was also unnerving, and I wanted to get to the bottom of it.\n\n‚ÄúWere you a giant jerk when you negotiated?‚Äù\n\n‚ÄúNope.‚Äù Shit, OK, what else can I come up with‚Ä¶\n\n‚ÄúWere you applying at a really small company with maybe one open role?‚Äù I asked, praying against hope that he‚Äôd say yes.\n\nSo, there‚Äôs the one exception I‚Äôve found so far to my blanket statement. After working with hundreds and hundreds of candidates back when I was still a recruiter, I had never heard or seen an offer get rescinded (and none of my candidates acted like douches while negotiating, thank god), until then. So, if you‚Äôre talking to a super small company with one role that closes as soon as they find someone, yes, then they might rescind the offer.\n\nBut, to be honest, and I‚Äôm not just saying this because I was wrong in front of hundreds of bloodthirsty undergrads, an early startup punishing a prospective employee for being entrepreneurial is a huge red flag to me.\n\nOK, so, now onto the bit where I tell you exactly what to say.1\n\nThere will come a time in every job search where a recruiter will ask you about your compensation expectations. This will likely happen very early in said search, maybe even during the first call you‚Äôll ever have with the company.\n\nI think this is a heinous, illaudable practice fraught with value asymmetry. Companies know their salary ranges and roughly what you‚Äôre worth to them before they ever talk to you (barring phenomenal performance in interviews which kicks you into a different band). And they know what cost of living is in your area. So they already have all the info they need about you, while you have none about them or the role or even your market value. Sure, there are some extenuating circumstances where you are too expensive, e.g. you‚Äôre like an L6 at Google and are talking to an early stage startup that can only afford to pay you 100K a year in base, but honestly even in that situation, if the job is cool enough and if you have the savings, you might take it anyway.\n\nSo, basically, telling them something will only hurt you and never help you. So don‚Äôt do it. Now, here‚Äôs exactly what to say when asked to name the first number.\n\nAt this point, I don‚Äôt feel equipped to throw out a number because I‚Äôd like to find out more about the opportunity first ‚Äì right now, I simply don‚Äôt have the data to be able to say something concrete. If you end up making me an offer, I would be more than happy to iterate on it if needed and figure out something that works. I also promise not to accept other offers until I have a chance to discuss them with you.\n\nExploding offers, in my book, are the last bastion of the incompetent. The idea goes something like this‚Ä¶ if we give a candidate an aggressive deadline, they‚Äôll have less of a chance to talk to other companies. Game theory for the insipid.\n\nHaving been on the other side of the table, I know just how arbitrary offer deadlines often are. Deadlines make sense when there is a limited number of positions and applicants all come in at the same time (e.g. internships). They do not make any sense in this market, where companies are perpetually hiring all the time ‚Äî therefore it‚Äôs an entirely artificial construct. Joel Spolsky, the creator of Trello and Stack Overflow, had something particularly biting to say on the matter of exploding offers many years ago (the full post,Exploding Offer Season, is really good):\n\n‚ÄúHere‚Äôs what you‚Äôre thinking. You‚Äôre thinking, well, that‚Äôs a good company, not my first choice, but still a good offer, and I‚Äôd hate to lose this opportunity. And you don‚Äôt know for sure if your number one choice would even hire you. So you accept the offer at your second-choice company and never go to any other interviews. And now, you lost out. You‚Äôre going to spend several years of your life in some cold dark cubicle with a crazy boss who couldn‚Äôt program a twenty out of an ATM, while some recruiter somewhere gets a $1000 bonus because she was better at negotiating than you were.‚Äù\n\nEven in the case of internships, offer deadlines need not be as aggressive as they often are, and I‚Äôm happy to report that many college career centers have taken stands against exploding offers. Nevertheless, if you‚Äôre not a student or if your school hasn‚Äôt outlawed this vile practice, here‚Äôs exactly what to say if it ever happens to you.\n\nI would very much appreciate having a bit more time. I‚Äôm very excited about Company X. At the same time, choosing where I work is extremely important to me. Of course, I will not drag things out, and I will continue to keep you in the loop, but I hope you can understand my desire to make as informed of a decision as possible. How about I make a decision by‚Ä¶?\n\nAt the end of the day, the best way to get more money is to have other offers. I know, I know, interviewing sucks and is a giant gauntlet-slog, but in many cases, having just one other offer (so, I don‚Äôt know, spending a few extra days of your time spread over a few weeks) can get you at least $10K extra. It‚Äôs a pretty rational, clear-cut argument for biting the slog-bullet and doing a few more interviews.\n\nOne anecdote I‚Äôll share on the subject goes like this. A few years ago, a close friend of mine who‚Äôs notoriously bad at negotiation and hates it with a passion was interviewing at one of the big 4 companies. I was trying to talk him into getting out there just a little bit, for the love of god, and talk to at least one more company. I ended up introducing him to a mid-sized startup where he quickly got an onsite interview. Just mentioning that he had an onsite at this company to his recruiter from the bigco got him an extra $5K in his signing bonus.\n\nOffers are, of course, better than onsites, but in a pinch, even onsites will do‚Ä¶ because every onsite increases your odds of not accepting the offer from the company you‚Äôre negotiating with. So, let‚Äôs say you do have some offers. Do you reveal the details?\n\nThe answer is that it depends. If the cash parts of the offers you have are worth more than the one you have in hand, then you can reveal the details. If they‚Äôre worth more in total but less in cash, it‚Äôs a bit dicier because equity at smaller companies is kind of worthless‚Ä¶ you can still use it as leverage if you tell the story that that equity is worth more to YOU, but that‚Äôs going to take a bit more finesse, so if you‚Äôve never negotiated before, you might want to hold off.\n\nIf the cash part of your equity is not worth more, it‚Äôs sufficient to say you have offers and when pressed, you can simply say that you‚Äôre not sharing the details (it‚Äôs ok not to share the details).\n\nBut whether you reveal details or not, here‚Äôs the basic formula for getting more. See why I call it the reverse used car salesman?\n\nI have the following onsites/offers, and I‚Äôm still interviewing at Company X and Company Y, but I‚Äôm really excited about this opportunity and will drop my other stuff andSIGN TODAYif‚Ä¶\n\nSo, ‚Äúif‚Äù what? I propose listing 3 things you want, which will typically be:\n\nThe reason I list 3 things above isn‚Äôt because I expect you‚Äôll be able to get all 3, but this way, you‚Äôre giving the person you‚Äôre negotiating with some options. In my experience, you‚Äôll likely get 2 out of the 3.\n\nSo, what amounts should you ask for when executing on the reverse used car salesman? It‚Äôs usually easier to get equity and bonuses than salary (signing bonus is a one-off rather than something that repeats every year). Therefore, it‚Äôs not crazy to ask for 1.5X-2X the equity and an extra 10-15% in salary. For the bonus portion, a lot depends on the size of the company, but if you‚Äôre talking to a company that‚Äôs beyond seed stage, you can safely ask for at least 20% of your base salary as a signing bonus.2\n\nWhat if the company says no to all or most of these and are a big enough brand to where you don‚Äôt have much of a leg to stand on? You can still get creative. One of our users told me about a sweet deal he came up with ‚Äî he said he‚Äôd sign today if he got to choose the team he could join and had a specific team in mind.\n\nAs I mentioned at the beginning of this post, there are plenty of blog posts and resources on the internets about negotiation, so I‚Äôll just mention two of my favorites. The first is a riveting,first-hand account of negotiation adventuresfrom one of my favorite writers in this space, Haseeb Qureshi. In his post, Haseeb talks about how he negotiated for a 250K (total package) offer with Airbnb and what he learned along the way. It‚Äôs one of the most honest and thoughtful accounts of the negotiation process I‚Äôve ever read.\n\nThe second post I‚Äôll recommend is aseminal work in salary negotiation by Patrick McKenzie(patio11 on Hacker News, in case that‚Äôs more recognizable). I read it back when I was still an engineer, and it was one of those things that indelibly changed how I looked at the world. I still madly link anyone and everyone who asks me about negotiation to this piece of writing, and it‚Äôs still bookmarked in my browser.\n\nIf you‚Äôre an interviewing.io user and have a job offer or five that you‚Äôre weighing and want to know exactly what to say when negotiating in your own nuanced, unique situation, please email me, and I‚Äôll whisper sweet, fiscal nothings in your ear like a modern-day Cyrano de Bergerac wooing the sweet mistress that is capitalism.3\n\nIf you‚Äôre interviewing at interviewing.io, USE THESE ON ME. IT'LL BE GREAT. And while you‚Äôre at it,use these on meas well.‚Ü©\n\nSome of the larger tech companies offer huge signing bonuses to new grads (~100K-ish). Obviously this advice is not for that situation.‚Ü©\n\nAn increasing number of our customers pay us on subscription, so we don't get more money if you do.4And for the ones who don't, salary and recruiting fees typically come out of a different budget.‚Ü©\n\nIn the early days of interviewing.io, we tried to charge a flat per-hire fee in lieu of a percentage of salary, precisely for this reason -- we wanted to set ourselves up as an entirely impartial platform where lining up with our candidates' best interests was codified into our incentive structure. Companies were pretty weirded out by the flat fee, so we went back to doing percentages, but these days we're moving over as many of our customers to subscription as possible -- it's cheaper for them, better for candidates, and I won't lie that I like to see that recurring revenue.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/negotiate-salary-recruiter",
      "author": "",
      "user_id": ""
    },
    {
      "title": "How hard is it to cheat in technical interviews with ChatGPT? We ran an experiment.",
      "content": "# How hard is it to cheat in technical interviews with ChatGPT? We ran an experiment.\n\n## The experiment\n\n## Results\n\n## No one was caught cheating!\n\n## Companies: Change the questions you are asking immediately!\n\n## Real talk for job seekers\n\n## Footnotes:\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Interviewers\n\n### Interviewees\n\n### ‚ÄúVerbatim‚Äù questions\n\n### ‚ÄúModified‚Äù questions\n\n### ‚ÄúCustom‚Äù questions\n\n### How to actually create good custom questions\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Maximum Subarray\n\n### Fruit into Baskets\n\n### Number of Subarrays with Bounded Maximum\n\n#### Related posts\n\n#### Stuff we write about\n\nEdit: This article originally contained a TikTok video of someone cheating in an interview with ChatGPT. Videos like this still can be found online, but companies hate them, so they don't stay up for long\n\nChatGPT has revolutionized work as we know it. From helping small businesses automate their administrative tasks to coding entire React components for web developers, its usefulness is hard to overstate.\n\nAt interviewing.io, we've been thinking a lot about how ChatGPT will change technical interviewing.One big question is: Does ChatGPT make it easy to cheat in interviews?You've probably started to hear concerns about students cheating on their homework with ChatGPT, and we are certain that some people have tried to cheat in interviews with it, too!\n\nInitial responses to cheating software have been pretty much in line with what you‚Äôd expect:\n\nIt seems clear that ChatGPT can assist people during their interviews, but we wanted to know:\n\nTo answer these questions, we recruited some of our professional interviewers and users for a cheating experiment! Below, we‚Äôll share everything we discovered and explain what it means for you. As a little preview, just know this: companies need to change the types of interview questions they are asking‚Äîimmediately.\n\ninterviewing.io is an interview practice platform and recruiting marketplace for engineers. Engineers use us for mock interviews. Companies use us to hire top performers. We have thousands of professional interviewers in our ecosystem, and hundreds of thousands of engineers have used our platform to prepare for interviews.1\n\nInterviewers came from our pool of professional interviewers. They were broken into three groups, with each group asking a different type of question.The interviewers had no idea that the experiment was about ChatGPT or cheating; we told them that \"[this] research study aims to understand the trends in the predictability of an interviewer‚Äôs decisions over time ‚Äì especially when asking standard vs. non-standard interview questions.\"\n\nThese were the three question types:\n\nExample: TheSort ColorsLeetCode question is asked exactly as it is written.\n\nExample: TheSort Colorsquestion above but modified to have four integers (0,1,2,3) instead of just three integers (0,1,2) in the input.\n\nExample: You are given a log file with the following format:\n-<username>: <text> - <contribution score>- Your task is to identify the user who represents the median level of engagement in a conversation. Only consider users with a contribution score greater than 50%. Assume that the number of such users is odd, and you need to find the one right in the middle when sorted by their contribution scores. Given the file below, the correct answer is SyntaxSorcerer.\n\nFor more information about question types and about how we designed this experiment, please read theInterviewer Experiment Guidelinesdoc that we shared with participating interviewers.\n\nInterviewees came from our pool of active users and were invited to participate in a short survey. We selected interviewees who:\n\nThis selection helped us skew the candidates toward people who could feasibly cheat in an interview, had the motivation to do so, and were already reasonably familiar with ChatGPT and coding interviews.\n\nWe told interviewees that they had to use ChatGPT in the interview, and the goal was to test their ability to cheat with ChatGPT.They were also told not to try to pass the interview with their own skills ‚Äî the point was to rely on ChatGPT.\n\nWe ended up conducting 37 interviews overall, 32 of which we were able to use (we had to remove 5 because participants didn‚Äôt follow directions):\n\nA quick disclaimer. Because our platform allows for anonymity, our interviews have audio but no video. We‚Äôre anonymous because we want to create a safe space for our users to fail and learn quickly without judgment. It‚Äôs great for our users, but we acknowledge that not having video in these interviews makes our experiment less realistic. In a real interview, you will be on camera with a job on the line, which makes cheating harder ‚Äî but does not eliminate it.\n\nAfter the interviews, both interviewers and interviewees had to complete an exit survey. We asked interviewees about the difficulties of using ChatGPT during the interview, and interviewers were given multiple chances to express concerns about the interview ‚Äî we wanted to see how many interviewers would flag their interviews as problematic and report that they suspected cheating.\n\nWe had no idea what would happen in this experiment, but we assumed that if half the candidates that cheated got away with it and passed the interview, it would be a telling result for our industry.\n\nAfter removing interviews where participants did not follow instructions2, we got the following results. Our control was how candidates performed in interviewing.io mock interviews outside the study: 53%.3Note that most mock interviews on our platform are LeetCode-style questions, which makes sense because that's primarily what FAANG companies ask. We'll come back to this in a moment.\n\nPredictably, the verbatim group performed the best, passing 73% of their interviews. Interviewees reported that they got the perfect solution from ChatGPT.\n\nThe most notable comment from the post-interview survey for this group is below ‚Äî we think it is particularly telling of what was going on in many of the interviewers‚Äô minds:\n\n‚ÄúIt's tough to determine if the candidate breezed through the question because they're actually good or if they've heard this question before. Normally, I add 1-2 unique twists to the problem to ascertain the difference.‚Äù\n\nNormally, this interviewer would have followed up with a modified question to get more signal, so let‚Äôs examine the ‚Äúmodified‚Äù group next to see if interviewers actually got more signal by adding a twist to their questions.\n\nRemember, this group may have had a LeetCode question given to them, which was standard but modified in a way that was not directly available online. This means ChatGPT couldn‚Äôt have had a direct answer to this question. Hence, the interviewees were much more dependent on ChatGPT's actual problem-solving abilities than its ability to regurgitate LeetCode tutorials.\n\nAs predicted, the results for this group weren‚Äôt too different from the ‚Äúverbatim‚Äù group, with 67% of candidates passing their interviews. As it turns out, this difference was not statistically significantly different from the \"verbatim\" group, i.e., ‚Äúmodified‚Äù and ‚Äúverbatim‚Äù are essentially the same. This result suggests that ChatGPT can handle minor modifications to questions without much trouble. Interviewees did notice, however, that it took more prompting to get ChatGPT to solve the modified questions. As one of our interviewees said:\n\n‚ÄúQuestions that are lifted directly from LeetCode were no problem at all. A follow-up question that was not so much directly LeetCode-style was much harder to get ChatGPT to answer.‚Äù\n\nAs expected, the ‚Äúcustom‚Äù question group had the lowest pass rate, with only 25% of candidates passing.Not only is it statistically significantly smaller than the other two treatment groups, it's significantly lower than the control! When you ask candidates fully custom questions, they perform worse than they do when they're not cheating (and getting asked LeetCode-style questions)!\n\nNote that this number, when initially calculated, was marginally higher, but after reviewing the custom questions in detail, we discovered a problem with this question type we hadn‚Äôt anticipated, which had skewed the results minorly toward a higher pass rate. Read the section below called \"Companies: Change the questions you are asking immediately!\" to find out what that problem was.\n\nIn our experiment, interviewers were not aware that the interviewees were being asked to cheat. As you recall, after each interview, we had interviewers complete a survey in which they had to describe how confident they were in their assessments of candidates.\n\nInterviewer confidence in the correctness of their assessments was high, with 72% saying they were confident in their hiring decision.One interviewer felt so strongly about an interviewee's performance that they concluded we should invite them to be an interviewer on the platform!\n\n‚ÄúThe candidate performed very well and demonstrated knowledge of a strong Amazon L6 (Google L5) SWE... and could also be considered to be an interviewer/mentor on interviewing.io.‚Äù\n\nThat is a lot of confidence after just one interview ‚Äî probably too much!\n\nWe‚Äôve long known thatengineers are bad at gauging their own performance, so perhaps it shouldn‚Äôt come as a shock to find that interviewers also overestimate the effectiveness of the questions that they ask.\n\nOf the interviewers who were not confident in their hiring choice (28%), we asked them why. This was the frequency distribution of their reasons.\n\nMost interviewers concerned about their hiring decision expressed specific reasons for their lack of confidence. These issues typically included suboptimal solutions, missed edge cases, messy code, or poor communication. We specifically included an ‚ÄúOther Issue‚Äù category to see if they would express a concern that the interviewee was cheating, but digging deeper revealed only minor grievances like ‚Äúpersonality issues‚Äù and ‚Äúthey need to speed up their coding.‚Äù\n\nIn addition to having this opportunity to call out cheating, interviewers were prompted three additional times to note any other concerns they had with the interview, including free-form text boxes and several multiple-choice questions with options to explain their concerns.\n\nWhen an interviewee bombed because they didn‚Äôt understand the ChatGPT response, the interviewer chalked up the interviewee‚Äôs odd behavior and stilted responses to a lack of practice ‚Äî not cheating. One interviewer thought the candidate's problem-solving was fine but commented that they were slow and needed to consider edge cases more carefully.\n\n‚ÄúCandidate did not seem prepared for any LeetCode questions.\"\n\n‚ÄúCandidate's approach lacked clarity, and they jumped into the coding too early.‚Äù\n\n‚ÄúThe candidate was not prepared to tackle even the most basic coding questions on LeetCode.‚Äù\n\n‚ÄúGood problem solving in general, but the candidate needs to be faster at coding and identifying critical edge cases.‚Äù\n\nSo, who reported concerns about cheating? And who got caught?\n\nAs it turns out, not a single interviewer mentioned concerns about any of the candidates cheating!\n\nWe were stunned to discover that interviewers reported no suspicions of cheating, and interestingly, interviewees were largely confident that they were getting away with it, too. 81% reported no concerns about being caught, 13% thought they might have tipped off the interviewer, and an astonishingly small 6% of participants thought the interviewer suspected them of cheating.\n\nThe candidates who worried they were caught did have abnormal comments from the interviewers in the post-survey analysis, but they still were not suspected of cheating.To summarize, most candidates thought they were getting away with cheating ‚Äî and they were right!\n\nThe obvious conclusion from these results is thatcompanies need to start asking custom questions immediately, or they are at serious risk of candidates cheating during interviews (and ultimately not getting useful signal from their interviews)!\n\nChatGPT has made verbatim questions obsolete; anyone relying on them will be naively leaving their hiring processes up to chance. Hiring isalready tricky enoughwithout worrying about cheating. If you‚Äôre part of a company that uses verbatim LeetCode questions, please share this post internally!\n\nUsing custom questions isn‚Äôt just a good way to prevent cheating. It filters out candidates who have memorized a bunch of LeetCode solutions (as you saw, our custom question pass rate was significantly lower than our control). It also meaningfully improves candidate experience, which makes people way more likely to want to work for you. A while ago, we did ananalysis of what makes good interviewers good. Not surprisingly, asking good questions was one of the hallmarks, and our best-rated interviewers were the ones who tended to ask custom questions! Question quality was extremely significant in our study, regarding whether the candidate wanted to move forward with the company. It was much more important than the company‚Äôs brand strength, which mattered for getting candidates in the door but didn‚Äôt matter relative to question quality once they were in process.\n\nAs some of our interviewees said‚Ä¶\n\n‚ÄúAlways nice to get questions that are more than just plain algorithms.‚Äù\n\n‚ÄúI liked the question ‚Äî it takes a relatively simple algorithms problem (build and traverse a tree) and adds some depth. I also liked that the interviewer connected the problem to a real product at [Redacted], which made it feel less like a toy problem and more like a pared-down version of a real problem.‚Äù\n\n‚ÄúThis is my favorite question that I‚Äôve encountered on this site. It was one of the only ones that seemed to have real-life applicability and was drawn from a real (or potentially real) business challenge. And it also nicely wove in challenges like complexity, efficiency, and blocking.‚Äù\n\nOne more somewhat subtle piece of advice for companies who decide to move to more custom questions. You might be tempted to take verbatim LeetCode questions and change up the wording or some of the window dressing. That makes sense, because it‚Äôs certainly easier than coming up with questions from scratch. Unfortunately, that doesn‚Äôt work.\n\nAs we mentioned earlier, we discovered in this experiment that just because a question looks like a custom question, doesn‚Äôt mean it is one. Questions can appear custom and still be identical to an existing LeetCode question.When making questions to ask candidates, it isn‚Äôt enough to obscure an existing problem.You need to ensure that the problem has unique inputs and outputs to be effective at stopping ChatGPT from recognizing it!\n\nThe questions that interviewers ask are confidential, and we cannot share the exact questions that our interviewers used in the experiment. However, we can give you an indicative example.  Below is a ‚Äúcustom question‚Äù with this critical flaw, which is easy for ChatGPT to beat:\n\nDid you spot the issue? While this question appears ‚Äúcustom‚Äù at first glance, its objective is identical to the popularTwoSumquestion: finding two numbers that sum to a given target. The inputs and outputs are identical; the only thing ‚Äúcustom‚Äù about the question is the story added to the problem.\n\nSeeing that this is identical to known problems, it shouldn‚Äôt be a surprise to learn that ChatGPT does well on questions that have inputs and outputs identical to existing known problems ‚Äî even when they have a unique story added to them.\n\nOne thing we‚Äôve found incredibly useful for coming up with good, original questions is to start a shared doc with your team where every time someone solves a problem they think is interesting, no matter how small, they jot down a quick note. These notes don‚Äôt have to be fleshed out at all, but they can be the seeds for unique interview questions that give candidates insight into the day-to-day at your company. Turning these disjointed seeds into interview questions takes thought and effort ‚Äî you have to prune a lot of the details and distill the essence of the problem into something that doesn‚Äôt take the candidate a lot of work/setup to grok. You‚Äôll also likely have to iterate on these home-grown questions a few times before you get them right ‚Äî but the payoff can be huge.\n\nTo be clear, we‚Äôre not advocating the removal of data structures and algorithms from technical interviews. DS&A questions have gotten a bad reputation because of bad, unengaged interviewers and because of companies lazily rehashing LeetCode problems, many of them bad, which have nothing to do with their work. In the hands of good interviewers, those questions are powerful and useful. If you use the approach above, you‚Äôll be able to come up with new data structure & algorithmic questions that have a practical foundation and component that will engage candidates and get them excited about the work you‚Äôre doing.\n\nYou‚Äôll also be moving our industry forward. It‚Äôs not OK that memorizing a bunch of LeetCode questions gives candidates an edge in today‚Äôs interview process, nor is it OK that interviews have gotten to a state where cheating starts to look like a rational choice. The solution is more work on the employer‚Äôs part to come up with better questions. Let‚Äôs all do it together.\n\nAll right, now, for all of you who are actively looking for work, listen up! Yes, a subset of your peers will now be using ChatGPT to cheat in interviews, and at companies that ask LeetCode questions (sadly, many of them), those peers will have an edge‚Ä¶ for a short while.\n\nRight now, we‚Äôre in a liminal state where companies‚Äô processes have not caught up to reality. They will, soon enough, either by moving away from using verbatim LeetCode questions entirely (which will be a boon for our entire industry) or by returning to in-person onsites (which will make cheating largely impossible past the technical screen) or both.\n\nIt sucks that other candidates cheating is another thing to worry about in analready difficult climate, but we cannot, in good conscience, endorse cheating to ‚Äúlevel the playing field.‚Äù\n\nIn addition, interviewees who used ChatGPT uniformly reported how much more difficult the interview was to complete while juggling the AI.\n\nBelow, you can view one interviewee stumbling through their time complexity analysis after giving a perfect answer to an interview question. The interviewer is confused as the interviewee scrambles to explain how they got to their incorrect time complexity (secretly provided by ChatGPT).\n\nWhile no one was caught during the study, their cameras were off, and cheating was still difficult for many of our skilled candidates, as evidenced by this clip.\n\nEthics aside, cheating is difficult, stressful, and not entirely straightforward to implement. Instead, we advise investing that effort into practice, which will serve you well once companies change their processes, which hopefully should be soon. Ultimately, we hope the advent of ChatGPT will be the catalyst that finally moves our industry‚Äôs interview standards away from grinding and memorizing to actually testing engineering ability.\n\nMike Mroczka, a former senior SWE (Google, Salesforce, GE), is the primary author ofBeyond Cracking the Coding Interview‚Äîthe official sequel to Gayle McDowell's original CTCI. He works as a tech consultant and has a decade of experience helping engineers land their dream jobs. He‚Äôs a top-rated mentor (interviewing.io, Karat, Pathrise, Skilled.inc) and the author of viral technical content on system design and technical interview strategies featured on HackerNews, Business Insider, and Wired. He also sometimes writes technical content for interviewing.io (like this piece) and was one of the authors of interviewing.io‚ÄôsA Senior Engineer's Guide to the System Design Interview.\n\nYou can find him online atmikemroczka.com,LinkedIn, andX.\n\nSpecial thanks to Dwight Gunning and Liz Graves for their help with this experiment. And of course a big thank you to all the interviewees and interviewers who participated!\n\nTo be an interviewer on our platform, you have to have at least 4 years of experience and have conducted at least 20 interviews on behalf of a FAANG or FAANG-adjacent company).‚Ü©\n\nFive interviews needed to be removed because they did not meaningfully use ChatGPT. In two instances, the interviewee was familiar with the question and chose to solve the problem themselves. In one interview, the interviewee wanted to just try the question on their own and didn't prompt ChatGPT, ignoring our instructions. The last two interviews were \"custom\" interview questions that were problematic for reasons we‚Äôll outline later in this article.‚Ü©\n\nThis is a higher passthrough rate than you'd see in the wild. We think it comes down to two factors: selection bias and pre-interview prep. The users who invest in interview prep are a specific, self-selected slice of the population. Moreover, many of our users practice on their own before practicing with a human.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.\n\n```\nLOG FILE START\nNullPointerNinja: \"who's going to the event tomorrow night?\" - 100%\nLambdaLancer: \"wat?\" - 5%\nNullPointerNinja: \"the event which is on 123 avenue!\" - 100%\nSyntaxSorcerer: \"I'm coming! I'll bring chips!\" - 80%\nSyntaxSorcerer: \"and something to drink!\" - 80%\nLambdaLancer: \"I can't make it\" - 25%\nLambdaLancer: \"üôÅ\" - 25%\nLambdaLancer: \"I really wanted to come too!\" - 25%\nBitwiseBard: \"I'll be there!\" - 25%\nCodeMystic: \"me too and I'll brink some dip\" - 75%\nLOG FILE END\n\n```\n\n```\nFor her birthday, Mia received a mysterious box containing numbered cards \nand a note saying, \"Combine two cards that add up to 18 to unlock your gift!\" \nHelp Mia find the right pair of cards to reveal her surprise.\n\nInput: An array of integers (the numbers on the cards), and the target sum (18). \narr = [1, 3, 5, 10, 8], target = 18\n\nOutput: The indices of the two cards that add up to the target sum. \nIn this case, [3, 4] because index 3 and 4 add to 18 (10+8).\n\n```",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/how-hard-is-it-to-cheat-with-chatgpt-in-technical-interviews",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Why resume writing is snake oil",
      "content": "# Why resume writing is snake oil\n\n## Recruiters aren‚Äôt reading your resume. They‚Äôre skimming it for very specific things.\n\n## Why the resume myth persists\n\n## The notable exception: If you already look good on paper, polishing your resume CAN be useful.\n\n## For everyone else, stop working on your resume, and start doing outreach.\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### K Largest Elements\n\n### Reverse String\n\n### LRU Cache\n\n#### Related posts\n\n#### Stuff we write about\n\nI just asked ChatGPT to size the global resume writing industry. Here‚Äôs what it had to say:\n\nThe global resume writing industry was valued at approximately $1.37 billion in 2024 and is expected to grow steadily, reaching around $1.44 billion by 2025, and about $1.59 billion by 2033... The growth is driven by increased demand for professional resume services due to heightened job market competition, coupled with advancements in technology and personalization through AI-driven resume writing tools.\n\nI don‚Äôt know if these numbers are exactly true, and I don't know what portion of that is resume writing for engineers specifically, but it doesn‚Äôt really matter. I am certain that they are directionally correct. As the market has gotten worse, I‚Äôve heard more and more job seekers ask for resume reviews and rewrites, and I‚Äôve seen many companies in the interview prep space start offering resume reviews.\n\nThey‚Äôre all selling snake oil, and no one should spend a dime on it. I‚Äôll explain why in a little bit, but first let‚Äôs talk about something else I found on the internet.\n\nA few days ago, I sawthis post on Reddit. It was a leaked internal set of hiring requirements (sometimes called a ‚Äúhiring spec‚Äù) that looked like this:\n\nOf course, there was the usual Reddit shock and awe and pearl clutching about whether this hiring spec could be real.\n\nYes, it‚Äôs real. As someone who‚Äôs been in hiring for over a decade, I‚Äôm certain of it. And not only is it real, but it‚Äôs routine. It‚Äôs business as usual.\n\nI‚Äôve been a head of talent at top startups, and I used to run my own recruiting agency where I hired for a bunch of companies who have since become household names. When I worked as an agency recruiter 10 years ago, companies regularly shared documents like this one with me. The only difference between then and now is the idea of a ‚Äúdiversity bonus.‚Äù Everything else hasn‚Äôt changed in a decade.\n\nDocuments like this are why I quit recruiting to start interviewing.io.\n\nAnd documents like this are the reason that the entirety of the resume writing profession is a snake oil pit.\n\nThere is one notable exception to this rule, which I‚Äôll talk about, but most people should not spend a dime on resume writers. Here‚Äôs why.\n\nIn 2024, we ran astudywhere we asked 76 recruiters to look at resumes and indicate which candidates they‚Äôd want to interview. Recruiters are most likely to contact you if:\n\nWhat's missing? Things like, for example, having a quantifiable impact or demonstrating teamwork. Essentially, everything recruiters look for is stuff that you either have or you don't.\n\nIn this same study, we also learned that when recruiters do look at resumes, they spend an average of 30 seconds reviewing them. That's not enough time to read every bullet. Instead, they are mainly skimming for recognizable companies and schools.\n\nHere is an excellent example,also from Reddit, that makes this difference very clear.\n\nThis resume certainly passes the skim-test: good companies, appropriate roles, and a good university too. It's only when you actually spend more than 30 seconds reading the resume that you learn that not only is this resume obviously fake, but it also celebrates accomplishments like \"Spread Herpes STD to 60% of intern team.‚Äù And yet, it got a 90% callback rate. Recruiters just aren't reading the details.\n\nIn other words, either you already have what recruiters are looking for (which often may be different than what‚Äôs explicitly listed in a job description‚Ä¶ because they certainly aren‚Äôt sharing the real ‚Äúhiring spec‚Äù) or you don‚Äôt. If you have it, then you don‚Äôt need a resume writer ‚Äî though it‚Äôs always smart to make it easier for recruiters to find the things they‚Äôre looking for. If you don‚Äôt have what they‚Äôre looking for, no amount of agonizing over how you present yourself is going to move the needle.\n\nSo, if recruiters aren‚Äôt reading and are just skimming for brands, why do people agonize over their resumes and give money to resume writers?\n\nIn interviewing.io‚Äôs Discord server, I regularly see requests for resume reviews. I also see other interview prep companies charging money for resume reviews. Presumably they charge because the demand is there. But why are people willing to pay for something that is completely useless?\n\nI think it‚Äôs a mix of misinformation and the desire for control.\n\nRecruiters rarely admit that they‚Äôre skimming primarily for brands. If you read recruiters‚Äô advice for job seekers, it almost always includes advice about quantifying your impact, including your side projects1, and so on. These bits of advice are well-intentioned, I‚Äôm sure, but they perpetuate a harmful myth and an exploitative resume writing cottage industry.\n\nThe other reason is control. Job searches are intimidating, and putting yourself out there is hard. It‚Äôs much easier to retreat to the comfort of polishing up your bullet points because it‚Äôs something you can control. You get into a routine, rewrite your bullets, and upload your resume to a bunch of places. Then when you don‚Äôt hear back, you retreat to familiar ground, grind on your bullets some more, and rinse and repeat. Because it‚Äôs easier to believe that if you can just get your bullets right, you‚Äôll finally hear back. That narrative sure beats out the idea that no one is reading your resume no matter how much you fine-tune it.\n\nIf you‚Äôre fortunate enough to have top brands on your resume, cleaning it up can be a good use of your time. I still wouldn‚Äôt hire a resume writer because the details don‚Äôt matter very much. Just make sure that recruiters can easily spot the brands.\n\nHere‚Äôs an example. Take a look at the before and after screenshots of the resume below.\n\nThis resume belongs to one of our users who was kind enough to let us share it. He actually has two of the three things that recruiters look for: FAANG experience and a niche title (ML engineer). But both are buried! And the section that gets the most attention is wasted on undergraduate awards.\n\nAs you can see, he spent almost 3 years at Apple, but a recruiter skimming his resume might not notice that because it was a while ago. Instead, he showcases an undergrad award and some technologies/languages that he knows. Neither of those is nearly as useful to recruiters as FAANG experience.\n\nHis current title is also ML engineer, and one at the Principal level at that. But it wasn‚Äôt always: He went from back-end to SRE to a little bit of everything to ML, and because of that, it‚Äôs possible a recruiter would miss it as well.\n\nWe edited this candidate‚Äôs resume to put all the things recruiters look for at the very top of the resume and moved the buzzword soup to the bottom. This candidate is obviously well-positioned because he has FAANG experience, several top schools, and niche skills ‚Äî but before, many recruiters didn‚Äôt spot them. After he made these changes, the number of interviews he got increased by 8X.\n\nNote that we didn‚Äôt really rewrite anything. We just moved stuff around. You can do this yourself without needing a professional writer.\n\nIf you‚Äôre like most people, you don‚Äôt have top brands on their resume, so no amount of rewriting is going to move the needle much. Instead of agonizing over it, stop applying and start doing outreach to hiring managers. It‚Äôs your best shot to get noticed and to get someone to look at you as a human being, instead of a collection of brands.Here‚Äôs how to do it. For a deeper dive into both resume writing and how to get in the door, you can readBeyond Cracking the Coding Interview(bothchapters are also available for free).\n\nWill side projects help you get a job? Good question and one that should be teased apart a bit. Getting a job has two components: getting in the door and doing well in interviews. In general, side projects are useless for getting in the door. Yes, every once in a while, a side project goes viral. Or if you build something really cool with your target company‚Äôs API, it can get some attention. But that‚Äôs pretty rare. Most side projects that adorn resumes go completely unnoticed.  When it comes to performing well in interviews, it depends. If the companies you‚Äôre interviewing at test you on practical skills, then they can be a great use of time. They can also be a great use of time to help you understand how APIs work, how the internet works, how clients and servers talk to each other, and so on. But if the companies you‚Äôre targeting primarily ask algorithmic questions, then side projects probably aren‚Äôt the best use of time. Finally, will side projects make you a better engineer? Absolutely. And that‚Äôs the best reason to do them. But that‚Äôs not quite the same as getting a job, is it? Once you're actively looking for a job, your time is better spent on interview prep and outreach.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/why-resume-writing-is-snake-oil",
      "author": "",
      "user_id": ""
    },
    {
      "title": "It's OK to postpone your interviews if you're not ready",
      "content": "# It's OK to postpone your interviews if you're not ready\n\n## When postponing is OK, and when youshouldn‚Äôttake our advice\n\n## Exactly what to say to postpone your interviews\n\n## Postponing can also be a good way to control the timing of your job search\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Image Filter Service\n\n### K Closest Points To Origin\n\n### Alien Dictionary\n\n#### Related posts\n\n#### Stuff we write about\n\nAt interviewing.io, we‚Äôve seen hundreds of thousands of engineers go through job searches, and the biggest mistakes we see people make are all variations on the same theme: not postponing their interview when they aren‚Äôt ready.\n\nI‚Äôve found myself repeating that it‚Äôs OK to postpone interviews so often that I finally broke down and decided to make it a blog post. It‚Äôs very simple advice, so the bulk of this post will be spent trying to convince you that it‚Äôs fine to postpone. And then of course I‚Äôll tell you what to say.\n\nDo any of these situations sound familiar?\n\nBoth of these situations are extremely common, but they‚Äôre both preventable. You can just ask to postpone. There are a few edge cases where that‚Äôs not a good idea, but in most situations, it‚Äôs the right thing to do.\n\nIf you‚Äôre applying to a large company with a centralized process (in other words, a process where you interview first and get matched with a team later), postponing is almost always OK. These companies are perpetually hiring, and their open roles are evergreen.1\n\nEven if you‚Äôre applying to a large company with a decentralized process (where you interview for a specific team), we recommend postponing unless you‚Äôre extremely excited about the team you‚Äôre talking to. In that scenario, it‚Äôs possible that if you postpone, the slot will be filled. But if it‚Äôs not a perfect fit and you‚Äôd be OK with another team, we recommend postponing ‚Äî in the worst case, you‚Äôll simply get slotted into a different team.\n\nThe only time when postponing isn‚Äôt a good idea is when you‚Äôre applying to a very small company that has just one open headcount. In that scenario, it is possible that postponing will cost you the opportunity because they‚Äôll choose another candidate. However, you can ask how likely that is to happen, up front.\n\nWith that edge case out of the way, here‚Äôs a little-known fact about how timing works at large companies: Recruiters don‚Äôt really care when you interview. Though they‚Äôd prefer that you interview sooner rather than later so they can hit their numbers, at the end of the day, they‚Äôd rather be responsible for successful candidates than unsuccessful ones.\n\nEvery recruiter, in every job search, will tell you that time is of the essence because of all the other candidates in the pipeline. Most of the time, that is irrelevant and just something they say to create an artificial sense of urgency. There are always other candidates in the pipeline because the roles are evergreen. But they have nothing to do with your prospects.\n\nYou can use this text verbatim when postponing your interviews, and, with some small edits, you can even use it several times (e.g., before the phone screen and then again before the onsite).\n\nI‚Äôm really excited about interviewing at [company name]. Unfortunately, if I‚Äôm honest, I haven‚Äôt had a chance to practice as much as I‚Äôd like. I know how hard and competitive these interviews are, and I want to put my best foot forward. I think I‚Äôll realistically need a couple of months to prepare. How about we schedule my interview for [date]?\n\nOne important thing to remember is to be conservative about how long it will take. You‚Äôve probably heard the adage about how, when you have to estimate the time an engineering task will take, you should think of a number and double it. Here, you may even want to triple it.\n\nI‚Äôve seen many candidates ask for 2 weeks because that feels like a reasonable thing to ask for, only to have it blow up in their face when they realize they need to ask for another extension (which is still worth doing but harder because the company may think you‚Äôre taking them for a ride). If you need two months, ask for two months.\n\nThis section is extra credit, but once you get comfortable with postponing your interviews when you‚Äôre not prepared, you can use the same skills to batch your interviews and ultimately control the timing of your job search.\n\nWhat does it mean to control the timing of your job search? Ideally, you want all of your offers to come in at the same time, both because it maximizes optionality (one company that arbitrarily offers first doesn‚Äôt rush you into making a decision) and maximizes leverage (you can negotiate from a position of power).\n\nIf you want to dive deeper into this process, take a look at a book I recently co-wrote,Beyond Cracking the Coding Interview. It includes a full chapter about how to manage your job search, which covers everything from determining the order in which to approach companies to how to speed them up and slow them down once you‚Äôre in process. There‚Äôs a lot more detail than I can touch in this post, and much of it depends on your specific circumstances, but you can probably get 50% of the way there just by postponing your interviews in batches.\n\nThe big insight here is that, except for the edge cases we discussed above, a recruiting process can be paused at any point.\n\nIn other words, you can do a bunch of outreach to companies, then do a bunch of enthusiastic recruiter calls, and THEN pause all the processes until you‚Äôre prepared to do technical phone screens.\n\nThen, you batch the phone screens.\n\nFinally, if needed, you pause again to give yourself time to prepare for onsites. Onsite interviews require a different skill set than technical phone screens. The technical phone screen isn‚Äôt about depth or fit ‚Äî it‚Äôs just a way to cut people who aren‚Äôt likely to pass the onsite.\n\nThe onsite, on the other hand, isn‚Äôt just meant to cut poor performers. It‚Äôs at once a deeper dive into your technical ability and a way to gauge fit. If you‚Äôll be interviewing with your future team (typical at companies with a decentralized process), it‚Äôs also meant to assess your ability to work together, collaborate on hard things, complement the team's existing skillset, and so on. It usually has some coding (to verify that your technical phone screen wasn‚Äôt a fluke), but the focus is usually on system design and behavioral interviews2, which are also the interviews commonly used for leveling decisions.\n\nSo, onsite prep is much more about system design and getting your stories right for your behavioral interviews. Some people can pull off prepping for both coding and sys design/behavioral at the same time. For many, depending on their existing familiarity with the material, it‚Äôs a tall order. So, it‚Äôs wise to take the time you need and prepare.\n\nThen, once you‚Äôre ready, you batch the onsites.\n\nWhen your offers come in, you should ask for extensions as needed, speed companies up, and startnegotiating(which we‚Äôve written about in the past and which, of course, is covered at great depth in the book).\n\nYes, it‚Äôs true that in 2022, we saw several FAANGs and many other companies freeze hiring, and if you had postponed your interviews, you‚Äôd have been left out in the cold. Despite how devastating these freezes were to affected candidates (and to the tech economy as whole), they are extremely rare, and in our humble opinion, not worth optimizing for or worrying about. You are very unlikely to have to deal with an impending freeze.‚Ü©\n\nSome companies will also have technical deep dives, project presentations, assessments of niche skills, and so on.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/its-ok-to-postpone-your-interviews-if-youre-not-ready",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Read nine chapters of Beyond Cracking the Coding Interview for free",
      "content": "# Read nine chapters of Beyond Cracking the Coding Interview for free\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Right View Of Binary Tree\n\n### Design WhatsApp\n\n### Maximum Subarray\n\n#### Related posts\n\n#### Stuff we write about\n\nAlong with Gayle Laakmann McDowell, Mike Mroczka, and Nil Mamano, I wrote the official sequel toCracking the Coding Interview. It's fittingly calledBeyond Cracking the Coding Interview..\n\nNow, we're releasing9 chapters of the book for free! There are two PDFs in the linked folder:\n\nTake a look, and let me know what you think. You can reach me ataline@interviewing.io.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/nine-free-chapters-of-beyond-cracking-the-coding-interview",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Why engineers don‚Äôt like take-homes ‚Äì and how companies can fix them",
      "content": "# Why engineers don‚Äôt like take-homes ‚Äì and how companies can fix them\n\n## Why do companies use take-home assignments?\n\n## Why don‚Äôt candidates like take-homes? It‚Äôs about value asymmetry.\n\n## Is there any relationship between who candidates are and their willingness to do take-homes?\n\n## How companies can make take-homes better (and why they probably should)\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Make them interesting and relevant to the actual work\n\n### Keep them short\n\n### Set a clear scope, related to the role\n\n### Be thoughtful about where in your process you insert the take-home, and give candidates a choice between a take-home and something else\n\n### Give candidates a good, rational reason to do the take-home\n\n### Compensate candidates\n\n### Give feedback\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### File Parsing\n\n### Reverse Words in a String\n\n### Generate Parentheses\n\n#### Have someone on your team QA the actual length of the assignment\n\n#### For take-homes early in the process, before speaking to a human\n\n#### For take-homes later in the process\n\n#### How much to pay?\n\n#### Related posts\n\n#### Stuff we write about\n\n[My experiences with take-homes] drive home the idea that this employer doesn't care if you are a carbon-based life form, as long as code comes out of one or more of your orifices.\n\nTake-home assignmentscould, in theory, be great for both companies and candidates. What better, fairer way to evaluate someone‚Äôs ability to do the work‚Ä¶ than to have them do the work?\n\nUnfortunately, in practice, take-homes typically suck for engineers.\n\nWe surveyed almost 700 of our users about their experiences with take-homes and interviewed a handful more for deeper insights. We learned a lot‚Äîmostly about candidates' poor experiences and negative feelings toward take-homes. They take a lot of time. They don‚Äôt respect candidates‚Äô time. Candidates often get no feedback. And candidates are almost never compensated.\n\nThe good news? Turns out there are some pretty simple things companies can do to vastly improve their take-home assignments. But before we dive into that‚Ä¶\n\nTake-homes vary a ton by role and company in terms of the types of questions, subject matter, length, and intensity. At their simplest, take-homes can be the same questions as in an algorithmic interview, except done asynchronously. The other extreme is asking candidates to build an entire app and deploy it.\n\nWe were surprised to see how often companies use take-homes. About 85% of our users got one at some point in their career, independent of their experience level. Of the users who encountered them, they tended to see them as part of the process about 20% of the time, again, independent of their experience level1.\n\nWhy are take-homes relatively popular among employers? They mostly use them to save time in the hiring process. There are, however, some more noble reasons a company might use a take-home assignment:\n\nAccordingly, here‚Äôs the relevant part of a great conversation between Vincent Woo of CoderPad and Patrick McKenzie (known to Hacker News folks as patio11) of Stripe, formerly ofStarfighter.\n\nVincent:What general sort of high level change do you think that recruiters at tech\ncompanies that are roughly Stripe‚Äôs size or bigger ought to make?\n\nPatrick:If I could wave a magic wand and sell the world on one concept, it would be selling the world on the desirability of work sample testing‚Ä¶ where the way to tell if someone is good at something is to have them do the something.\n\nDespite enthusiasm for the theory of take-homes and some very well-intentioned reasons, candidates overwhelmingly don‚Äôt like take-homes. Here‚Äôs why.\n\nThough users expressed a lot of frustration with take-homes, we were surprised to see very few take a hard-line stance and refuse to do them. Only 6% outright refuse, and 66% of people complete take-homes all or most of the time.Surprisingly, these stats didn‚Äôt really change when we looked only at senior engineers. I was expecting that experienced engineers would do them almost never, if at all, but that‚Äôs not what the data shows. It‚Äôs possible that seniors are just louder in their disapproval.\n\nNevertheless, the more desirable a company, the more likely candidates will do the take-home and feel OK about it‚Äî70% told us they completed them because they ‚ÄúReally wanted to work at the company and were willing to do what it took.‚Äù\n\nI found Weedmaps [to be] a very interesting company. They were the first marijuana related company to IPO. So you'd be on the frontier working for them. I found that exciting. So I applied and they had [a] take-home. I was like, sure, of course I‚Äôll do this.\n\nOther reasons our users gave for completion included: ‚ÄúBecause the take-home would be discussed at the onsite‚Äù (38%) and ‚ÄúInteresting/cool assignment‚Äù (37%). However, many of those who did finish them had such a poor experience that they said they‚Äôd never apply to certain companies ever again. We‚Äôll talk about what makes the experience poor in a little bit.\n\nOf the people who refused to do at least one take-home at some point in their career, here were their reasons.\n\nThe common thread among all of these reasons is value asymmetry.The worst take-homes feel unrewarding to candidates. Even exploitative. Take-home assignments ask a lot of candidates: a significant investment of their time, with an often unclear scope, no guarantee of progressing to the next round, often without feedback, and almost always without compensation. Meanwhile, the company has basically invested nothing, except to send the task. We heard this a lot.\n\nWhen I'm interviewing, I look for things that are proxies for valuing team members‚Ä¶ or not. If they want me to do a take-home test, and they haven't even spent 30 minutes on a phone screen, I begin to sense an asymmetry in our relationship, with their time and resources being very valuable, and mine not being valuable at all.\n\nA divergence between how much effort they want me to put in, and how much they want to put in themselves. It signals that they are more worried about their time than mine, their costs than mine. It also means they underestimate how much effort it takes to write code, so that if I go to work for them, I am likely to face demands to work uncompensated overtime to meet their optimistic estimates.\n\nSpending five hours on their one-hour test for nothing leaves hard feelings. And if they ghost me after the test, I will happily tell every developer who asks what cheapskates they are.\n\nPerhaps surprisingly, our data says no. We ran a regression to compare our survey respondents‚Äô interview performance on our platform to how likely they were to do take-homes. The relationship was so weak as to be negligible.\n\nSimilarly, we ran a regression to see if people wholookgood on paper are more or less likely to do take-homes. The relationship there was negligible as well.\n\nIn other words, contrary to some popular opinions, you‚Äôre not necessarily weeding out your best candidates by doing take-homes, whether you define ‚Äúbest‚Äù in terms of how their resume looks or how they perform in interviews.\n\nAfter reading the stats above, you might think that, despite their grumblings, candidates generally do take-homes, and the best candidates won‚Äôt be weeded out. So, if you‚Äôre one of the many companies that uses them, it may not make sense to invest your limited time into making them better. It‚Äôs not that simple. For some companies, like the FAANGs, who have extremely strong brands and are known to pay well, changes are probably not worth it, especially in this market, where junior and senior engineers are willing to jump through more hoops than ever before.\n\nIf you‚Äôre not a FAANG, though, listen up. Here are some questions you can ask yourself to figure out if you should indeed make some changes to your take-homes.\n\nFirst, take an honest look in the mirror and ask yourself about your brand strength. Are you a household name? Does having you on candidates‚Äô resumes give them automatic prestige? Are you known to pay above market?If the answer toallof these questions isn‚Äôt a resounding yes, your brand strength is probably not strong enough to make people jump through hoops.\n\nHere‚Äôs a sketch to drive that point home. Unless you have a ton of brand strength, candidates‚Äô willingness to jump through hoops drops off sharply.\n\nIf you aren‚Äôt maxing out on brand strength, there are two questions you should ask yourself:\n\nIf your completion rate is below, say, 60% (our data shows that candidates complete take-homes around 62% of the time), then it‚Äôs DEFINITELY time to make a change.Honestly, regardless of what our data says, if people aren‚Äôt completing them at least 85% of the time, it‚Äôsprobablytime to make a change‚Äîlosing more than 15% of your candidates to attrition at any given stage in the funnel is bad.\n\nWhat about your offer acceptance rate? If it‚Äôs less than 50% and you‚Äôre using a take-home already, there‚Äôs an opportunity to make some improvements.You might be wondering what this has to do with take-homes in the first place. To answer that, let‚Äôs change how we think about different parts of the interview process. At face value, every part of the process is there to vet candidates, to determine if they‚Äôre the right fit for your organization. However, when used correctly, every part of your process should become a selling vehicle as well. This isespeciallyimportant for companies who do not have a strong, well-known brand. The FAANGs can get away with using their interview processes primarily as vetting exercises because candidates are already sold on the pay or prestige or sometimes on the work and the product. When you don‚Äôt have an established brand, the candidates who come to you are, at best, open to learning more, and the interview process is the instrument that teaches them. Wield it accordingly.\n\nThough we strongly advocate coming up withgreat, unique interview questions2and making sure you havegreat interviewers, if your process does have a take-home component, it is one of the more overlooked parts of the process when it comes to selling. You have the opportunity to have someonedo the actual work that you do! This is your chance to pick the coolest stuff you‚Äôve worked on and serve it up to someone on a platter and make it stick in their brains and make them imagine what it‚Äôd be like to work on these kinds of problems every day! Why wouldn‚Äôt you jump at this opportunity?\n\nYou may think you don‚Äôt need to sell in this market. But just because employers have all the power right now, it doesn‚Äôt mean that will always be the case. And great senior engineers still have a lot of leverage.\n\nIf, after considering your take-home completion rate and your offer acceptance rate, it looks like youdoneed to make some changes, here are some practical tips, based on what we‚Äôve learned from talking to our users (overwhelmingly senior engineers who are targeting top-tier companies‚Äîprobably the people you want). Let‚Äôs start with what we just talked about: using the take-home as a selling vehicle.\n\nYou're getting a chance to spend a couple of hours with somebody in a take-home (metaphorically). Why wouldn't you do everything you can to get them excited?Pick a problem that you've worked on, and get them hooked on it. Pick the kernel of an interesting problem that you've solved, and build something around it that will challenge candidates. Something that gets them thinking, ‚ÄúI could have done that better‚Äù or ‚ÄúThis is a different or more efficient way to do it.‚Äù That's going to be more effective than the standard perks many companies offer.\n\n[Best take-home I‚Äôve seen was an] open-ended system design question on the type of system I would work on, was meant to simulate a team discussion on the system we needed to build, and was a great way for me to start thinking about what I'd be working on there.\n\nOne way you could do this, is to have your engineering team keep a shared doc of ‚Äòcool‚Äô solutions they've found, or new things they've tried. These can serve as jumping-off points for creating your take-homes.\n\nThe‚Ä¶ challenge was for an internal tooling team that specialized in incident response tools; their challenge was to create a scaled down version of a tool already in use at the company. The focus was more on understanding the domain and customer than wiring up a bunch of complicated stuff, and it was a delight. It being a greenfield also gave you an opportunity to showcase some software design skills. I did not get this job, but enjoyed the experience and still feel connected to the team.\n\nIt was conceptually related to the sort of work the team was performing, but it was simplified and stand-alone enough to clearly not be unpaid labor for their product.\n\nJust be sure that when you come up with a practical problem that you strip out the annoying parts and focus only on the juicy kernel of the problem, the part that‚Äôs actually cool and lets the candidate be smart and creative. Don‚Äôt make them do grunt work or wrestle with their dev environment!\n\n[This] was for a tooling team in Support, where they didn't have a lot of experience creating challenges or interviewing. One of the engineers took a difficult task that he had accomplished recently and just made that the take home challenge. It involved a lot of Ruby version conflict debugging. It was completely demoralizing and felt like hazing.\n\nCandidates overwhelmingly favor take-homes that respect their time, i.e., short ones.\n\nThe best were short and brief, took no more than 2 hours and were directly related to what I would be doing on the job.\n\nBest are realistic and time bound, i.e., low time investment required.\n\nShort and quick take-homes are great.\n\nOver 80% of survey respondents said that take-homes should take 4 hours or less, and a plurality thought that they should take 2 hours.\n\nTake-homes being short in theory is one thing‚Ä¶ but we got a lot of feedback that take-homes often go far beyond how long companies tell candidates that take-homes should take.\n\nThis disconnect between actual time and expected time is another instance of value asymmetry: companies didn't even bother to have someone on their team do the take-home themselves and time it.\n\nI've done a couple of algorithm questions as take-homes that the interviewer said should take an hour. They routinely take longer than that.\n\nCompanies will say, ‚Äòdon‚Äôt spend more than X hours on it,‚Äô but then it actually takes 5X that amount. It's just too much time. And most of the time they didn‚Äôt give feedback at all even though I spent so much time on it.\n\nCompanies should clearly communicate the expected time commitment for a take-home. And they should be realistic about how much time it should take.\n\nBest was an interesting problem with a realistic time frame. They estimated 2 hours and it took me exactly that, which was refreshing and made the process seem fair.\n\nI've done a couple of exercises where they were truly respectful of my time. The tasks were small, clearly defined, and they gave me a realistic timeframe to complete them.\n\nFor the best take-home I did, the company told me: ‚ÄòTell us when you're going to start, and you'll have 4 hours. We'll be available over email that whole time, and we'll answer your questions within minutes.‚Äô That felt respectful of my time, and was a more reliable signal of my capabilities than a 20-minute algorithms exercise.\n\nTo get a realistic estimate, companies could simply QA their own take-homes‚Äîjust by having someone on your team take it, and time them.\n\nStill, some candidates will spend more time anyway, because they really want to work for a certain company. And it can be easy for candidates to go down a rabbit hole and get most of a take-home done in the first few hours, then spend another day or more, perfecting it to give themselves a better chance.\n\nDo you want me to literally only work two hours on something that's clearly going to take 10 to really be able to have a conversation with you about how I think about things? Because two hours of decisions isn't as good as 10 hours of decisions.\n\nIt‚Äôs okay if candidates want to put in extra time, but it should be made clear that that's not the expectation.\n\nThe scope was poorly defined, which made the assignment not only tedious, but also seemed like a waste of time.\n\nHaving clear, straightforward instructions can significantly enhance the take-home experience for candidates, making them feel purposeful and relevant. The best take-homes are those that directly align with the actual job.When candidates are asked to solve a simplified version of a real problem your company is facing, it not only tests relevant skills, but also gives a candidate insight into what work at your company would be like, which is really what selling is. (This is, of course, assuming that you believe what you‚Äôre working on is cool‚Ä¶ If you don‚Äôt, how will you ever convince others?)\n\nOne was a great learning experience because I had to solve a problem similar to what I would face in the job. It was concise and focused.\n\nBeing able to ask questions before or during the take-home, e.g., having a direct contact point who‚Äôs an engineer at the company, can also be a big plus.\n\nWe expect that many of the companies reading this piece have take-homes as the first step in\ntheir process, before ever talking to a human. This decision isn‚Äôt very popular.\n\nIf a company calls me for a screening interview, it means they've read my resume and cover letter, and not immediately dismissed my application as inappropriate. It also means they're putting a person on a phone call with me for the duration of the screening interview. This is symmetric, my effort matches theirs.\n\n[I] did a take home that was automatically sent to me after applying, before even speaking to a human. The feedback was 'you are too expensive,' no feedback on the coding.\n\nCompany needs to build an investment with the candidate first‚Äîthey shouldn't ask for it before meeting the candidate at least once.\n\nThat said, take-homes can be a great way to let candidates who don‚Äôt look good on paper show what they can do, and those candidates are more likely to complete them.To prevent candidate unhappiness/attrition, give them a choice. Either submit a resume or do the take-home assignment or both. If you go this route, though, design a take-home that you trust. We‚Äôve seen companies take this approach and then throw out perfect-scoring take-homes when they didn‚Äôt like the resume. If you use a take-home, then respect your candidates enough to follow up with the ones who‚Äôve done well, even if they don‚Äôt look good on paper.\n\nAnother way to make take-homes purposeful is to give your candidates an explicit choice about whether they‚Äôd rather do a technical interview or a take-home.Engineers are, in fact, split on which they‚Äôd prefer. Giving them a choice allows them to showcase their skills in the format they prefer and feel best prepared for. If you have good questions, you should be able to get good signal from either.\n\nOnly 10% of respondents told us that they were given the choice of take-home versus technical interview. So there is an opportunity for more companies to do this. It's a candidate-friendly gesture that shows empathy and can help candidates shine.\n\nMany candidates have spent months preparing for standard technical interviews. So it can feel anticlimactic when they find out that a company they're excited about doesn't do them. Others get so nervous in a live interview that they don‚Äôt perform.\n\nI rarely don't pass take-home assessments, but I often fail to pass live interviews.\n\nInterestingly, one user we interviewed told us that they spend far less time on a take-home compared to preparing for a live technical interview. And because of that they prefer take-homes.\n\nI prefer take-homes over all other assessments because I find I spend far less time on take-homes then I do preparing for live interviews. It's hard to overestimate the amount of extra time I spend preparing for a technical interview, compared to doing a take-home‚Äîfor me it‚Äôs maybe 10 times as much. I've spent hundreds of hours, maybe 500 hours, over the course of my career preparing for technical interviews. And if I have one pop up, I can't just drop everything and do it right away. I have to spend a lot of extra time just ramping up for a particular interview, in addition to the hundreds of hours that I've done.\n\nClear communication about the purpose of a take-home in the hiring process, as well as why it‚Äôs rational to spend time on it, is important for candidates. It‚Äôs a way to make sure it feels purposeful and not like a random task.\n\nOne way to make the take-home feel deliberate is to replace some parts of your process with it. A standard process without a take-home has a recruiter call followed by a technical phone screen followed by an onsite (virtual or otherwise). The technical phone screen usually lasts about an hour. The onsite usually lasts 6 hours.\n\nLet‚Äôs say your take-home takes 2 hours to do. You can make it replace the phone screen and one of the onsite rounds, which nets out to the same number of hours spent. If you go this route, we recommend doing the mathexplicitlyfor candidates and showing them that the time they spend on the take-home is equivalent to the time they‚Äôd be spending on a process without it.\n\nAnother way to make the take-home feel deliberate is to incorporate it into the onsite, where at least one of the rounds, if not more, will include a code review and/or thoughtful discussion about tradeoffs and choices made. This should be standard practice, but isn‚Äôt always. 32% of our users said companies had told them this, and it was the reason they decided to do a take-home.\n\nThe best take-homes were ones that we discussed in the first rounds of interviews. The worst ones were ones that I submitted and we never talked about them again.\n\nIdeally, you do both of these things together, and very clearly explain to candidates both the math and how the take-home informs the content of the onsite.\n\nProbably the most striking result of our survey was that 58% of candidates think that they deserve compensation for completing take-homes. Yet only 4% reported ever receiving it. Compensation can shift candidate perceptions of the hiring process and of the company:\n\nThey compensated me for my time, which made the process feel very professional and respectful.\n\nIt was a completely open source codebase and so their process was the exact same as someone that was an employee: here's the ticket with the information to do it, set up the environment, download all the code, get everything running. They gave me a few different tasks I could choose from, I could pick two, and if I completed them I would be compensated a fixed rate, which was $100 for each task. Which in terms of the time I spent on it, is still really cheap for them.\n\nIf candidates know they‚Äôre going to be paid for their work on a take-home, they‚Äôll be more likely to complete it as well.\nCompensating candidates is a clear gesture that shows you value their time and effort, that there‚Äôs more symmetry in the relationship. It also goes hand-in-hand with time: paying also forces a company to scope the take-home to a reasonable number of hours. So it's a forcing function for good behavior‚Äîif you can‚Äôt afford much, then don't make the take-home too long!\n\nResponses about how much companies should pay for take-home assignments were split.\n\nFixed amounts: Just over half of respondents (52%) suggested specific and reasonable fixed amounts, ranging from $50 to $500.\n\nHourly rates: The other almost half (47%) favored an hourly rate, with suggestions ranging from $50 an hour and upward (average of $217 an hour). Some suggested that the rate should correspond to the salary of the position being applied for, or be comparable to what an employee at that level and company would earn. As one user put it:\n\nMaybe just pay market?\n\nOne antipattern when it comes to comp is NOT having a set rate, asking the candidate to name their price, and thereby putting the candidate in a position where they feel like they need to negotiate. In this scenario, the candidate has to negotiate twice: once on the take-home and once on their actual comp, with the worry that negotiating too aggressively on the take-home might count them out‚Ä¶ or not aggressively enough anchoring the company to lower compensation down the line. No one needs these mind-games in an already stressful process. Just have a set rate, for god‚Äôs sake.\n\nSymbolic compensation: This is probably not the best option, but a handful of survey respondents (1%) did mention that a minimal symbolic compensation would do. While 1% is small, we found this interesting to include because, when we interviewed people, two of them mentioned this.\n\nI think any compensation at all has symbolic value. A $100 Amazon card would impress me. A $50 Amazon card and a company t-shirt would at least not insult me. It‚Äôs kind of a consolation prize to say, ‚ÄòNo hard feelings.‚Äô\n\nI feel like a couple meal vouchers would do it these days.\n\nOf these options, we‚Äôd recommend a reasonable fixed amount based on the task, and the actual time it‚Äôs supposed to take.And of course you know how long it takes because you had one of your engineers do it themselves, right? Right??\n\nLack of feedback was the primary reason our survey respondents said their experience with a given company was bad.Regardless of interview type, we‚Äôre alwayspro feedback, but feedback is especially important for take-homes, because in a way they ask more of a candidate. Offering constructive feedback, regardless of the hiring decision, respects the candidate's effort on the take-home.\n\nDespite the time and effort they invested in completing take-homes, many of our survey respondents said they received no feedback at all. This was seen as demoralizing, and it deterred candidates from applying to future opportunities at those companies.\n\nGetting rejected without having a chance to discuss the code with anyone is a terrible experience.\n\nIt is really discouraging spending a large amount of time to find out you are rejected without explanations.\n\nThey provided no feedback after submission, which made the whole effort feel unappreciated and one-sided.\n\nIncidentally, the main reason companies don‚Äôt give feedback is fear of getting sued. As it turns out,literally ZERO companies (at least in the US) have ever been sued by an engineerwho received constructive post-interview feedback.\n\nThanks toDan Fennessyfor all the behind-the-scenes work on this post.\n\nSome users told us they‚Äôre seeing take-homes more recently, likely a function of worsening market conditions‚Äîthe less leverage talent has, the more hoops companies can ask them to jump through.‚Ü©\n\nYou might have to do this soon anyway, in all your interviews, toward off against AI-driven cheating.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/why-engineers-dont-like-take-homes-and-how-companies-can-fix-them",
      "author": "",
      "user_id": ""
    },
    {
      "title": "The unwritten rules (till now) of negotiating with Meta",
      "content": "# The unwritten rules (till now) of negotiating with Meta\n\n## Meta basically has a monopoly on FAANG hiring right now\n\n## How Meta negotiates, given their effective monopoly on eng hiring\n\n## How to negotiate with Meta\n\n## Footnotes\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Don‚Äôt share anything with your recruiter\n\n### Make sure you have other offers\n\n### Slow-play team matching\n\n### Situations where slow-playing may bite you, and how to know the difference\n\n### Build rapport with every hiring manager you talk to\n\n### Actually negotiate (this is the easy part)\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Design WhatsApp\n\n### Integer Replacement\n\n### Lucky Numbers in a Matrix\n\n#### Related posts\n\n#### Stuff we write about\n\nIf you don't like reading, here's me presenting the contents of this blog post in a video. Pick your poison.\n\nEDIT: This post is based on stories from users who were interviewing for E4-E6 SWE and MLE roles at Meta. Other, more specialized roles may have different processes than what's described here.\n\nEDIT 2: As of Q1 2025, it looks like Meta is sometimes foregoing team matching in favor of driving candidates to their Monetization org (which apparently has a lot of open headcount). If this happens to you, after you pass the hiring committee, instead of entering team matching, your recruiter will tell you that you‚Äôve been assigned to this particular org and, if you proceed, you‚Äôll just get an offer. You won‚Äôt get to talk to your future manager, and you‚Äôll find out team details a week after you join. From what we know, it‚Äôs possible to insist on team matching instead, with the downside that it‚Äôll take an unknown amount of time rather than certainty.\n\nWhy does this matter?\n\nIf you‚Äôre looking to use your Meta offer primarily as leverage with other companies, this is a great thing because you‚Äôll get numbers quickly. If you‚Äôre seriously interested in Meta, then this could be good or bad and depends where you are in the process and how much you want to work on monetization versus other things/how much you want to meet your manager before you work for them.\n\nSo if you‚Äôre seriously interested in Meta, whether this is good or bad depends on where you are in the process. If you need them to move quickly, it‚Äôs great because you know you won‚Äôt be stuck in team matching. However, if you need them to slow down because you aren‚Äôt as far along with other companies or because you want to work in a different org, you may want to ask your recruiter to stick with the old team matching process. In our experience, it‚Äôs ok to ask this. Your recruiter may not tell you outright that that‚Äôs an option, but if you ask, they will probably do it. Of course, you may be stuck longer than you want. But at least then you will have more of a say in what you work on.\n\nAt interviewing.io, one of the services we offer our users is salary negotiation. Even though I‚Äôm the founder, I still do many of the sessions myself because they give me an invaluable insider‚Äôs perspective on what‚Äôs actually going on in the engineering market, what different companies‚Äô offers look like, how companies extend offers, what kinds of deadlines they give, and how much they go up in compensation, under what circumstances.\n\nAccess to this kind of data is great because it helps me make better business decisions. But sometimes I see questionable patterns of behavior among companies. Recently, I‚Äôve observed a string of practices at Meta that I find reprehensible, and that‚Äôs what this post is about. I‚Äôve seen the same practices with enough candidates, and across enough different titles and positions, that it‚Äôs become clear to me that they are not isolated incidents or a rogue recruiter‚Äôs doing but rather a consistent implementation of a deliberate strategy that comes from the top.\n\nI‚Äôm writing about this for two reasons. First, if you‚Äôre negotiating with Meta, you need to know how they operate and understand the unwritten rules of the game. If you do not know the rules, you will fail ‚Äî long before you even start negotiating.\n\nSecond, I‚Äôm hoping that someone at Meta sees this post and that maybe it‚Äôll spark an internal discussion about changing the rules.\n\nBy the way, if I‚Äôm wrong, I will gladly issue a retraction and a public apology. Please contact me if you‚Äôre a recruiter at Meta and find something incorrect in this post. My email isaline@interviewing.io.\n\nLastly, if you‚Äôre about to interview there or are interviewing there already, pleaseread our free, long-form guide to their interview process and questions.\n\nI mentioned above that we do salary negotiation, but our main business is mock interviews. We offer anonymous mock interviews in the style of a bunch of different companies (mostly FAANGs). This means we know how many people are practicing for interviews at Google vs. Meta vs. other FAANGs, and that lets us guess (pretty accurately) how much hiring is actually happening at these companies.\n\nYou can read in way more detail about how all the FAANGs are doing in ourrecent blog post where we made 2024 predictionsbased on our proprietary data. But while I was writing that post, I noticed something odd. Meta was hiring way more engineers than any of the other FAANGs. In fact, Meta hiring is up more than 10X since January of last year.You can see that more recently Amazon has picked up a bit, but it‚Äôs very recent and not enough to drive major change in other companies‚Äô behaviors (at least not yet). And, yes, Netflix is hiring too, but Meta‚Äôs eng team is more than 10X the size of Netflix‚Äôs, so in the absolute, Netflix‚Äôs hiring volume isn‚Äôt enough to balance Meta out. For all intents and purposes, Meta‚Äôs the only FAANG that‚Äôs really hiring at scale ‚Äî and they‚Äôre currently getting away with treating candidates really poorly as a result.\n\nHere‚Äôs how Meta runs their hiring process. These practices have been consistent across every negotiation client we‚Äôve had in the past 6 months or so.\n\nMeta‚Äôs hiring is centralized, which means that you enter one big interview process that‚Äôs completely divorced from which team you might end up on and you interview with people whom you might never work with again. If you do well, there will be a team matching component after you pass the onsite but before you get an offer1. With that in mind, here‚Äôs how they run their process, once you get the green light.\n\nBelow are the steps for negotiating with Meta in a hard climate where they have a monopoly on hiring. We hope that most of these won‚Äôt be necessary in the future. They are:\n\nWe wrote a whole post about how to avoid sharing information with your recruiter and why this is so vital. If you share where you‚Äôre interviewing or how far along you are, or if you start negotiating prematurely, the strategies below won‚Äôt work.\n\nPleaseread our post on not shooting yourself in the foot during negotiationsbefore you continue!\n\nYou should also be aware of a few tricks specific to Meta recruiters. If you're not forthcoming about where else you're interviewing, they may say a few sneaky things.\n\nFirst, they may say something like, \"Well, we just want to know where you're interviewing so we can intro you to others who interviewed at those companies but ultimately chose Meta.\" Don't fall for that early in the process. It's a trap to get information out of you. You can always ask for those intros later, when you're negotiating and it's the right time information about your other offers.\n\nThe other thing they do is fish, saying something like, \"Well, in case you're interviewing at {Google, Netflix, some other big company they don't want to lose candidates to}, just so you know, they move kind of slowly, so we may not be able to wait.\" There, the Meta recruiter's goal is to get you to say, \"Oh, no, don't worry, I'm not interviewing at Google!\"\n\nNow, you've lost leverage in their eyes because that's one less competitive company they might lose you to... and they'll be more confident about lowballing you later on.\n\nAs you may have guessed from reading the previous section, it‚Äôs critical to have other offers, and not just any offers but ones from top-tier companies who pay very competitively3.\n\nWe realize that saying ‚Äúhave other offers‚Äù doesn‚Äôt capture the blood, sweat, and tears that go into months of interview prep, applications, emails, recruiter calls, and interviews. We know it‚Äôs hard, but as you‚Äôll see, it makes a huge difference in your compensation.\n\nGetting those offers doesn‚Äôt start when you‚Äôve received your Meta offer. It starts months before. Make sure that you get enough initial conversations with other FAANGs, FAANG-adjacent companies, and late-stage sexy startups to end up with at least one other offer, ideally at least two. Depending on your interview performance, this might be anywhere from 4 to 10 initial conversations.4\n\nHaving your offers come in around the same time is critical forany negotiation, but it‚Äôs especially important with Meta because they take such a hard line ‚Äî without other offers, they will not meaningfully budge.\n\nObviously, you‚Äôll want to start your conversations with other companies well in advance of your Meta interviews and do everything you can to make sure they all come in at the same time. However, even with your best efforts, it‚Äôs not guaranteed that your timing will match up.Here‚Äôs how to make sure that your offers come in at the same time: slow-play Meta‚Äôs team-matching process.\n\nTeam matching is actually the part of your Meta journey where you have the most leverage and power. Why leverage? At this point, they know they want you, but they can‚Äôt yet hold an offer deadline over you. We‚Äôve already mentioned that once they make the offer, your recruiter is going to push very hard to have you accept, often giving you a deadline of something like two days. In your recruiter‚Äôs eyes, you‚Äôre a ticking time bomb, where for every day you don‚Äôt sign, the deal loses momentum, and your odds of signing drop off. Recruiters are also evaluated on how many candidates they close, so it‚Äôs in their interest to create a false sense of scarcity in order to rush you and to use high-pressure sales tactics to get you to seal the deal.\n\nAnd what power do you have? It turns out you can really control how long team matching takes, within reason. If you‚Äôre still wrapping phone screens with other companies, slow-playing is the best thing you can do. Here‚Äôs how to do it.\n\nWe‚Äôve recently heard that Meta is now insisting that hiring manager conversations happen in series, but even if Meta lets you talk to multiple hiring managers concurrently, try to serialize those conversations as much as possible. For instance, if you hear from your recruiter that you‚Äôre going to start team matching on a Monday, and they offer to set up some calls for Wednesday, ask to do the first call on a Friday and the next call the following Tuesday.\nWhen we advise our users to do this, we often get pushback because they‚Äôre worried that slowing things down will make them look disinterested/not serious. We promise you that‚Äôs not the case. The biggest risk you run when you slow-play team matching scheduling like this is losing the chance to work on a specific team. If you find that your recruiter has proposed what seems like the perfect team for you, you can and should prioritize doing that call as soon as possible.\n\nIn addition to serializing your hiring manager conversations, for each team, ask to talk to a few individual contributors on teams that you‚Äôre serious about. This isn‚Äôt just a stalling tactic. These are the people you‚Äôll be working closely with every day, and they‚Äôre the ones doing the job you may have in the future. They‚Äôre also less likely to do hard sells, and if you ask thoughtful questions, you‚Äôll learn a lot about what to expect. We‚Äôre always surprised by how few candidates ask to speak to their future peers, out of a mistaken concern that asking for too much will make them look disinterested or unengaged.\nJust like with hiring manager calls, if you need to slow things down, we recommend scheduling calls with your peers a few days apart.\n\nWe have seen two instances when our advice about slow-playing could backfire. You probably remember when companies started to freeze hiring aggressively in mid-2022 ‚Äî if you didn‚Äôt get matched before the ax came down, you were left out in the cold. Much more recently, we heard from some of our users that Meta put a pause on team matching for E4 roles (largely outside the Bay Area), and many candidates were stuck in a holding pattern (while Meta figured out headcount constraints, though it looks like it‚Äôs since been resolved, and picking back up in earnest. Slow-playing and then getting stuck is obviously an unfortunate situation, as is being on the wrong end of a hiring freeze, but these situations are rare, and in our humble opinion, not worth optimizing for ‚Äî in most cases, you will not be dealing with an impending freeze or stalled matching. If you‚Äôre unsure about team supply or the state of hiring, you can do two things:\n\nThere's one more situation where slow-playing may bite you. If you match with a team and really click well with the manager, to the point where you have your heart set on it, it may be wise to accept that team instead of trying to drag things out. We've heard of times where, even if the candidate asked the manager about open headcount and confirmed they didn't have to rush, the role got filled from under them (they were able to talk to other teams afterwards but missed the chance to be on that specific team). If a specific team feels irreplaceable to you and you'd be crushed if you didn't get it, then that may be more important than maximizing your negotiation.\n\nOutside of using the team-matching process to control your timeline, there is one other important tactical piece of advice: Do your best to build rapport with hiring managers.\n\nAs we said above, recruiters are trying to close the deal. That‚Äôs their job. Hiring managers, on the other hand, are trying to lay the groundwork for a good working relationship with you. As a result, their interests are much more aligned with yours. Of course, they still want to close you, but it‚Äôs not worth it to them to employ high-pressure tactics, and it‚Äôs not something they‚Äôre trained in or comfortable with (in fact, many of them hated these tactics when they were on the other end of it while looking for work)5.\n\nAs such, hiring managers will generally be a lot more transparent with you about how much time you actually have to make a decision, and their answers will likely be very different from the ones you get from recruiters.\n\nWe‚Äôve advised all of our Meta candidates to ask their prospective hiring managers about when they realistically have to make a decision by, and the differences between what the hiring manager has told them (‚ÄúTake your time; you have a few weeks at least.‚Äù) and what their recruiter has told them (‚ÄúWe‚Äôre talking to a lot of candidates for that team. To ensure your spot, you should make a decision in the next few days.‚Äù) are stark.\n\nThere‚Äôs simply no downside to building rapport with hiring managers. At worst, you make a professional connection. At best, you get a head start on a great working relationship with your new boss.\n\nOne practical note: Always ask your hiring manager for their email address in case you have more questions later. This way, if your recruiter starts telling you that you need to make a decision by Friday, you can ping your hiring manager, explain that you‚Äôre still thinking, and ask if it‚Äôs OK to take a few more days. Almost always they will say yes.\n\nIf you‚Äôve done everything else in this post, the negotiation is the easy part. By now, you‚Äôve wrapped up team matching, chosen a team, and have likely gotten an aggressive offer deadline.\n\nYou have also not shared any offer details till now. As we said at the beginning of this post, the success of your strategy hinges on the recruiter not being aware of the other companies you‚Äôre interviewing with. This will be the first time they find out about it, and that will put them on their proverbial back foot.\n\nTo respond to the offer, you can send an email6that looks something like the below. The details will differ, and how much you reveal about the other offers will vary, but here‚Äôs the general idea.\n\nHey [Recruiter name],\n\nThank you so much for the offer, for working with me throughout this process, and for all your help with team matching.  I wanted to share some details with you. I currently have offers from {Company 1}, {Company 2}, and {Company 3}.\n\n{Company 1} has offered me a significantly higher base salary of $220k. {Company 2} has a comparable base but has offered me significantly more equity: $500k. I know {Company 2} is a startup, but they‚Äôre late stage and handing out RSUs. Those RSUs are as valuable to me as public company equity.\n\nFinally, {Company 3} has thrown in a meaningful signing bonus, and their performance bonus is actually at 25%, not 15%.\n\nI‚Äôm very excited about the opportunity to work at Meta and about the team. {Insert some authentic reasons why you‚Äôre excited about the company, the team, your new boss, etc.} It‚Äôd be great to see a meaningful increase in compensation to make my decision easier.\n\nThank you, and I look forward to hearing from you.\n\nBy the way, this isn‚Äôt the only approach you can take, and with other companies, you might have better luck with theReverse Used Car Salesman. However, in our experience, if you don‚Äôt share offer details, your Meta recruiter will immediately ask you to share, so you might as well control the flow of information.\n\nIn the template above, I‚Äôve assumed that not all of your offers are stronger than Meta‚Äôs across the board, which is why I‚Äôve cherry-picked which pieces to share. Sometimes, if you‚Äôre lucky, you‚Äôll have multiple offers that have a higher base, more equity, and a higher signing bonus. In that case, it‚Äôs less of a game of skill ‚Äî just throw the numbers at them, and they‚Äôll exceed the other offers without much prompting.\n\nIf you run this play, your recruiter will apologize for low-balling you, blaming the ‚Äúcomputer‚Äù for giving them those numbers. Then, like clockwork, you will see a $50k to $150k jump in your offer (precisely how much depends on where your other offers are from and how strong they are).7\n\nNow, whether you take that offer is up to you.\n\nSome closing thoughts. I‚Äôm a capitalist. Meta‚Äôs behavior here is aggressively capitalistic, if short-sighted ‚Äì once other FAANGs start meaningfully hiring again, and Meta employees figure out that there‚Äôs a $150k comp differential between people with the same job title, they‚Äôre going to pay the piper and likely see a bunch of attrition. Ultimately, the market will correct these practices. However, I also believe that individuals have the right and duty to be as informed as possible and to wield whatever weapons in their arsenal to advocate for themselves, rather than waiting on the mercy of slow, indifferent market forces.\n\nAs such, we hope this post has given you some ammunition in your negotiations and helped reduce the information asymmetry between you and Meta, a huge, aggressive player with basically a monopoly on eng hiring at the moment. And we hope that if anyone from Meta is reading this, it‚Äôll spark some internal conversations about what‚Äôs right. And if they don‚Äôt, other FAANGs‚Äô recruiters will swoop in soon enough.\n\nWant to know if you‚Äôre ready to interview at Meta? Do anonymous mock interviews with real Meta interviewers, and see exactly where you stack up.\n\nHow team matching works changed fairly recently. In the past, you‚Äôd get an offer before you matched with a team and do a 6-week ‚Äúbootcamp‚Äù where you‚Äôd get up to speed on Meta‚Äôs tech stack, infrastructure, and systems, followed by a multi-week ‚Äúspeed dating‚Äù-esque team matching cycle. Bootcamp still exists, but now it's much shorter (2-4 weeks), and the focus is getting new engineers ramped up on generic tools. After that, new engineers continue to ramp up on their specific teams.‚Ü©\n\nWe‚Äôve recently heard that Meta may now be insisting that team matching conversations happen in serial, i.e., you can only do one at a time. However, this doesn‚Äôt meaningfully change our advice.‚Ü©\n\nYou might say, ‚ÄúAline, why can‚Äôt I just make up offers?‚Äù We could never, in good conscience, advise that. It‚Äôs unethical, and though I‚Äôd argue that while Meta‚Äôs negotiation practices are also unethical, that‚Äôs not the way to win. Outside of ethical considerations, while the risks of getting caught are low, they‚Äôre not zero. Lying about offers, in our mind, is the last refuge of the incompetent.‚Ü©\n\nThe advice in this post is orthogonal from your career goals and what you want to work on. This blog post is about navigating an unfair system filled with opaque rules while maximizing your cash. It is not about self-actualization, though we‚Äôd argue that creating the most optionality for yourself helps with self-actualization as well. You can also talk to smaller companies and use your big-co offers as leverage to increase your startup equity. There‚Äôs nothing wrong with that, but more detail on optionality and self-actualization is outside the scope of this post.‚Ü©\n\nOf course, some hiring managers will use high-pressure sales tactics or create false timelines to try to close you. But that‚Äôs the exception rather than the rule. You can decide if that‚Äôs something that you want to weigh when judging whether or not you want to work for them.‚Ü©\n\nWe strongly urge you to avoid negotiating over the phone and over text, whenever possible. Your recruiter does 5 of these calls a day. You might do one of these calls every few years. Do the hard part over email. It‚Äôs the best way to level the playing field.Read this postto learn how to avoid synchronous phone negotiations (just look for ‚Äúphone‚Äù).‚Ü©\n\nOne advanced maneuver is to pit all your other companies against each other and raise up their initial offers BEFORE talking to Meta. We‚Äôll likely write about how to run this play in a future post.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/how-to-negotiate-with-meta",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Are recruiters better than a coin flip at judging resumes? Here's the data.",
      "content": "# Are recruiters better than a coin flip at judging resumes? Here's the data.\n\n## The setup\n\n## Recruiters‚Äô resume judgments are just slightly better than a coin flip\n\n## Recruiters can‚Äôt agree on what a good candidate looks like\n\n## The most sought-after resume attributes\n\n## How do recruiters‚Äô stated reasons for rejecting candidates line up with actual rejection reasons?\n\n## Slowing down is associated with better decisions\n\n## Can AI do better?\n\n## Where does this leave us?\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Question #1: Would you interview this candidate?\n\n### Question #2: What is the likelihood this candidate will pass the technical interview?\n\n### Advice for candidates\n\n### Advice for recruiters\n\n### What this means for our industry\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Maximum Subarray\n\n### Partition to K Equal Sum Subsets\n\n### Find Peak Element in a 2D Array\n\n#### Related posts\n\n#### Stuff we write about\n\nThis post is a very exciting first for interviewing.io because it‚Äôs about a proper experiment run by a real, live academic research lab. If you‚Äôve been reading my work for the past decade, you know that I‚Äôve always been something of an armchair researcher. I ran some experiments before starting interviewing.io, and since then, my team and I havekept it up.\n\nOne of the experiments I ran before I founded interviewing.io was an attempt to figure out how good recruiters were at judging candidate quality based on resumes. I ran it 10 years ago and discovered that not only was everyone bad at judging resumes (about as accurate as flipping a coin),they all disagreed with each other about what a good candidate looked like.\n\nEven though these results were shocking at the time, the study had some serious limitations. First, I had no objective measures for which candidates were actually good. I was working as a recruiter at the time, so I knew whom I had been able to place, but that‚Äôs obviously not the be-all and end-all of engineering ability. Second, I had a non-representative sample of software engineers. Due to my brand, I had managed to attract a lot of excellent, non-traditional candidates ‚Äî engineers who were actually very good but didn‚Äôt look good on paper. These types of resumes are the hardest for recruiters to judge, and the data was full of them. Finally, my sample size wasn‚Äôt that big: I ended up with 716 data points in total, only about half of which came from recruiters (the rest came from engineers and hiring managers ‚Äî my original hypothesis was that they might be better at the task, but I was wrong‚Ä¶ everyone was bad at judging resumes).\n\nSo, now that I‚Äôm CEO of interviewing.io, with access to a lot more data, resources, and a team of excellent academics atLearning Collider, we decided to run this study again, but with a more rigorous treatment and better conditions, to see if we could replicate the results. This time, we focused just on recruiters, given that they‚Äôre most often the gatekeepers who decide which candidates get an interview.\n\nBelow are all the details, but here‚Äôs the TL;DR: we reproduced my results from 10 years ago! Our new study showed that recruiters were only a bit better than a coin flip at making value judgments, and they still all disagreed with each other about what a good candidate looks like.\n\nIn this piece, we also talk about:\n\nThe rest of this piece is co-authored by Peter Bergman, Tushar Kundu, and Kadeem Noray of Learning Collider.\n\nIn the real world, resumes (or LinkedIn profiles) are evaluated by recruiters in minutes ‚Äî even seconds ‚Äî and these evaluations are THE thing that determines who gets an interview.\n\nBut what do these word walls tell recruiters? How predictive are their evaluations of actual interview success? Ultimately, how good are recruiters at judging resumes?\n\nTo answer these questions, we designed a study approximating technical recruiters‚Äô decisions in the real world. We asked176 technical recruiters (both agency and in-house) to review and make judgments about 30 engineers‚Äô resumes each, just as they would in their current roles.\n\nThey answered two questions per resume:\n\nWe ended up with nearly 2,200 evaluations of over 1,000 resumes.\n\nThe resumes in this study belonged to interviewing.io users (with their consent) ‚Äî actual engineers currently on the job market.\n\nCollaborating on this study with interviewing.io is an ideal scenario, precisely because outcome data were available for comparison purposes. Each engineer in this study has completed multiple mock interviews on the platform. Performance in these interviews is quite predictive of performance in real interviews: top performers (roughly the top 5% of users) on interviewing.io are 3X more likely to pass technical interviews at top-tier companies than candidates from other sources. Even passing a single interview on interviewing.io is a strong predictor of outcomes; it's associated with a 32% increase in the chance of working at a FAANG company post-interview.\n\nOnce we had recruiters‚Äô evaluations of the resumes, we compared them to how those engineers actually performed on interviewing.io: skills scores, feedback from interviewers, and ultimately, whether they passed or failed their mock interviews.\n\nIn aggregate, recruiters in the study recommended 62% of candidates for an interview. But how did recruiter evaluations stack up against candidates‚Äô performance on the platform?\n\nWe calculated recruiter accuracy by treating each candidate‚Äôs first interview (pass/fail) as the truth, and recruiters‚Äô decision to interview as a prediction. It turns out that recruiters chose correctly 55% of the time, which is just slightly better than a coin flip.\n\nRecruiters predicted the likelihood that each candidate would pass the technical interview. In most hiring processes, the technical interview follows the recruiter call and determines whether candidates proceed to the onsite. Being able to accurately predict which candidates will succeed at this stage is important and should inform the decision about whether to interview the candidate or not.\n\nWhat we found most surprising is how far their predictions were from the truth:\n\nBelow is a graph that shows recruiter predictions vs. actual performance. The x-axis is the bucketed recruiter rating. In other words, the first point is all the candidates that recruiters assigned a 0-5% likelihood of passing. The y-axis is the average interviewing.io pass rate for those candidates. The red dotted line represents 100% accuracy ‚Äì in an ideal world, the higher a recruiter's ranking of a candidate, the higher their actual performance would be. The orange line represents reality ‚Äì as you can see, there isn‚Äôt much correspondence between how recruiters predicted candidates would perform and their actual performance.\n\nRecruiters‚Äô predictions below 40% underestimate these candidates by an average of 23 percentage points. Above 60%, they‚Äôre overestimating by an average of 20 percentage points.If this was predicting student performance, recruiters would be off by two full letter grades.\n\nClearly, there is lots of noise in resume evaluations. Were recruiters‚Äô noisy judgments at least consistent when reviewing the same resumes?\n\nNearly 500 resumes were evaluated by more than one recruiter. Based on a random selection of two evaluations per resume, the overall likelihood of two recruiters agreeing to either interview or not interview a given candidate was 64%.\n\nSince recruiters also guess the probability a candidate will pass the technical interview, we can compare how different these guesses are for a given candidate.The average differential between two randomly selected recruiters‚Äô evaluations of the same resume was 41 percentage points. So, let‚Äôs say one recruiter predicts a 30% probability the candidate would pass; another recruiter evaluating the same resume would predict, on average, a 71% probability of passing.\n\nTo further understand just how prevalent the disagreement is, we looked at the standard deviations for across-candidate evaluations and same-candidate evaluations:\n\nSo, when two recruiters are asked to judge the same candidate, their level of disagreement is nearly the same as if they evaluated two completely different candidates.\n\nDespite the noise and variability in the study‚Äôs resume evaluations, there were some characteristics that recruiters consistently favored: experience at a top-tier tech3company (FAANG or FAANG-adjacent) and URM (underrepresented minority) status (in tech, this means being Black or Hispanic).\n\nMost predictive for Question #1 (whether a recruiter would want to interview that candidate) was experience at a top company ‚Äî these candidates were 35% more likely to be picked. Black or Hispanic candidates are also associated with an increased likelihood a recruiter would interview a candidate ‚Äî by 21%.4\n\nWith Question #2 (how likely the candidate was to pass a technical interview), having a top company on your resume is associated with a 21% increase in the likelihood that recruiters believe the candidate will pass the interview. Compared to the actual pass rates, recruiters‚Äô predictions of FAANG candidates are generally accurate (average 4 percentage point overestimate).5Unlike the presence of a top company, URM status didn't appear to influence recruiter decisions here.\n\nSo, we know what recruiters tend to favor, whether they‚Äôd admit to it or not: 1) FAANG/FAANG-adjacent experience and 2) URM status. But what‚Äôs even more interesting than why a recruiter would say yes is why they would say no.\n\nWhen we asked recruiters to judge a resume, we also asked them WHY they made that decision.6Below are recruiters‚Äô stated reasons for rejecting candidates. As you can see, ‚Äúmissing skill‚Äù is the main reason by far, with ‚Äúno top firm‚Äù a distant third.\n\nSo, then, we wondered‚Ä¶ How do recruiters‚Äô stated reasons for rejecting candidates line up with reality? To figure that out, we analyzed the resumes that ended up in the rejected pile and looked at common traits.\n\nBelow is a graph of actual rejection reasons, based on our analysis. The main rejection reason isn‚Äôt ‚Äúmissing skill‚Äù ‚Äî it‚Äôs ‚Äúno top firm.‚Äù This is followed, somewhat surprisingly, but much less reliably (note the huge error bars), by having an MBA. ‚ÄúNo top school‚Äù and having a Master‚Äôs degree come in at third and fourth. Note that these top four rejection reasons are all based on a candidate‚Äôs background, NOT their skill set.\n\nAnother key piece of this study is time. In hiring settings, recruiters make decisions quickly. Moving stacks of candidates through the funnel gives little room to second-guess or even wait before determining whether or not to give a candidate the opportunity to interview.\n\nIn our study,the median time spent on resume evaluations was just 31 seconds. Broken down further by Question #1 ‚Äî whether or not the recruiter would interview them ‚Äî the median time spent was:\n\nGiven the weight placed on single variables (e.g., experience at a top firm), how quickly recruiters make judgments isn‚Äôt surprising. But might they be more accurate if they slowed down?It turns out that spending more time on resume evaluations, notably >45 seconds, is associated with more accurate predictions ‚Äî just spending 15 more seconds appears to increase accuracy by 34%.7It could be that encouraging recruiters to slow down might result in more accurate resume screening.\n\nAs a gaggle of technologists and data geeks, we tested whether algorithms could quiet the noise and inconsistencies in recruiters‚Äô predictions.\n\nWe trained two local, off-the-rack machine-learning models.8\n\nJust like human recruiters, the models were trained to predict which candidates would pass technical interviews. The training dataset was drawn from interviewing.io and included anonymized resume data (years of experience, whether they had worked at a top firm, and whether they had attended a top 10 school for either grad or undergrad), candidates‚Äô race and gender, and interview outcomes.9\n\nDespite the very limited types of data we input into both models, when presented with out-of-sample candidate profiles, both models made predictions more accurately than human recruiters.\n\nRandom Forest was somewhat more accurate than recruiters when predicting lower performing candidates. XGBoost, however, was more accurate across the board than both the Random Forest model AND recruiters.\n\nIn this section, when we say ‚Äúwe,‚Äù we are speaking as interviewing.io, not as the researchers involved in this study. Just FYI.\n\nAt interviewing.io, we routinely get requests from our users to add resume review to our list of offerings. So far, we have declined to build it. Why? Because we suspected that recruiters, regardless of what they say publicly, primarily hunt for name brands on your resume. Therefore, highlighting your skills or acquiring new skills is unlikely to make a big difference in your outcomes.\n\nWe are sad to see the numbers back up our intuition that it mostly is about brands.10As such, here‚Äôs an actionable piece of advice: maintain a healthy skepticism when recruiters advise you to grow your skill set. Acquiring new skills will very likely make you a better engineer. But it will very likely NOT increase your marketability.\n\nIf enhancing your skill set won‚Äôt help, what can you do to get in front of companies? We‚Äôre in the midst of a brutal market, the likes of which we haven‚Äôt seen since the dot-com crash in 2000. According to anecdotes shared in our Discord community, even engineering managers from FAANGs are getting something like a 10% response rate when they apply to companies online. If that‚Äôs true, what chance do the rest of us have?\n\nWe strongly encourage anyone looking for work in this market, especially if you come from a non-traditional background, to stop spending energy on applying online, full stop. Instead, reach out to hiring managers. The numbers will be on your side there, as relatively few candidates are targeting hiring managers directly. We plan to write a full blog post on how to do this kind of outreach well, but this CliffsNotes version will get you started:\n\nWe know that recruiting is a tough job, especially in the current climate, where there are more applicants than ever and fewer recruiters to parse through them. So, it rationally makes sense to us that a recruiter would spend no more than 30 seconds per resume and focus primarily on looking for top brands.\n\nWe hope, though, that this piece may have given a measure of pause about your approach, and we‚Äôd like to leave you with two actionable pieces of advice. First, if you do nothing else, please slow down. As you saw above,  taking just 15 extra seconds to read a resume could improve your accuracy by 34%.11\n\nOur second piece of advice is this. Freada Kapor Klein from Kapor Capital coined the term ‚Äúdistance traveled‚Äù more than two decades ago. It refers to what someone accomplished, in the context of where they started. For instance, Kapor Klein recommends that, in their admissions processes, universities should consider not just the number of AP tests a candidate has passed but the number of AP tests divided by the total number offered at their high school. For example, if an applicant took 5 AP tests and their school offered 27, that paints a very different picture from another applicant who also took 5 AP tests when that‚Äôs the total number offered at their school. Kapor Capital uses distance traveled as one of their metrics for determining which entrepreneurs to fund. One can easily apply this concept to hiring as well.\n\nTake a look at the resume below. \"John\" (name has been changed; scrubbed resume shared with permission) studied chemical engineering and worked his way into software engineering by starting as a service engineer focused on pen testing. In the meantime, he completed a bootcamp, attended the Bradfield School of Computer Science (a school dedicated to teaching computer science at a depth beyond what many university programs, and certainly most bootcamps, offer), and ended up with a senior title in just three years.\n\nJohn was consistently rated poorly by recruiters but is one of the top performers on interviewing.io.\n\nIt takes just a bit more time, so please spend a little longer reading resumes, and evaluate candidates‚Äô achievements in the context of where they came from. Think about the denominator. But don‚Äôt think for a moment that we recommend that you lower the bar ‚Äî absolutely not. On interviewing.io, we regularly see candidates like John objectively outperforming their FAANG counterparts.\n\nThe last time I did this research, I wrote about how being bad at judging resumes isn‚Äôt anything to be ashamed about and that comes down to the resume itself being a low-signal and not-very-useful document.\n\nI held that same opinion for the last decade (and even wrote arecent post about how AI can‚Äôt do recruiting)‚Ä¶ right up until we ran this study and successfully built two ML models that outperformed recruiters.\n\nSo, I stand corrected.\n\nAs you saw above, both models were limited ‚Äì they were looking at the same types of features that recruiters do when they quickly scan a resume, certainly fewer features than recruiters have access to. But, despite that, the AI models still outperformed humans. What happens then, if you can build a model that behaves like a recruiter who really slows down and reads everything? These results make me believe that resumes do carry some signal, and you can uncover it if you carefully read what people write about their jobs and themselves and also analyze how they write it. Unfortunately, this takes more time and effort to uncover than most human recruiters are able to devote. And, in retrospect, that‚Äôs a good task for AI. Though we haven‚Äôt built a model like that for this post, I‚Äôm optimistic that we may be able to do it in the future.\n\nAs I said in the AI piece I linked above, in order for AI to do useful recruiting work, rather than just perpetuating the biases that human recruiters hold, it needs a data set that contains some objective measure of performance. Most recruiting AI models today do one of three things: glorified keyword matching, training on what recruiters prefer (the outcome is whether a recruiter would want to talk to the candidate, NOT whether the candidate is good), or live on top of existing tools like ChatGPT (whichwe recently showed doesn‚Äôt perform very well and is biased against non-traditional candidates). These three approaches just result in the wrong thing being done, faster.\n\nI hope that, in the not too distant future, we can use AI to make less-biased decisions, using meaningful performance data. And I hope that this type of AI solution can get adoption among the recruiting community.\n\nParticipating technical recruiters were paid a base rate and then received additional $$ for each accurate prediction.‚Ü©\n\nDifferent roles have different requirements. To correct for that, we asked each candidate to specify which eng role they were applying for: Software Engineer (back-end or full-stack), Mobile Engineer, Front-end Engineer, ML Engineer, Data Engineer, or Engineering Manager. Then we prompted recruiters to evaluate them specifically for that role. If no role was specified by the candidate, the default role to evaluate for was Software Engineer (back-end or full-stack).‚Ü©\n\nTop firms = Airbnb, Amazon, Anthropic, AWS, Apple, Asana, Atlassian, Bloomberg LP, Checkr, Coinbase, Coursera, Cruise, Dropbox, Etsy, Facebook, Flexport, GitHub, Google, Gusto, HashiCorp, Instacart, Instagram, Jane Street, Jump Trading, Khan Academy, LinkedIn, Lyft, Medium, Microsoft, Mozilla, Netflix, Oculus, OpenAI, Palantir, Peloton, Pinterest, Postmates, Quora, Reddit, Robinhood, Roblox, Salesforce, Segment, Slack, Snap, Snowflake, SpaceX, Spotify, Square, Stripe, Tesla, Thumbtack, TikTok, Twilio, Twitch, Twitter, Two Sigma, Uber, Udemy, Waymo, Whatsapp, Yelp, and Zoom.‚Ü©\n\nWe corrected by FAANG & FAANG-adjacent experience (and all of our other variables) before making this statement, i.e., the effect existed for engineers from underrepresented backgrounds who did not have FAANG/FAANG-adjacent companies on their resumes. We expect that recruiters favor underrepresented minority candidates because of guidelines from their employers to focus on sourcing these types of candidates, as part of DEI initiatives. Discussion about the magnitude of this effect and its implications is out of scope of this piece.‚Ü©\n\nInterestingly, recruiters might penalize, for example, alternative education. Candidates with only alternative education pathways post-high school ‚Äî coding bootcamps or digital certifications ‚Äî appeared to be penalized by recruiters in this study. However, with limited observations (n=11), it‚Äôs inconclusive without further study.‚Ü©\n\nThat field was optional, so most of the reasons recruiters provided were in cases when they said no ‚Äî presumably because the reasons for saying yes may have seemed self-evident.‚Ü©\n\nIt‚Äôs not that recruiters who generally take their time make more accurate judgements. Any recruiter slowing down might make them better at judging resumes!‚Ü©\n\nIt‚Äôs important to stress that neither algorithm was custom-built. The models, one using a Random Forest algorithm and the other an XGBoost algorithm, are distinct but interrelated approaches akin toDecision Tree algorithms. Decision trees sort data into groups based on features. Random forest algorithms combine multiple decision trees to improve predictions. XGBoost builds multiple decision trees one after another, with each new tree focusing on prediction errors from the previous trees.‚Ü©\n\nTraining data excluded data in this study. We take user privacy very seriously, and we want to stress that all models were local and anonymized and that no data in this study was shared with cloud LLMs.‚Ü©\n\nTo see a particularly egregious example of recruiters favoring brands over substance, take a close look atthis fake resume that got a bunch of recruiter responses.And this one too.‚Ü©\n\nWe haven‚Äôt proven causality here, but when we just scoped our analysis to the same person, it appeared that taking more time did help (in other words, it‚Äôs not just that recruiters who spend more time usually are more accurate; it‚Äôs the added time). Still, this is something that merits more work, and we'll try to investigate it causally in the future.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/are-recruiters-better-than-a-coin-flip-at-judging-resumes",
      "author": "",
      "user_id": ""
    },
    {
      "title": "How to sabotage your salary negotiations efforts before you even start",
      "content": "# How to sabotage your salary negotiations efforts before you even start\n\n## Recruiters are not your friend, and they don‚Äôt work for you\n\n## What negotiation is and what it‚Äôs not\n\n## Mistake #1: Revealing information before you‚Äôre ready to negotiate\n\n## Mistake #2: Premature negotiation\n\n## How to handle recruitercalls:‚Äúpassive information gathering‚Äù mode\n\n## Exactly what to say\n\n## Conclusion\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Third party recruiters\n\n### In-house recruiters\n\n### Example #1: You‚Äôre interviewing at Google, Meta, and two startups\n\n### Example #2: You‚Äôre interviewing at one company and are also up for a promotion\n\n### Example #1 revisited: You're interviewing at Google, Meta, and two startups\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Shuffle String\n\n### Subarray Sum Equals K\n\n### Partition to K Equal Sum Subsets\n\n#### Related posts\n\n#### Stuff we write about\n\nNote: If you‚Äôd like a practical primer on negotiation, read myprevious post on negotiation first‚Äî it tells you exactly what to say in a bunch of situations. This post is longer and more academic, but of course I include some practical tips and teach you what to say in a few situations, as well.\n\nAt interviewing.io, we‚Äôve coached hundreds of people through salary negotiation. We‚Äôre good at it ‚Äî our average user gets $50k more in cash, and we have a 94% success rate.\n\nHaving done this a lot, we‚Äôve seen our users make the same two mistakes, over and over, BEFORE they start working with us. These mistakes are costly and make it harder for us to do our jobs. Our advice is applicable to everyone, but I wrote this post primarily to share with interviewing.io‚Äôs user base, so that future clients of our negotiation service don‚Äôt shoot themselves in the foot.\n\nThese are the two things youmustavoid. Both involve how you talk to recruiters at the start of your job search, way before there‚Äôs an offer:\n\nIn this post, I‚Äôll explain why these two mistakes routinely sabotage salary negotiation efforts and what to say to recruiters instead. In a nutshell, if you can just be in ‚Äúpassive information gathering‚Äù mode (more on that later) for most of your recruiter interactions, you‚Äôll be golden. It‚Äôs hard to not to share info about your job search with your recruiter, especially as you build more rapport with them, but we‚Äôll tell you exactly what to say instead.\n\nBefore we get into all of that, I want to go over two foundational things about negotiation.\n\n‚ÄúIt is difficult to get a man to understand something when his salary depends on his not understanding it.‚Äù-Upton Sinclair\n\nI used to be a recruiter. I ran my own agency, and I also worked in-house before starting interviewing.io. That means that I‚Äôve had tostruggle with the tangled incentive structure that comes with being a recruiter(see the section called ‚ÄúYou should write down your principles‚Äù). There‚Äôs always a tension ‚Äî recruiters are, by and large, good human beings who genuinely want to help their candidates, but they also have an employer they‚Äôre beholden to, as well as a comp/bonus structure that rewards certain behaviors, some of which run counter to candidates‚Äô best interests.\n\nThere‚Äôs some distinction between in-house recruiters and third-party recruiters (recruiters who work for an agency that does placement, rather than a specific company that‚Äôs hiring engineers).\n\nMy general policy with third-party recruiters is to not tell them ANYTHING and to always deal directly with the companies they introduce you, once you establish a point of contact there. You should assume that anything you tell your recruiter is going to get back to every company you‚Äôre working with. Why? Because their primary objective is to place your butt in the seat of one of the companies they‚Äôre working with, and they will do whatever they need to do to make the deal happen. Often, those things will run counter to your interests.\n\nA big misconception that many candidates labor under is the idea that because third-party recruiters get paid every time they make a placement, their interests are fundamentally aligned. At a high level, this is kind of true, but once you dig into the details you'll see a lot of nuance.\n\nA recruiter, depending on market conditions, gets anywhere from 8%-25% of the candidate‚Äôs base salary when they make a placement. In the current climate, it‚Äôs around 10%. However, that cut is going to the recruiting agency as a whole rather than to the individual recruiter ‚Äî you will almost always end up working with large agencies rather than a sole-proprietor shop where the owner gets to take all of it home.\n\nLet's say that you get an offer with a base salary of $150,000. You talk to your third-party recruiter and tell them that you would like more money. The recruiter may go to the hiring manager and try to advocate for you, but they're not going to push very hard because the incremental difference in their cut is going to be pretty small and to them the thing that matters most is getting butts in seats. After all, they're evaluated on the number of hires they make, first and foremost, independent of comp. Understanding that, let's do the math anyway. Say that they‚Äôre able to risk closing the deal and get you $165k. Before, the agency would have gotten paid $15k. Now the agency gets paid $16.5k. That incremental $1.5k isn‚Äôt worth risking a deal over (even a few thousand dollars would not justify jeopardizing the deal). On top of that, the individual recruiter is only going to maybe get a few hundred dollars total from that increase. So for them the difference really isn‚Äôt worth it.Third party recruiters are incentivized to get the deal done, not to risk the deal by negotiating hard for you.\n\nMoreover, because they‚Äôre incentivized to get the deal done, you should assume that your recruiter will share anything you share with them with the company or companies they‚Äôve introduced you to. If you tell them that a company is your first choice and that you‚Äôre tempted to accept, they will likely share that with the company and may even recommend that they not raise your comp, since you‚Äôre already so enthusiastic. If you share that you‚Äôre not very interested in a company, and the recruiter has other candidates they‚Äôre presenting, they will prioritize those candidates‚Äô experience over yours and will possibly tell the company not to invest in you as hard.\n\nWhat about in-house recruiters? In-house recruiters may or may not get a bonus for hires that happen on their watch; it depends on the company. But if they do, that bonus is generally NOT tied to your compensation, and in some cases, they may get a bigger bonus if they‚Äôre able to negotiate you down. At big companies, in particular, in-house recruiters follow a playbook. They‚Äôre trained to make offers within specific bands, and they‚Äôre trained to mobilize such that they don‚Äôt lose candidates to other big companies ‚Äî if you wave a Facebook counteroffer in front of Google, they will act. If you tell them you‚Äôre interviewing at a startup, they will not, because they know that startups don‚Äôt pay as much. They‚Äôre actually evaluated on how well they follow the playbook. Because of that, there is no reason to assume that their incentives align with yours. They‚Äôre incentivized, first and foremost, to follow the rules their head of department sets for them. This is true for how they evaluate candidates, who they let through, and how they read resumes. And it‚Äôs definitely true for how they negotiate.\n\nIf you‚Äôre interested in peeking behind the curtain on how recruiters think, I interviewed three of the best ones in the industry recently. You can watch that below:\n\nProbably because of bad books and airplane magazine ads (for those of you old enough to remember those), people often think that negotiation is all about saying the right thing, or how firm your handshake is, or any other amount of silly nonsense.The reality is that negotiation is all about preparation and leverage.\n\nDon't forget to prepare for your technical interviews too. Sign up today for anonymous mocks with senior engineers from top companies.\n\nPreparation and leverage means doing the work to make sure that you have multiple offers, that all your offers come in at the same time, and that you don‚Äôt tip your hand too early. Laying this foundation is 80% of the work. You‚Äôll need to slow some companies down, speed some companies up, and hold off questions from recruiters until you‚Äôre ready to negotiate, and not before. If you do this right, the actual negotiation part will be easy and almost a foregone conclusion.\n\nIs it possible to negotiate when you don‚Äôt have multiple offers and when you haven‚Äôt done the foundational work? Sure, it is, and we‚Äôve sometimes had success with our users doing that. But it‚Äôs much harder, and the ceiling on how much more money you can get is lower.\n\nWith all that out the way, let‚Äôs talk about how the two biggest mistakes people make and how to not make them!\n\nYou‚Äôve probably never been arrested, but if you‚Äôre like me, you‚Äôve watched a lot of police procedurals on TV. You know the bit where they read the suspect their Miranda rights? They start like this:\n\nYou have the right to remain silent. Anything you say can and will be used against you in a court of law‚Ä¶\n\nTalking to recruiters is exactly the same, and one of the biggest mistakes we see our users make is sharing information too early. This is generally the only mistake we can‚Äôt walk back ‚Äî once you share information, you can‚Äôt undo it, and sharing information actually has no upside, only downside. When you‚Äôre ready to negotiate, you‚Äôre doing so deliberately because you alreadyknowthe state of the world, and you‚Äôre choosing to reveal the parts that set you up for success. Before that, you‚Äôre just revealing stuff that can be used against you.\n\nSpecifically, do not share with recruiters anything about your salary history (though it‚Äôs illegal in many states to ask this directly, there are indirect ways of asking, and many still do), your salary expectations, where else you‚Äôre interviewing, and how far along in the process you are with other companies. In short, don‚Äôt share any information about money or other interviews.\n\nThe main question recruiters ask up front about money is: ‚ÄúWhat are your compensation expectations?‚Äù They claim that it‚Äôs because they want to make sure that you‚Äôre not so far off in your expectations that interviewing with that company would be a waste of time. This is a nonsense reason ‚Äîvery fewcompanies pay so much below market that it would be a nonstarter. Those companies know who they are, and they know to give you a heads up that they pay below market. Moreover, with the recent advent of companies sharing salary bands, you‚Äôll have some idea if they're grossly below market before you interview. The real reason recruiters ask about compensation expectations is so that they can use it against you later in negotiations.\n\nAs such, if you answer this question with a number, you set an artificial ceiling on your offer. Do not even utter a single number to a recruiter until you‚Äôre ready to bargain. Do not go on levels.fyi and comment on the ranges listed for your level, even if you‚Äôre currently underpaid and an average offer from them would be life changing.Do not say a number first ‚Äî ever.\n\nYou can see exactly what to say when you get asked about compensation expectations in the section called ‚ÄúHow to handle recruiter calls‚Äù below.\n\nThe most obvious way to lose leverage is revealing information about money. The other way to lose leverage is by sharing information about where else you‚Äôre interviewing. If you share this information, you risk prematurely scaring off smaller companies because they don‚Äôt think they can win in a bidding war with FAANG. You also risk cornering yourself into a situation where the company knows your options are limited, and they might be inclined to lowball you as a result. Finally, you risk getting an exploding offer to try to force you to make a decision before you‚Äôre ready.\n\nBelow are some examples that I hope will drive these points home.\n\nLet‚Äôs say that you‚Äôre currently interviewing at Google, Meta, and two startups (let‚Äôs call them A and B). You‚Äôre at the onsite stage with Google, you‚Äôre doing technical phone screens at both startups, and you‚Äôre just doing your first recruiter call with Meta. This is actually a very strong position to be in!\n\nOf course, your Meta recruiter asks you about your comp expectations and where else you‚Äôre interviewing.\n\nIf you reveal your comp expectations, it will be hard to walk them back:\n\nIf you reveal that you‚Äôre at the onsite stage with Google and talking to some startups, here's what will happen:\n\nThough you started in a strong position with multiple interviews, including at companies that are known to pay well, you‚Äôve now weakened that position by sharing details.\n\nHere‚Äôs another thing that could happen in this scenario. Let‚Äôs say that it‚Äôs the same set of companies as above, but this time you‚Äôre talking to the recruiter from startup A. The recruiter asks you where else you‚Äôre interviewing.\n\nIf you mention that you‚Äôre interviewing at both Google and Meta, they might get spooked.\n\nHere‚Äôs a different example. Let‚Äôs say that you work at a startup, and you‚Äôre up for a promotion soon. You figured it‚Äôd make sense to see what‚Äôs out there as well, so you‚Äôve started interviewing with another startup.\n\nYour recruiter asks you in your first call about where else you‚Äôre interviewing and what your comp expectations are. You may be tempted to mention that you‚Äôre up for a promotion because that feels like it‚Äôll give you leverage ‚Äî if you get a promotion, the startup will have to work harder to entice you to leave, after all. Not so fast!\n\nIf you mention that you‚Äôre up for a promotion:\n\nIf you mention that you‚Äôre not interviewing anywhere else, that‚Äôs just a giveaway that you have no leverage:\n\nThe details may differ in your case, but the fundamental mechanics are the same. When you reveal information before you know what hand you‚Äôve been dealt, it can only hurt you. I‚Äôm struggling to think of a scenario where revealing something has been beneficial.\n\nI suppose the one exception to revealing information is this: Sometimes it can be useful to give your recruiter a rough estimate for when you‚Äôll be collecting offers, e.g., ‚ÄúI‚Äôve just started interviewing. I expect to get through all my interviews and onsites in the next 6 weeks and start collecting offers 2 months from now. Does that timeline work for you?‚Äù\n\nThis technique can be helpful for aligning expectations up front and then keeping recruiters off your back, as they won‚Äôt need to chronically text you to make sure you haven‚Äôt taken another offer yet (we‚Äôll talk more about texting with recruiters in the next section). But note that even in this example, we‚Äôre not actually revealing any information about where you‚Äôre interviewing, how long it‚Äôs taking, or compensation. You‚Äôre just setting a timeline based onhypotheticalswithout giving out any details that can be used against you later. When you share the actual timeline you‚Äôre working with, you no longer control the timing of your job search, and a huge part of negotiation is controlling timing so you can make all your offers come in at the same time.\n\n‚ÄúDon't fire until you see the whites of their eyes!‚Äù-Unknown officer at the Battle of Bunker Hill\n\nJust like not revealing information too early, you also want to avoid negotiating too early. They‚Äôre two sides of the same coin.\n\nThink of it like a hand of cards. At the beginning, you have no idea what you‚Äôre going to draw. The longer you wait to negotiate, assuming you‚Äôve timed things correctly, the more information you have. Then, when you‚Äôre ready to negotiate, you can look at your hand and selectively share information that puts you in the strongest position. For instance, if you have a high base salary from one company, a great equity package from a public company, and a signing bonus from a third company, you can strategically share those portions of the offers without sharing the weaker parts. Each negotiation is different, and it‚Äôs hard to give catch-all advice, but that‚Äôs generally the situation you should set yourself up to be in.\n\nWith that in mind, I‚Äôm a firm believer in negotiating when you‚Äôre ready and not before. Until you know what else is on the table, it‚Äôs really hard to 1) have the bravado that comes with actually having multiple offers (this is possible to fake, but trust me, it‚Äôs hard) and 2) negotiate effectively ‚Äî you will never know as well as your recruiter what salary bands are like, what market comp is, and so on. They do this all day. This may be your first or fifth time doing it, but there‚Äôs massive experience and information asymmetry. There are two ways to combat this power imbalance: have as many of your interactions be asynchronous as possible (we discussed that earlier) and do everything you can to negotiate when you‚Äôre at the point of maximum information, and not before. Daniel Biales, one of our former negotiation clients,explained the latter really well.\n\nWhen I received a low offer, my first inclination was to start the negotiating process. Aline helped me to realize that this was not the best course of action. The problem with this approach is that I wanted to start negotiating before receiving my highest offer. If I negotiated an increase then, I would have had to renegotiate when I received the higher offer. This will cause negotiating fatigue for you and the company. They will be less likely to negotiate a second time because they don‚Äôt know how many times you will ask them for more. First, focus on strategies to draw out your decision. Then, when you have all your offers, start negotiating. There may be a couple of back and forth communications, but they will be over a short time span rather than drawn out.\n\nLet‚Äôs review our first example again. Imagine that you‚Äôre interviewing at Google, Meta, and two startups, A and B, just like before. Startup A makes you an offer: $160k base, 0.1% of the company in options over four years, no signing bonus. You react to it and say that you were hoping for a signing bonus. The recruiter comes back with a $10k signing bonus quickly and pressures you to make a decision, saying that they have other candidates waiting.\n\nBy starting to negotiate, you accelerated their timeline, and this is going to make it hard to go back and ask for more signing bonus.\n\nYou try to stall, and then a few days later, Google makes you an offer that includes a $25k signing bonus. You‚Äôre still excited about the startup for reasons other than compensation, but now you have to go back to them and say that you actually got a $25k signing bonus at Google. They are unlikely to move again.\n\nSo, don‚Äôt negotiate until you‚Äôre ready. It‚Äôs hard to walk things back.\n\nThat doesn‚Äôt mean it‚Äôs not possible to negotiate in stages and gradually start bringing up all your offers. In my experience, however, this is a much more difficult maneuver, takes way more experience, is much more stressful for the candidate, and often ends up with the same results as laying a solid foundation and just negotiating once at the end.\n\nSo what do you say when you get asked pointed questions by your recruiter about your comp expectations or where you‚Äôre interviewing? And how do you delay negotiation until you‚Äôre ready?\n\nUntil you‚Äôre ready to negotiate, your default mode should be ‚Äúpassive information gathering.‚Äù This means that you listen rather than talk. I coach all of our negotiation clients to be in this mode when they get on a call with a recruiter.\n\nIn all the snippets below, you‚Äôll notice that they end with the same sentence:I promise not to accept other offers until I have a chance to discuss them with you.\n\nThis is deliberate, and it‚Äôs there because it‚Äôs disarming. Fundamentally, recruiters ask you all of these questions because they don‚Äôt want to lose out on you and have you go to another company. If you can speak to that worry head-on, there‚Äôs not much they can say back.\n\nFor questions about comp expectations at the beginning of the process:At this point, I don‚Äôt feel equipped to throw out a number because I‚Äôd like to find out more about the opportunity first ‚Äì right now, I simply don‚Äôt have the data to be able to say something concrete. If you end up making me an offer, I would be more than happy to iterate on it if needed and figure out something that works. I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor questions about comp expectations at the end of the process:It sounds like there‚Äôs an offer coming, and I‚Äôm really excited about it. I‚Äôm not sure exactly what number I‚Äôm looking for, but if you‚Äôd be able to share what an offer package might look like, then I will gladly iterate on it with you if needed and figure out something that works. I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor questions about where else you‚Äôre interviewing at the beginning of the process:I‚Äôm currently speaking with a few other companies and am at various stages with them. I‚Äôll let you know if I get to the point where I have an exploding offer, and I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor questions about where else you‚Äôre interviewing at the end of the process:I‚Äôm wrapping things up with a few companies and in process with a few more. I promise to keep you in the loop, and I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor when a recruiter provides you a salary range and asks you to comment on it, at the beginning of the process:Thank you for sharing that with me. Right now I don‚Äôt know enough about the opportunity to value it concretely, and I honestly haven't done my market research. If you end up making me an offer, I would be more than happy to iterate on it if needed and figure out something that works. I promise not to accept other offers until I have a chance to discuss them with you.\n\nFor when a recruiter provides you a salary range and asks you to comment on it, at the end of the process:Thank you for sharing that with me. I haven't done my research, so I am unable to comment on that range. However, if you do make me an offer, I promise to iterate on it if needed and figure out something that works. I promise not to accept other offers until I have a chance to discuss them with you.\n\nI said it in the beginning, and I‚Äôll say it again. Negotiation isn‚Äôt about saying the right thing. It‚Äôs about laying a foundation: not revealing anything until you‚Äôre ready to negotiate, not negotiating too early, and making sure that you‚Äôve set yourself up to have multiple offers.\n\nThen, once those offers come in, you swoop in with sharp precision, negotiate once (possibly with just your top choice company), and be done with it.\n\nIf you‚Äôve set yourself up for success, done the foundational work, and haven‚Äôt made the mistakes in this post, the negotiation will feel like a foregone conclusion.\n\nIf you need some hands-on help navigating salary negotiation,sign up for our salary negotiation package. You don't pay anything unless you get more, and we‚Äôll be with you every step of the way, for every recruiter call, every email you need ghostwritten, and every strategy discussion. Unlimited sessions, unlimited help, whatever we need to do to get you results.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/sabotage-salary-negotiation-before-even-start",
      "author": "",
      "user_id": ""
    },
    {
      "title": "How to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.",
      "content": "# How to get in the door at top companies: cold outreach to hiring managers. Part 2 of 2.\n\n## Prerequisites/tooling\n\n## Treat your job search like a sales funnel\n\n## What to actually do\n\n## Two templates for you to use\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Look up their email addresses\n\n### Write succinct, highly personalized emails\n\n### Template #1: Use this template if your target has an online presence\n\n### Template #2: Use this template if you don‚Äôt have anything except a LinkedIn profile for your target\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Reverse Integer\n\n### Confusing Number\n\n### Infinite Binary Print\n\n#### Finding common ground\n\n#### Selling yourself\n\n#### Accomplishments\n\n#### Social proof\n\n#### Formulating a strong call to action\n\n#### Related posts\n\n#### Stuff we write about\n\nInpart 1 of this post, we talked about which channels are most effective for getting in the door and did an analysis of those channels along two axes: effectiveness and how much control you actually have. Here‚Äôs a quick summary.\n\nIn the quadrant above, you can see that while getting contacted by an in-house recruiter is very effective, whether you get contacted or not is largely out of your hands. The channel that maximizes both effectiveness and control is cold outreach to hiring managers (not recruiters!) ‚Äúdone right‚Äù. What does ‚Äúdone right‚Äù mean? That‚Äôs what we‚Äôll talk about in this post (part 2 of 2). Most people do this type of outreach incorrectly. Here, we‚Äôll get very tactical and tell you exactly what to say and do to reach out to hiring managers at the companies you‚Äôre interested in and actually get responses.\n\nHere‚Äôs our recommended, hyper-practical approach.\n\nIf you‚Äôre an engineer, chances are you haven‚Äôt ever done sales (maybe you had a job in high school selling Cutco knives or magazines, in which case what we‚Äôre about to say will resonate). But if you do sales for any appreciable amount of time, you‚Äôll start thinking about everything in life as a funnel.\n\nFunnels are wide at the top and narrow at the bottom. That‚Äôs why they‚Äôre such an apt metaphor for the sales process ‚Äî you do a lot of outreach, and you don‚Äôt get many responses. Of the responses you do get, relatively few will do the thing you want them to do. And even fewer will ultimately ‚Äúclose‚Äù (aka, buying ‚Äî or, in this case, hiring).\n\nIn your engineering career, you‚Äôve intellectually mastered many abstract concepts that are much more complex than a funnel. Despite its simplicity, however, the funnel is one of the hardest concepts to internalize emotionally, especially for people who are used to having control over outcomes. When you write code fornhours, you can expect that you will buildmfeatures.\n\nIn sales though, you do a lot of work, very little of it will pan out, and when it does pan out, it can feel almost random; an impersonal, mediocre email gets a response while your beautifully targeted email is met with deafening silence.\n\nAnd then there‚Äôs rejection. When you apply to jobs online and don‚Äôt hear back, it stings, but the sting is softened by the possibility that a human never even saw your application. You‚Äôre not reaching out to people when you apply online; you‚Äôre dealing with a bureaucratic machine.\n\nOn the other hand, when you email a real human and they don‚Äôt respond, that hurts: you put yourself out there, someone made a value judgment about you, and you lost.\n\nThe good news is that, after a while, the pain lessens, and you build up some useful emotional calluses and acquire the thousand-yard stare of someone who‚Äôs been rejected a million times for a million reasons, ranging from soul-crushingly legitimate to incontrovertibly random.Sadly, there‚Äôs no shortcut. You‚Äôve got to do the reps, you‚Äôve got to get the rejections, and you‚Äôve got to pick yourself up again. You get used to it, and then it doesn‚Äôt hurt as much, because experience has taught you that if you keep going, you will eventually get to a yes.\n\nFirst, come up with a target list of companies.How to do that is out of scope for this post, but we may write about it in the future. For now, we‚Äôll assume you have a list.\n\nOnce you have your list of companies, use LinkedIn Sales Navigator to find hiring managers at those companies (or founders or directors or VPs, as above). Below is an example query where we look for Google hiring managers.\n\nYou might think that Google is so big that sifting through all their various hiring managers will be intractable. Fortunately, you can whittle down the list to a pretty manageable size by applying some filters.\n\nHere are our filters:\n\nOnce you have your list, put their LinkedIn URLs into a spreadsheet. Then, do a pass through your targets‚Äô profiles and see if any of them link to personal websites, social media accounts, blogs, or anything else that will help you find common ground with them.Add any useful links in your spreadsheet because we‚Äôll be mining them when we actually write our emails.\n\nOnce you have your list of LinkedIn URLs, use a tool like RocketReach to look up their emails.\n\nWhy not reach out on LinkedIn? While recruiters live on LinkedIn, managers generally do not. Possibly, they don't even like or check LinkedIn much. They live in their emails, so that's where you want to target them.\n\nRocketReach is a nice tool for email discovery because 1) it takes LinkedIn URLs as inputs and 2) its email database is generally up-to-date and correct.1\n\nIf RocketReach fails or you don't wish to pay for it, you might just be able to guess their email address, as email addresses tend to follow common forms:aline@interviewing.io(my actual email address),alerner@interviewing.io, oraline.lerner@interviewing.io.\n\nWhere possible, contact managers via their work email address.2In some cases, you won‚Äôt be able to find their work email, in which case it‚Äôs acceptable to fall back to their personal email.\n\nNext, compose a fairly personalized, yet short, email.All too often, candidates write a long, generic cover letter that‚Äôs obviously been sent to a ton of people. I get many emails that look like this:\n\nDon‚Äôt do this either! There is nothing here about why this candidate is a good fit for interviewing.io, and the bullets aren‚Äôt compelling enough on their own. Note that this particular email is from a marketer, not an engineer, but the anti-patterns are the same.\n\nEmails like the above are impersonal, but worst of all, they have a poor signal-to-noise ratio ‚Äî I want to find a reason to say yes and to invest my valuable time into this person. But they‚Äôre not giving me one, and they‚Äôre making me work for it in the process.\n\nMore broadly, if you want someone to go out on a limb for you, make it dead simple for them to justify expending their social/political capital on you. Hiring managers, as a rule, want to help. Make it a no-brainer for them.\n\nThere are three components to a great cold email:\n\nNot every cold email will have (1) because you won‚Äôt always be able to find common ground with everyone ‚Äî there‚Äôs simply not enough information out there about some targets to be able to craft a compelling narrative that‚Äôs highly personalized to them.\n\nBut every cold email you write should have (2). It is your job to sell yourself quickly and succinctly. You want your target to feel like they‚Äôd be an idiot to pass up the chance to talk to you.\n\nThe email below is personal, succinct, and finds common ground. Not only that, but it conveniently finds common ground thatbenefits the candidate(a soft-spot for non-traditional candidates, like himself!).\n\nTo find common ground, reference something your target cares about. Then either show them that you care about it too or that helping you would fit into their worldview and further that cause.\n\nAs we mentioned above, finding common ground may be tough because there might not be enough information available about your target, but it‚Äôs important to do the work before you give up on this route ‚Äî finding common ground is the tactic that‚Äôs going to get you the highest response rates.\n\nHere are some examples of great ways to build common ground:\n\nWe understand that you won't always be able to find common ground. But if you can, it'll help you a lot, especially if you‚Äôre light on social proof or accomplishments.\n\nSelling yourself is usually about one of two things:\n\nSome people are fortunate enough to have both, but many will have just one. That‚Äôs okay. We‚Äôll work with what you have!\n\nWhat have you done that most other people haven‚Äôt? What have you done that, if you were to tell it to a stranger, would cause them to pause and think you're special or interesting?\n\nBelow are some examples:\n\nSocial proof is more about your pedigree. If you attended a top school or worked at a company known for having a high engineering bar, you should absolutely mention it!People won't click on links or open your resume untilafterthey're interested, so you need to get them interested right away. That is: you should spoon feed them the most impressive-sounding things about you out of the gate. This may feel strange and uncomfortable, like you‚Äôre bragging. We assure you, however, that it‚Äôs necessary to get your target‚Äôs attention. They‚Äôre not thinking you‚Äôre bragging. They‚Äôre thinking, ‚ÄúIs this worth my time?‚Äù Your job is to convince them that it is.\n\nAlso, don‚Äôt forget to link to your LinkedIn or personal website. Attaching a resume may feel too heavy-handed for a first conversation, as we discussed above.\n\nHere's an example of a prospective intern, leveraging both social proof and accomplishments, to write a compelling email. His email isn't super personalized, but he did make some effort to say that what we do at interviewing.io is important.\n\nA call to action is an invitation for the recipient to do something. You can go one of two ways with your call to action: ask for a job interview or start a conversation.Which you do should be a function of how much firepower you have in the way of social proof and accomplishments. It‚Äôs not fair, but if you can get your target‚Äôs attention with one or both of those, being bold and asking for a job interview makes sense. This approach can be effective, but it won‚Äôt work for most people‚Ä¶ because most people don‚Äôt have enough social proof or accomplishments to justify this type of request.\n\nIf you can‚Äôt leverage social proof or accomplishments, you‚Äôre going to have to work harder and bank entirely on building common ground, which will likely take some time and effort and involve a live conversation before they‚Äôre convinced to expend their social capital on you.\n\nIf you‚Äôre asking for an interview, just come right out and say it. You can use the intern candidate‚Äôs email from earlier as a guide. However, this isn‚Äôt our preferred way to do it, and we really recommend starting a conversation instead.\n\nTake a look at the email below.\n\nIn this email, the candidate doesn‚Äôt ask me about jobs ‚Äî he just asks to meet to discuss a topic. Indeed, he‚Äôs done his research. I write atonabout judging resumes, and it‚Äôs a topic I could go on about for hours if you‚Äôll let me. His email read like he‚Äôs genuinely interested in the subject and that we‚Äôd have a good conversation, so of course I responded. You‚Äôd be surprised how rare emails like this are. If you can find the topic your target cares about and write something that shows earnest, genuine interest, they‚Äôll respond.\n\nWith these emails, you‚Äôre asking for a conversation, not a job interview‚Ä¶ because the conversation is what will hopefully prove to the hiring manager that you‚Äôre worth interviewing.Then, once you have a conversation, the hiring manager will walk away with the impression that you‚Äôre a competent, thoughtful human being who‚Äôs interested in this sort of work. From there, getting a job interview will feel like an afterthought.\n\nAs such, don‚Äôt talk about jobs at all in this type of email, and in this particular case, don‚Äôt attach your resume ‚Äî that will feel out of place and transactional. You can and should link to your LinkedIn so they know who you are and have some context. But spend the bulk of the email building common ground and coming up with an interesting reason for the two of you to talk.\n\nThis approach is much more effective than asking for an interview out of the gate!You‚Äôre not going to land a job from one email, so, as with any seemingly insurmountable goal, it‚Äôs important to think of your outreach as a series of steps where you put one foot in front of the other. Like in sales, all you need is to get to a conversation.\n\nIf your call to action is to set up a time to talk (which it probably should be because it‚Äôs specific), we recommend providing them with a time window. \"Would you want to meet up sometime?\" puts the burden on the recipient to pose a time, while \"Can we talk next Monday at 3pm?\" is problematic because, most likely, they aren't free then. Instead, try something like the candidate above did: \"Would you be available sometime within the next two weeks for a thirty-minute call? I'm free most weekdays between X and Y and can pretty much do any time on weekends if those are better for you.\"\n\nBelow are two templates you can use for cold outreach. The first one is ideal but requires more effort and can't always be used. The second one is weaker but more generic.You can choose what fits your needs best. We expect both of these templates to be far more effective than throwing your resume into the blackhole of online portals.\n\nThis template includes common ground, accomplishments/social proof, and a call to action. It will get you the highest response rates, possibly anywhere from 25-50%. However, it can be challenging to use because it requires you to 1) do a deep dive into their online presence and 2) tie what you find back to something you‚Äôre doing. Sometimes, that tie-in might be tenuous or non-existent (in which case, maybe skip it).\n\nHey {Their First Name},\n\nI‚Äôve read your work on {insert some details about their writing}, and I {insert your thoughts on the work}.\n\n{If you can make the connection between their work and yours, talk about something similar you‚Äôve been working on.}\n\n{If you cannot, ask them a specific, thoughtful question about your work. Don‚Äôt worry about making it ‚Äúthe perfect question‚Äù like you might when you attend a talk and want to sound smart. Any earnest question will do. You don‚Äôt have to use this as a chance to show off!}\n\n{Finally, close with a sentence or two about you, if you have some social proof or impressive accomplishments you can share.}\n\nWould you be up for a quick chat this week or next?\n\n{Your name}{Insert 1-2 useful links about you. If you have a personal site, that‚Äôs great. If not, a LinkedIn will do.}\n\nNote that in this template, we leave some places for you to insert some social proof and your accomplishments. Even though this email is primarily about them and their work, and your references to yourself are primarily through that lens, it never hurts to drop in a few pieces of evidence that you‚Äôre someone who‚Äôs accomplished things and/or someone who looks good on paper.\n\nThe reality is that you won‚Äôt always have enough information about your target to find common ground. In this case, you‚Äôll lead with accomplishments/social proof and a strong call to action. We expect this template will get you response rates anywhere from 5-25%, depending on the strength of your achievements and pedigree. That said, we recommend treating this template as a last resort. Using it means you‚Äôve exhausted any possibility of writing something personal.\n\nHey {Their First Name},\n\n{List 2 things about you. They can be impressive accomplishments of yours or social proof, as above.}\n\nI‚Äôm really interested in the work you‚Äôre doing at {Company Name}. {If you know what team they‚Äôre on and are interested in that specific team or are familiar with that team‚Äôs accomplishments, great! If not, just write a few earnest sentences about why the company is interesting to you.}\n\nWould you be up for a quick chat this week or next?\n\n{Your name}{Insert 1-2 useful links about you. If you have a personal site, that‚Äôs great. If not, a LinkedIn will do.}\n\nKeep your note short. The intent here is to make your target believe you‚Äôre an entity worth paying attention to, rather than them doing the easy thing: deleting your email.\n\nRegardless of which template you use, just like you have to manage your psychology when you prepare for technical interviews, you have to manage your psychology when doing outreach like this. You have to:\n\nNow that you‚Äôve girded your proverbial loins, it‚Äôs time to do the work. If you follow our advice, you‚Äôll get 1-2 orders of magnitude more responses than from applying online, and with this approach, you‚Äôll have at least a hiring manager at that company rooting for you!\n\nRocketReach also has a LinkedIn-like faceted search you can use to find engineering managers, but we‚Äôve found that it‚Äôs not nearly as reliable or rich as LinkedIn, which is why we recommend using LinkedIn for search and then RocketReach for email discovery.‚Ü©\n\nRecruiters should not contact candidates on their work email address, but that's because they're trying to make the candidate leave their job. You are trying to join the manager, which is why it's okay to use their work email address.‚Ü©\n\nMany people think that for something to be worth mentioning, it has to have gone viral. That‚Äôs simply not correct ‚Äî in our niche space, a few hundred likes or a few thousand upvotes is already really impressive.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/how-to-get-in-the-door-at-top-companies-cold-out-reach-to-hiring-managers-part-2",
      "author": "",
      "user_id": ""
    },
    {
      "title": "It's OK to postpone your interviews if you're not ready",
      "content": "# It's OK to postpone your interviews if you're not ready\n\n## When postponing is OK, and when youshouldn‚Äôttake our advice\n\n## Exactly what to say to postpone your interviews\n\n## Postponing can also be a good way to control the timing of your job search\n\n## Footnotes\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Image Filter Service\n\n### K Closest Points To Origin\n\n### Alien Dictionary\n\n#### Related posts\n\n#### Stuff we write about\n\nAt interviewing.io, we‚Äôve seen hundreds of thousands of engineers go through job searches, and the biggest mistakes we see people make are all variations on the same theme: not postponing their interview when they aren‚Äôt ready.\n\nI‚Äôve found myself repeating that it‚Äôs OK to postpone interviews so often that I finally broke down and decided to make it a blog post. It‚Äôs very simple advice, so the bulk of this post will be spent trying to convince you that it‚Äôs fine to postpone. And then of course I‚Äôll tell you what to say.\n\nDo any of these situations sound familiar?\n\nBoth of these situations are extremely common, but they‚Äôre both preventable. You can just ask to postpone. There are a few edge cases where that‚Äôs not a good idea, but in most situations, it‚Äôs the right thing to do.\n\nIf you‚Äôre applying to a large company with a centralized process (in other words, a process where you interview first and get matched with a team later), postponing is almost always OK. These companies are perpetually hiring, and their open roles are evergreen.1\n\nEven if you‚Äôre applying to a large company with a decentralized process (where you interview for a specific team), we recommend postponing unless you‚Äôre extremely excited about the team you‚Äôre talking to. In that scenario, it‚Äôs possible that if you postpone, the slot will be filled. But if it‚Äôs not a perfect fit and you‚Äôd be OK with another team, we recommend postponing ‚Äî in the worst case, you‚Äôll simply get slotted into a different team.\n\nThe only time when postponing isn‚Äôt a good idea is when you‚Äôre applying to a very small company that has just one open headcount. In that scenario, it is possible that postponing will cost you the opportunity because they‚Äôll choose another candidate. However, you can ask how likely that is to happen, up front.\n\nWith that edge case out of the way, here‚Äôs a little-known fact about how timing works at large companies: Recruiters don‚Äôt really care when you interview. Though they‚Äôd prefer that you interview sooner rather than later so they can hit their numbers, at the end of the day, they‚Äôd rather be responsible for successful candidates than unsuccessful ones.\n\nEvery recruiter, in every job search, will tell you that time is of the essence because of all the other candidates in the pipeline. Most of the time, that is irrelevant and just something they say to create an artificial sense of urgency. There are always other candidates in the pipeline because the roles are evergreen. But they have nothing to do with your prospects.\n\nYou can use this text verbatim when postponing your interviews, and, with some small edits, you can even use it several times (e.g., before the phone screen and then again before the onsite).\n\nI‚Äôm really excited about interviewing at [company name]. Unfortunately, if I‚Äôm honest, I haven‚Äôt had a chance to practice as much as I‚Äôd like. I know how hard and competitive these interviews are, and I want to put my best foot forward. I think I‚Äôll realistically need a couple of months to prepare. How about we schedule my interview for [date]?\n\nOne important thing to remember is to be conservative about how long it will take. You‚Äôve probably heard the adage about how, when you have to estimate the time an engineering task will take, you should think of a number and double it. Here, you may even want to triple it.\n\nI‚Äôve seen many candidates ask for 2 weeks because that feels like a reasonable thing to ask for, only to have it blow up in their face when they realize they need to ask for another extension (which is still worth doing but harder because the company may think you‚Äôre taking them for a ride). If you need two months, ask for two months.\n\nThis section is extra credit, but once you get comfortable with postponing your interviews when you‚Äôre not prepared, you can use the same skills to batch your interviews and ultimately control the timing of your job search.\n\nWhat does it mean to control the timing of your job search? Ideally, you want all of your offers to come in at the same time, both because it maximizes optionality (one company that arbitrarily offers first doesn‚Äôt rush you into making a decision) and maximizes leverage (you can negotiate from a position of power).\n\nIf you want to dive deeper into this process, take a look at a book I recently co-wrote,Beyond Cracking the Coding Interview. It includes a full chapter about how to manage your job search, which covers everything from determining the order in which to approach companies to how to speed them up and slow them down once you‚Äôre in process. There‚Äôs a lot more detail than I can touch in this post, and much of it depends on your specific circumstances, but you can probably get 50% of the way there just by postponing your interviews in batches.\n\nThe big insight here is that, except for the edge cases we discussed above, a recruiting process can be paused at any point.\n\nIn other words, you can do a bunch of outreach to companies, then do a bunch of enthusiastic recruiter calls, and THEN pause all the processes until you‚Äôre prepared to do technical phone screens.\n\nThen, you batch the phone screens.\n\nFinally, if needed, you pause again to give yourself time to prepare for onsites. Onsite interviews require a different skill set than technical phone screens. The technical phone screen isn‚Äôt about depth or fit ‚Äî it‚Äôs just a way to cut people who aren‚Äôt likely to pass the onsite.\n\nThe onsite, on the other hand, isn‚Äôt just meant to cut poor performers. It‚Äôs at once a deeper dive into your technical ability and a way to gauge fit. If you‚Äôll be interviewing with your future team (typical at companies with a decentralized process), it‚Äôs also meant to assess your ability to work together, collaborate on hard things, complement the team's existing skillset, and so on. It usually has some coding (to verify that your technical phone screen wasn‚Äôt a fluke), but the focus is usually on system design and behavioral interviews2, which are also the interviews commonly used for leveling decisions.\n\nSo, onsite prep is much more about system design and getting your stories right for your behavioral interviews. Some people can pull off prepping for both coding and sys design/behavioral at the same time. For many, depending on their existing familiarity with the material, it‚Äôs a tall order. So, it‚Äôs wise to take the time you need and prepare.\n\nThen, once you‚Äôre ready, you batch the onsites.\n\nWhen your offers come in, you should ask for extensions as needed, speed companies up, and startnegotiating(which we‚Äôve written about in the past and which, of course, is covered at great depth in the book).\n\nYes, it‚Äôs true that in 2022, we saw several FAANGs and many other companies freeze hiring, and if you had postponed your interviews, you‚Äôd have been left out in the cold. Despite how devastating these freezes were to affected candidates (and to the tech economy as whole), they are extremely rare, and in our humble opinion, not worth optimizing for or worrying about. You are very unlikely to have to deal with an impending freeze.‚Ü©\n\nSome companies will also have technical deep dives, project presentations, assessments of niche skills, and so on.‚Ü©\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/its-ok-to-postpone-your-interviews-if-youre-not-ready",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Read nine chapters of Beyond Cracking the Coding Interview for free",
      "content": "# Read nine chapters of Beyond Cracking the Coding Interview for free\n\n## We know exactly what to do and say to get the company, title, and salary you want.\n\n### Have interviews coming up? Study up on common questions and topics.\n\n### Right View Of Binary Tree\n\n### Design WhatsApp\n\n### Maximum Subarray\n\n#### Related posts\n\n#### Stuff we write about\n\nAlong with Gayle Laakmann McDowell, Mike Mroczka, and Nil Mamano, I wrote the official sequel toCracking the Coding Interview. It's fittingly calledBeyond Cracking the Coding Interview..\n\nNow, we're releasing9 chapters of the book for free! There are two PDFs in the linked folder:\n\nTake a look, and let me know what you think. You can reach me ataline@interviewing.io.\n\nInterview prep and job hunting are chaos and pain. We can help. Really.",
      "content_type": "blog",
      "source_url": "https://interviewing.io/blog/nine-free-chapters-of-beyond-cracking-the-coding-interview",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Breaking Down Dynamic Programming",
      "content": "# Breaking Down Dynamic Programming\n\n## Introduction\n\n## Overview: Recursive vs Iterative DP\n\n## Recursive DP in 5 Steps\n\n## Iterative DP in 6 Steps\n\n## DP Patterns\n\n## Practice Problems\n\n### Recursive / Top-down DP\n\n### Iterative / Bottom-up DP\n\n### Space optimization\n\n### For Step 1. The subproblems.\n\n### For Step 2. The recurrence equation.\n\nNote: the approach in this guide later became the foundation for the dynamic programming chapter inBeyond Cracking the Coding Interview.\n\nWhen I was a TA for \"Algorithm Design and Analysis\", the students struggled with dynamic programming. To simplify/demystify it, I tried to break it down into a logical sequence of steps, each of which should not feel too intimidating on its own. This is explained in detail here. To complement the explanations, there are links to problems onleetcode.com, in case the reader wants to practice. The code snippets are in Python, but Leetcode accepts most popular languages.\n\nIn short, dynamic programming (DP) is a technique for problems that seem hard to solve as a whole, but become easy if we know the solution to smaller subproblems. More technically, we can use it in problems where the (value of the) solution can be expressed as an equation which is a function of the input, and is expressed in terms of itself with smaller inputs. This is called arecurrence equation. The classic example is the Fibonacci recurrence:Fib(n) = Fib(n-1) + Fib(n-2).\n\nA recurrence equation can be translated into code:\n\nHowever, the above function has an exponential runtime. A recursive function becomes exponential when it is possible to reach the same subcall through different execution paths. In the Fibonacci case, we have the following nested calls:Fib(n) -> Fib(n-1) -> Fib(n-2), andFib(n) -> Fib(n-2). SinceFib(n-2)is called twice all the work from this call is duplicated, which in turn means that subcalls made fromFib(n-2)will start to duplicate and grow exponentially.\n\nDynamic programming is simply a workaround to this duplication issue. Instead of recomputing the solutions of the subproblems, we store them and then we recall them as needed. This guarantees that each subproblem is computed only once.\n\nThere are two main approaches for DP.\n\nWe start with the code which is a literal translation of the recurrence equation, but then we add a dictionary / hash table to store results.\n\nThere are three changes in the code above:\n\nUsing a memoization table in this way solves the inefficiency (we will go deeper into the analysis part later).\n\nInstead of starting from the largest input and recursively reaching smaller subproblems, we can directly compute the subproblems from smallest to largest. This way, we already have the solutions to the subproblems when we need them. For this approach, we change the dictionary for an array/vector, and we change recursive calls for a for loop.\n\nMost problems can be solved with both recursive and iterative DP. Here are some considerations for how to choose:\n\nWe already saw steps 1‚Äì4 with the Fibonacci example. Now, we will walk through all the steps in more detail using a more complicated example, thelongest common subsequence problem:\n\nGiven two stringss1ands2, find the length of the longest string which is a subsequence of boths1ands2. A stringtis asubsequenceof a stringsif every char intappearsin orderins, but arenot necessarily contiguous. For example,abcis a subsequence ofaxbyz, butbais not (do not confuse subsequence with substring or subset).\n\nStep 1: choose our subproblems. This varies from problem to problem, but when the input to the problem is a string, a natural way to obtain smaller problems is to look at shorter strings. Here we can use as a subproblem aprefixofs1and a prefix ofs2.\n\nSome notation: letnbe the length ofs1andmthe length ofs2. LetLCS(i,j)be the solution for the LCS problem for the prefix ofs1of lengthn(s1[0..i-1]) and the prefix ofs2of lengthm(s2[0..j-1]). Then, our goal is to findLCS(n, m).\n\nStep 2: find the recurrence equation. Now we need to come up with an expression forLCS(i,j)as a function ofLCSwith smaller indices (as well as a base case). This is the hardest step of DP, and often it is here that we realize that we chose bad subproblems in Step 1. If that happens, hopefully we will discover some hint for what our subproblems should be.\n\nIn order to derive the recurrence equation for LCS, we need the following observation: if the two strings end with the same characterc, then, to maximize the length of the subsequence, it is \"safe\" to addcto the subsequence. In contrast, if both strings end with different characters, thenat leastone of them cannot appear in the subsequence. The complication is that we do not know which one. Thus, instead of guessing, we can simply consider both options.\n\nThis observation yields the recurrence equation (excluding base case):\n\nThis step is not intuitive at first, and requires practice. After having done a few problems, one starts to recognize the typical patterns in DP. For instance, usingmaxamong a set of options of which we do not know which one is the best is easily the most common pattern in DP.\n\nStep 3. Translate the recurrence equation into recursive code. This step is a very simple programming task. Pay attention to the base case.\n\nIf we draw the few first steps of the call graph, we will see that the same subproblem is reached twice. Thus, call graph blows up, leading to an exponential runtime.\n\nStep 4. Add memo table. This step should be automatic: one does not even need to understand the previous code in order to add the memo table.\n\nThe base case corresponds to when one of the strings is empty. The LCS of an empty string with another string is clearly an empty string.\n\nIncidentally, if we flip the check on the memo table, the code becomes a bit more streamlined (fewer lines + merging the two returns). I prefer this form (it does the same):\n\nWe have eliminated the exponential blowup. In general, DP algorithms can be analyzed as follows: # of distinct subproblems times time per subproblem excluding recursive calls. For LCS, we getO(nm)*O(1)=O(nm).\n\nStep 5. Reconstruct the solution.\n\nWe used DP to compute the length of the LCS. What if we want to find the LCS itself?\nA naive way to do it would be to store the entire result of each subproblem in the memoization table instead of just its length. While this works, it is clear that it will require a lot of memory to storeO(nm)strings of lengthO(min(n,m))each. We can do better.\n\nStep 5, \"Reconstruct the solution\", is how to reuse the table that we constructed in Step 4 to find the actual solution instead of just its length. I said that this step is optional because sometimes we just need thevalueof the solution, so there is no reconstruction needed.\n\nThe good news is that we do not need to modify the code that we already wrote in Step 4. The reconstruction is a separate step that comes after. In addition, the reconstruction step is very similar (follows the same set of cases) as the step of building the memo table. In short, we use the memo table as an \"oracle\" to guide us in our choices. Based on the values in the memo table, we know which option is better, so we know how to reconstruct the solution.\n\nIn the code above, first we runLCS(n,m)to fill the memo table. Then, we use it in the reconstruction. The conditionmemo[(i-1,j)] >= memo[(i,j-1)]tells us that we can obtain a longer or equal LCS by discarding a char froms1instead of froms2.\n\nNote that there is a single recursive call in the reconstruction function, so the complexity is justO(n+m).\n\nThe new/different steps are highlighted. Step 3. is to design the layout of the table/matrix where we are going to store the subproblem solutions. There is no coding in this step. By \"design\", I mean making the following choices:\n\nHere is how I would lay out the table for LCS (you can find a different layout in the problems below):\n\nNext (Step 4), we fill the memo table with a nested for loop. If the layout is good, this should be easy. Before the main loop, we fill the base case entries. Then, we must make sure to iterate through the table in an order that respects the dependencies between cells. In the case of LCS, we can iterate both by rows or by columns.\n\nWe obtain the following algorithm:\n\nIn the code above, the base case entries are filled implicitly when we initialize the table with zeros everywhere.\n\nIf we need to reconstruct the solution, we can do it in the same way as for the recursive DP. The only difference is that memo is a matrix instead of dictionary.\n\nClearly, the space complexity of iterative DP is the size of the DP table. Often, we can do better. The idea is to only store the already-computed table entries that we will use to compute future entries. For instance, in the case of Fibonacci, we do not need to create an entire array -- keeping the last two numbers suffice. In the case of a 2-dimensional DP table, if we are filling the DP table by rows and each cell only depends on the previous row, we only need to keep the last row (and similarly if we iterated by columns). Here is the final version for LCS where we improve the space complexity fromO(nm)toO(n+m):\n\nNote: this optimization is incompatible with reconstructing the solution, because that uses the entire table as an \"oracle\".\n\nHere are some typical patterns:\n\nHere are some practice problems showcasing the patterns mentioned above. Follow the Leetcode links for the statements and example inputs. I jump directly to the solutions. I'd recommend trying to solve the problems before checking them.\n\nHere, the goal is to count the number of substrings of a stringswhich are palindromic. There is a trivialO(n¬≥)time solution without DP:\n\nWe can improve this toO(n¬≤)with DP. The subproblems are all the substrings ofs. LetPal(i, j)be true iffs[i..j]is a palindrome. We have the following recurrence equation (excluding base cases):\n\nBased on this recurrence equation, we can design the following DP table:\n\nThis type of \"diagonal\" DP tables are very common when the subproblems are substrings/sublists. In this case, the base cases are substrings of length 1 or 2. The goal isPal(0,n-1).\n\nGiven the dependency, the table can be filled by rows (starting from the last row), by columns (starting each column from the bottom), or by diagonals (i.e., from shortest to longest substrings). In the code below, I illustrate how to fill the table by diagonals.\n\nHere, a subproblem can be a grid with reduced width and height. LetT[i][j]be the cheapest cost to reach cell(i,j). The goal is to findT[n-1][m-1], wherenandmare the dimensions of the grid. The base case is when eitheriorjare zero, in which case we do not have any choices for how to get there. In the general case, we have the recurrence equationT[i][j] = grid[i][j] + min(T[i-1][j], T[i][j-1]): to get to(i,j), we first need to get to either(i-1,j)or to(i,j-1). We useminto choose the best of the two. We convert this into an iterative solution:\n\nThis is similar to the previous problem, but we need to accumulate the solutions to the subproblems, instead of choosing between them. Problems aboutcountingsolutions can often be solved with DP.\n\nThis problem will illustrate a new trick: if you cannot find a recurrence equation for the original problem, try to find one for a more restricted version of the problem which nevertheless you enough information to compute the original problem.\n\nHere, the input is a listLof numbers, and we need to find the length of the longest increasing subsequence (a subsequence does not need to be contiguous). Again, the subproblems correspond to prefixes of the list.\nLetLIS(i)be the solution for the prefix of lengthi(L[0..i]). The goal is to findLIS(n-1), wherenis the length ofL.\nHowever, it is not easy to give a recurrence equation forLIS(i)as a function of smaller prefixes. In particular,the following is wrong(I will let the reader think why):\n\nThus, we actually give a recurrence equation for a slightly modified type of subproblems: letLIS2(i)be the length of the LISending at index i. This constraint makes it easier to give a recurrence equation:\n\nIn short, since we know that the LIS ends atL[i], we consider all candidate predecessors, which are the numbers smaller than it, and get the best one by usingmax. Crucially, this recurrence works forLIS2(i)but not forLIS(i).\nHere is a full solution:\n\nAt the end, we do not simply returnT[n-1]becauseTis the table forLCS2, notLCS. We returnmax(T)because the LCS must endsomewhere, soLCS(n-1) = LCS2(j)for somej < n.\n\nNote that the runtime isO(n¬≤)even though the table has linear size. This is because we take linear time per subproblem.\n\nA harder version of the previous problem. A similar approach works. First solve the LIS problem as before, and then do a second pass to count the solutions.\n\nThis problem is similar to LCS, and it requires reconstruction.\n\nI should mention that noteveryproblem that can be solved with DP fits into the mold discussed above. Despite that, it should be a useful starting framework. Here are many more practice problems:\n\n```\ndef Fib(n):\n  if n == 0 or n == 1:\n    return 1\n  return Fib(n-1) + Fib(n-2)\n\n```\n\n```\nmemo = {}\n\ndef Fib(n):\n  if n == 0 or n == 1:\n    return 1\n  if n in memo:\n    return memo[n]\n  res = Fib(n-1) + Fib(n-2)\n  memo[n] = res\n  return res\n\n```\n\n```\ndef Fib(n):\n  if n == 0: return 1\n  memo = [0 for i in range(n+1)]\n  memo[0], memo[1] = 1, 1\n  for i in range(2, n+1):\n    memo[i] = memo[i-1] + memo[i-2]\n  return memo[n]\n\n```\n\n```\nLCS(i, j) = 1 + LCS(i-1, j-1)                 if s[i] == s[j]\n            max(LCS(i, j-1), LCS(i-1, j))     otherwise\n\n```\n\n```\n#outer call:\nLCS(len(s1), len(s2))\n\ndef LCS(i, j):\n  if i == 0 or j == 0:\n    return 0\n  if s1[i-1] == s2[j-1]:\n    return 1 + LCS(i-1, j-1)\n  else:\n    return max(LCS(i, j-1), LCS(i-1, j))\n\n```\n\n```\n#outer call:\nmemo = {}\nLCS(len(s1), len(s2))\n\ndef LCS(i, j):\n  if i == 0 or j == 0:\n    return 0\n  if (i,j) in memo:\n    return memo[(i,j)]\n  if s1[i-1] == s2[j-1]:\n    res = 1 + LCS(i-1, j-1)\n  else:\n    res = max(LCS(i, j-1), LCS(i-1, j))\n  memo[(i,j)] = res\n  return res\n\n```\n\n```\ndef LCS(i, j):\n  if i == 0 or j == 0:\n    return 0\n  if (i,j) not in memo:\n    if s1[i-1] == s2[j-1]:\n      memo[(i,j)] = 1 + LCS(i-1, j-1)\n    else:\n      memo[(i,j)] = max(LCS(i, j-1), LCS(i-1, j))\n  return memo[(i,j)]\n\n```\n\n```\n#outer calls\nmemo = {}\nn, m = len(s1), len(s2)\nLCS(n, m) #build memo table\nsol = reconstructLCS(n, m)\n\ndef reconstructLCS(i, j):\n  if i == 0 or j == 0:\n    return \"\"\n  if s1[i-1] == s2[j-1]:\n    return reconstructLCS(i-1, j-1) + s1[i-1]\n  elif memo[(i-1,j)] >= memo[(i,j-1)]:\n    return reconstructLCS(i-1, j)\n  else:\n    return reconstructLCS(i, j-1)\n\n```\n\n```\ndef LCS(s1, s2):\n  n, m = len(s1), len(s2)\n  memo = [[0 for j in range(m+1)] for i in range(n+1)]\n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if s1[i-1] == s2[j-1]:\n        memo[i][j] = 1 + memo[i-1][j-1]\n      else:\n        memo[i][j] = max(memo[i-1][j], memo[i][j-1])\n  return memo[n][m]\n\n```\n\n```\ndef LCS(s1, s2):\n  n, m = len(s1), len(s2)\n  lastRow = [0 for j in range(m+1)]\n  for i in range(1,n+1):\n    curRow = [0 for j in range(m+1)]\n    for j in range(1,m+1):\n      if s1[i-1] == s2[j-1]:\n        curRow[j] = 1 + lastRow[j-1]\n      else:\n        curRow[j] = max(lastRow[j], curRow[j-1])\n    lastRow = curRow\n  return lastRow[m]\n\n```\n\n```\ndef countSubstrings(s):\n  n = len(s)\n  count = 0\n  for i in range(n):\n      for j in range(i, n):\n          if isPalindrome(s[i:j+1]):\n              count += 1\n  return count\n\n```\n\n```\nPal(i, j) = false           if s[i] != s[j],\nPAl(i, j) = Pal(i+1, j-1)   otherwise\n\n```\n\n```\ndef countSubstrings(s):\n    n = len(s)\n    T = [[False for j in range(n)] for i in range(n)]\n    for i in range(n):\n        T[i][i] = True\n    for i in range(n-1):\n        T[i][i+1] = s[i] == s[i+1]\n\n    for size in range(2, n+1):\n        for i in range(0,n-size):\n            j = i + size\n            T[i][j] = s[i] == s[j] and T[i+1][j-1]\n\n    count = 0\n    for row in T:\n        for val in row:\n            if val:\n                count += 1\n    return count\n\n```\n\n```\ndef minPathSum(grid):\n    n, m = len(grid), len(grid[0])\n    T = [[0 for j in range(m)] for i in range(n)]\n\n    T[0][0] = grid[0][0]\n    for i in range(1, n):\n        T[i][0] = grid[i][0] + T[i-1][0]\n    for j in range(1, m):\n        T[0][j] = grid[0][j] + T[0][j-1]\n\n    for i in range(1, n):\n        for j in range(1, m):\n            T[i][j] = grid[i][j] + min(T[i-1][j], T[i][j-1])\n\n    return T[n-1][m-1]\n\n```\n\n```\nLIS(i) = LIS(i-1) + 1   if L[i] > L[i-1],\nLIS(i) = LIS(i-1)       otherwise\n\n```\n\n```\nLIS2(i) = 1 + max(LIS2(j)) over all j < i such that L[j] < L[i]\n\n```\n\n```\ndef LIS(L):\n  n = len(L)\n  T = [0 for i in range(n)]\n  T[0] = 1\n  for i in range(1, n):\n      T[i] = 1\n      for j in range(0, i):\n          if L[j] < L[i]:\n              T[i] = max(T[i], T[j] + 1)\n  return max(T)\n\n```",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/breaking-down-dynamic-programming?category=dsa",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Iterative Tree Traversals: A Practical Guide",
      "content": "# Iterative Tree Traversals: A Practical Guide\n\n## Introduction\n\n## What are Tree Traversals\n\n## Why / When to Use an Iterative Traversal\n\n## Iterative Postorder and Inorder Traversal\n\n## Traversals in n-ary Trees\n\n## An Alternative Way of Passing the Visit Flag\n\n### Traversal problems on leetcode\n\n### Preorder traversal practice problems\n\n### Inorder traversal practice problems\n\n### Postorder traversal practice problems\n\n### N-ary tree practice problems\n\nI don't know how often tree traversals come up in actual software projects, but they are popular in coding interviews and competitive programming.\nIn this article, I share an approach for implementing tree traversal algorithms iteratively that I found to be simple to remember and implement, while being flexible enough to do anything that a recursive algorithm can (I also didn't like most suggestions I saw online). The main technique is given in section\"Iterative Postorder and Inorder Traversal\", but first I give some context. I also link to practice problems onleetcode.comfor the reader to play with. I provide some solutions, but I suggest trying the problems out first. The code snippets are in C++, but leetcode accepts most languages.\n\nMathematically, trees are just connected acyclic graphs. However, in the context of tree traversals, we are usually working withrooted treesrepresented with a recursive structure such as the following (which is the default definition in Leetcode for binary trees). A leaf is a node with two null pointers as children:\n\nA tree traversal is an algorithm that visits every node in a tree in a specific order (and does some computation with them, depending on the problem). For binary trees specifically, there are three important orders:\n\nBecause rooted trees are recursive data structures, algorithms on trees are most naturally expressed recursively. Here are the three traversals. I use the functionprocess(node)as a placeholder for whatever computation the problem calls for.\n\nSide-note: in C++, pointers are implicitly converted to booleans: a pointer evaluates to true if and only if it is not null. So, in the code above, \"if (!root)\" is equivalent to \"if (root == NULL)\".\n\nIf the recursive implementation is so simple, why bother with an iterative one? Of course, to avoid stack overflow. Most runtime engines/compilers set a limit on how many nested calls a program can make. For example, according tothis article:\n\nDefault stack size varies between 320k and 1024k depending on the version of Java and the system used. For a 64 bits Java 8 program with minimal stack usage, the maximum number of nested method calls is about 7000.\n\nIf the height of the tree is larger than this limit, the program will crash with astack overflow error. A recursive implementation is safe to use if:\n\nHowever, if we are not in either of the cases above, an iterative solution is safer.\n\nRecursive and iterative traversals have the same runtime complexity, so this is not a concern when choosing either (all the problems shown in this article can be solved in linear time using either).\n\nThe main approach for converting recursive implementations to iterative ones is to \"simulate\" the call stack with an actual stack where we push and pop the nodes explicitly. This works great \"out-of-the-box\" with preorder traversal.\n\nIncidentally, when implementing tree traversals we need to make an implementation choice about how to handle NULL pointers. We can be eager and filter them out before adding them to the stack, or we can be lazy and detect them once we extract them from the stack. Both are fine‚Äîwhat matters is to be deliberate and consistent about which approach we are using. I prefer the latter as it yields slightly shorter code, so I will use it in all the following examples. For comparison, here is the iterative preorder traversal with both approaches:\n\nNote thatthe right child is pushed to the stack before the left one. This is because we want the left child to be above in the stack so that it is processed first.\n\nThis problem asks to find the depth of a binary tree (follow the link for the description and examples). It requires passing information from each node to its children. We can do this by changing the stack tostack<pair<TreeNode*, int>>, so that we can pass anintto each child, as in the solution below:\n\nIn the code above, the{}notation is used to create pairs (e.g.,{root, 0}). If one is not familiar with pairs in C++, or is using a language without the equivalent, a simple alternative is to use two separate stacks, one for the nodes and one for the info.\n\nThe next two problems are similar:\n\nA solution for the last one, this time using a stack with a pair of nodes:\n\nWhile iterative preorder traversal is straightforward, with postorder and inorder we run into a complication: we cannot simply swap the order of the lines as with the recursive implementation. In other words, the following doesnotyield a postorder traversal:\n\nThe node is still processed before its children, which is not what we want.\n\nThe workaround, once again emulating the recursive implementation, is to visit each node twice.We consider postorder traversal first. In the first visit, we only push the children onto the stack. In the second visit, we do the actual processing.\nThe simplest way to do this is to enhance the stack with a\"visit number flag\". Implementation-wise, we change the stack tostack<pair<TreeNode*, int>>so that we can pass the flag along with each node. The iterative postorder looks like this:\n\nNote the order in which the nodes are added to the stack whenvisit == 0. The parent ends up under its children, with the left child on top. Since it is the first time that the children are added to the stack, their visit-number flag is 0. For the parent, it is 1.\nFor simplicity, I also follow the convention to always immediately call pop after extracting the top element from the stack.\n\nThe same approach also works for inorder traversal (that's the point). Here is a version where we visit each node three times: one to push the left child, one to process the node, and one to push the right child.\n\nIn fact, the second and third visits can be merged together: processing the node does not modify the stack, so the two visits are followed one after the other anyway. Here is my preferred version:\n\nFor completeness, here is the version found in most of my top Google hits (seethisfor a nice explanation):\n\nWhile it is shorter, it cannot be easily converted to postorder traversal, so it is not as flexible. Also, I find it easier to follow the execution flow with the visit-number flag.\n\nA solution (follow the link for the statement and examples):\n\nThis problem asks to check if a binary tree is balanced. It requires passing information back from the children to the parent node in a postorder traversal. Passing information from the children to the parent is easy with recursion. It can be done both with return values or with parameters passed by reference. For this problem we need to pass two things: aboolindicating if the subtree is balanced, and anintindicating its height. I use a reference parameter for the latter (returning apair<bool,int>would be cleaner).\n\nPassing information from the children to the parent in an iterative implementation is more intricate. There are three general approaches:\n\nThis is the easiest way, but also the most expensive.\nWhile the asymptotic runtime is still linear, hash tables generally have significant constant factors.\n\nThen, we can read it from the parent node by traversing the children's pointers.\nIn Leetcode we cannot modify theTreeNodedata structure so, to illustrate this approach, I build a new tree first with a new struct:\n\nThis is the most efficient, but one must be careful to keep both stacks in synch. When processing a node, that node first pops the information from its children, and then pushes its own info for its parent. Here is a solution (with eager NULL-pointer detection):\n\nThis problem also requires passing information from the children to the parent in a postorder traversal. Here is a solution using the third approach again, but this time with lazy NULL-pointer detection. Note that we push a 0 to thedepthsstack when we extract a NULL pointer from the main stack, and during processing we always do two pops regardless of the number of non-NULL children:\n\nSo far, we have looked at binary trees. In an n-ary tree, each node has an arbitrary number of children.\n\nFor n-ary trees, preorder traversal is also straightforward, and inorder traversal is not defined.\n\nFor postorder traversal, we can use a visit-number flag again. Two visits suffice for each node: one to push all the children into the stack, and another to process the node itself. I do not include the code here because it is very similar to the binary tree case.\n\nConsider a more complicated setting where we need to compute something at the node after visiting each child. Let's call this \"interleaved traversal\". I useprocess(node, i)as placeholder for the computation done before visiting the i-th child. Here is the recursive implementation and the corresponding iterative one using visit-number flags.\n\nThe common framework to all our solutions has been to pass a visit-number flag along with the nodes on the stack. User \"heiswyd\" on leetcode postedherean alternative way to pass the flag implicitly: initially, it pushes each node on the stack twice. Then, it can distinguish between the first visit and the second visit by checking whether the node that has just been extracted from the stack matches the node on top of the stack. This happens only when we extract the first of the two occurrences. Post-order traversal looks like this:\n\nIt is cool, but I prefer passing the flag explicitly for clarity.\n\n```\nstruct TreeNode {\n  int val;\n  TreeNode *left;\n  TreeNode *right;\n  TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\n```\n\n```\nvoid preorderTraversal(TreeNode* root) {\n  if (!root) return;\n  process(root);\n  preorderTraversal(root->left);\n  preorderTraversal(root->right);\n}\n\nvoid inorderTraversal(TreeNode* root) {\n  if (!root) return;\n  inorderTraversal(root->left);\n  process(root);\n  inorderTraversal(root->right);\n}\n\nvoid postorderTraversal(TreeNode* root) {\n  if (!root) return;\n  postorderTraversal(root->left);\n  postorderTraversal(root->right);\n  process(root);\n}\n\n```\n\n```\n//eager NULL checking\nvoid preorderTraversal(TreeNode* root) {\n  stack<TreeNode*> stk;\n  if (!root) return;\n  stk.push(root);\n  while (!stk.empty()) {\n    TreeNode* node = stk.top();\n    stk.pop();\n    process(node);\n    if (node->right) stk.push(node->right);\n    if (node->left) stk.push(node->left);\n  }\n}\n\n//lazy NULL checking\nvoid preorderTraversal(TreeNode* root) {\n  stack<TreeNode*> stk;\n  stk.push(root);\n  while (!stk.empty()) {\n    TreeNode* node = stk.top();\n    stk.pop();\n    if (!node) continue;\n    process(node);\n    stk.push(node->right);\n    stk.push(node->left);\n  }\n}\n\n```\n\n```\nint maxDepth(TreeNode* root) {\n    int res = 0;\n    stack<pair<TreeNode*, int>> stk;\n    stk.push({root, 1}); //node, depth\n    while (!stk.empty()) {\n        auto node = stk.top().first;\n        int depth = stk.top().second;\n        stk.pop();\n        if (!node) continue;\n        res = max(res, depth);\n        stk.push({node->left, depth+1});\n        stk.push({node->right, depth+1});\n    }\n    return res;\n}\n\n```\n\n```\nbool isSymmetric(TreeNode* root) {\n    if (!root) return true;\n    stack<pair<TreeNode*, TreeNode*>> stk;\n    stk.push({root->left, root->right});\n    while (!stk.empty()) {\n        TreeNode* l = stk.top().first;\n        TreeNode* r = stk.top().second;\n        stk.pop();\n        if (!l and !r) continue;\n        if (!l or !r or l->val != r->val) return false;\n        stk.push({l->left, r->right});\n        stk.push({l->right, r->left});\n    }\n    return true;\n}\n\n```\n\n```\n...\nstk.push(node->right);\nstk.push(node->left);\nprocess(node);\n...\n\n```\n\n```\nvoid postorderTraversal(TreeNode* root) {\n  stack<pair<TreeNode*,int>> stk; //node, visit #\n  stk.push({root, 0});\n  while (!stk.empty()) {\n    TreeNode* node = stk.top().first;\n    int visit = stk.top().second;\n    stk.pop();\n    if (!node) continue;\n    if (visit == 0) {\n      stk.push({node, 1});\n      stk.push({node->right, 0});\n      stk.push({node->left, 0});\n    } else { //visit == 1\n      process(node);\n    }\n  }\n}\n\n```\n\n```\n//3-visit version\nvoid inorderTraversal(TreeNode* root) {\n  stack<pair<TreeNode*,int>> stk;\n  stk.push({root, 0});\n  while (!stk.empty()) {\n    TreeNode* node = stk.top().first;\n    int visit = stk.top().second;\n    stk.pop();\n    if (!node) continue;\n    if (visit == 0) {\n      stk.push({node, 1});\n      stk.push({node->left, 0});\n    } else if (visit == 1) {\n      stk.push({node, 2});\n      process(node);\n    } else { //visit == 2\n      stk.push({node->right, 0});\n    }\n  }\n}\n\n```\n\n```\n//2-visit version\nvoid inorderTraversal(TreeNode* root) {\n  stack<pair<TreeNode*,int>> stk;\n  stk.push({root, 0});\n  while (!stk.empty()) {\n    TreeNode* node = stk.top().first;\n    int visit = stk.top().second;\n    stk.pop();\n    if (!node) continue;\n    if (visit == 0) {\n      stk.push({node, 1});\n      stk.push({node->left, 0});\n    } else { //visit == 1\n      process(node);\n      stk.push({node->right, 0});\n    }\n  }\n}\n\n```\n\n```\nvoid inorderTraversal(TreeNode* root) {\n    stack<TreeNode*> stk;\n    TreeNode* curr = root;\n    while (curr or !stk.empty()) {\n        while (curr) {\n            stk.push(curr);\n            curr = curr->left;\n        }\n        curr = stk.top();\n        stk.pop();\n        process(curr);\n        curr = curr->right;\n    }\n}\n\n```\n\n```\nint kthSmallest(TreeNode* root, int k) {\n    int count = 1;\n    stack<pair<TreeNode*, int>> stk;\n    stk.push({root, 0});\n    while (!stk.empty()) {\n        auto node = stk.top().first;\n        int visit = stk.top().second;\n        stk.pop();\n        if (!node) continue;\n        if (visit == 0) {\n            stk.push({node, 1});\n            stk.push({node->left, 0});\n        } else { //visit == 1\n            if (count == k) return node->val;\n            count++;\n            stk.push({node->right, 0});\n        }\n    }\n    return -1;\n}\n\n```\n\n```\nbool isValidBST(TreeNode* root) {\n    int lastVal;\n    bool init = false;\n\n    stack<pair<TreeNode*, int>> stk;\n    stk.push({root, 0});\n    while (!stk.empty()) {\n        TreeNode* node = stk.top().first;\n        int visit = stk.top().second;\n        stk.pop();\n        if (!node) continue;\n        if (visit == 0) {\n            stk.push({node, 1});\n            stk.push({node->left, 0});\n        } else { //second visit\n            if (!init) {\n                init = true;\n                lastVal = node->val;\n            } else {\n                if (node->val <= lastVal) return false;\n                lastVal = node->val;\n            }\n            stk.push({node->right, 0});\n        }\n    }\n    return true;\n}\n\n```\n\n```\nbool isBalancedRec(TreeNode* root, int& height) {\n  if (!root) {\n    height = 0;\n    return true;\n  }\n  int lHeight, rHeight;\n  bool lBal = isBalancedRec(root->left, lHeight);\n  bool rBal = isBalancedRec(root->right, rHeight);\n  height = max(lHeight, rHeight) + 1;\n  return lBal && rBal && abs(lHeight - rHeight) <= 1;\n}\n\nbool isBalanced(TreeNode* root) {\n  int height;\n  return isBalancedRec(root, height);\n}\n\n```\n\n```\nbool isBalanced(TreeNode* root) {\n    stack<pair<TreeNode*, int>> stk;\n    stk.push({root, 0});\n\n    unordered_map<TreeNode*, int> height;\n    height[NULL] = 0;\n\n    while (!stk.empty()) {\n        TreeNode* node = stk.top().first;\n        int visit = stk.top().second;\n        stk.pop();\n        if (!node) continue;\n        if (visit == 0) {\n            stk.push({node, 1});\n            stk.push({node->right, 0});\n            stk.push({node->left, 0});\n        } else { // visit == 1\n            int lHeight = height[node->left], rHeight = height[node->right];\n            if (abs(lHeight - rHeight) > 1) return false;\n            height[node] = max(lHeight, rHeight) + 1;\n        }\n    }\n    return true;\n}\n\n```\n\n```\nstruct MyNode {\n    int val;\n    int height;\n    MyNode *left;\n    MyNode *right;\n    MyNode(TreeNode* node): val(node->val), height(-1), left(NULL), right(NULL) {\n        if (node->left) left = new MyNode(node->left);\n        if (node->right) right = new MyNode(node->right);\n    }\n};\n\nbool isBalanced(TreeNode* root) {\n    if (!root) return true;\n    MyNode* myRoot = new MyNode(root);\n    stack<pair<MyNode*, int>> stk;\n    stk.push({myRoot, 0});\n    while (!stk.empty()) {\n        MyNode* node = stk.top().first;\n        int visit = stk.top().second;\n        stk.pop();\n        if (!node) continue;\n        if (visit == 0) {\n            stk.push({node, 1});\n            stk.push({node->right, 0});\n            stk.push({node->left, 0});\n        } else { // visit == 1\n            int lHeight = 0, rHeight = 0;\n            if (node->left) lHeight = node->left->height;\n            if (node->right) rHeight = node->right->height;\n            if (abs(lHeight - rHeight) > 1) return false;\n            node->height = max(lHeight, rHeight) + 1;\n        }\n    }\n    return true;\n}\n\n```\n\n```\nbool isBalanced(TreeNode* root) {\n    if (!root) return true;\n    stack<pair<TreeNode*, int>> stk;\n    stk.push({root, 0});\n\n    stack<int> heights;\n\n    while (!stk.empty()) {\n        TreeNode* node = stk.top().first;\n        int visit = stk.top().second;\n        stk.pop();\n        if (visit == 0) {\n            stk.push({node, 1});\n            if (node->right) stk.push({node->right, 0});\n            if (node->left) stk.push({node->left, 0});\n        } else { // visit == 1\n            int rHeight = 0, lHeight = 0;\n            if (node->right) {\n                rHeight = heights.top();\n                heights.pop();\n            }\n            if (node->left) {\n                lHeight = heights.top();\n                heights.pop();\n            }\n            if (abs(lHeight - rHeight) > 1) return false;\n            heights.push(max(lHeight, rHeight) + 1);\n        }\n    }\n    return true;\n}\n\n```\n\n```\nint diameterOfBinaryTree(TreeNode* root) {\n    stack<pair<TreeNode*,int>> stk;\n    stk.push({root, 0});\n\n    stack<int> depths;\n    int res = 0;\n\n    while (!stk.empty()) {\n        TreeNode* node = stk.top().first;\n        int visit = stk.top().second;\n        stk.pop();\n        if (!node) {\n            depths.push(0);\n            continue;\n        }\n        if (visit == 0) {\n            stk.push({node, 1});\n            stk.push({node->right, 0});\n            stk.push({node->left, 0});\n        } else { //visit == 1\n            int rDepth = depths.top();\n            depths.pop();\n            int lDepth = depths.top();\n            depths.pop();\n            int depth = max(lDepth, rDepth) + 1;\n            depths.push(depth);\n            int dia = lDepth + rDepth;\n            res = max(res, dia);\n        }\n    }\n    return res;\n}\n\n```\n\n```\nstruct Node {\n    int val;\n    vector<Node*> children;\n    Node(int val): val(val), children(0) {}\n};\n\n```\n\n```\n//recursive\nvoid interleavedTraversal(Node* root) {\n  if (!root) return;\n  int n = root->children.size();\n  for (int i = 0; i < n; i++) {\n    process(root, i);\n    interleavedTraversal(root->children[i]);\n  }\n}\n\n//iterative\nvoid interleavedTraversal(Node* root) {\n  stack<pair<TreeNode*, int>> stk;\n  stk.push({root, 0});\n  while (!stk.empty()) {\n    TreeNode* node = stk.top().first;\n    int visit = stk.top().second;\n    stk.pop();\n    if (!node) continue;\n    int n = node->children.size();\n    if (visit < n) {\n      stk.push({node, visit+1});\n      process(node, visit);\n      stk.push({node->children[visit], 0});\n    }\n  }\n}\n\n```\n\n```\nvoid postorderTraversal(TreeNode* root) {\n  stack<TreeNode*> stk;\n  stk.push(root);\n  stk.push(root);\n  while (!stk.empty()) {\n    TreeNode* node = stk.top();\n    stk.pop();\n    if (!node) continue;\n    if (!stk.empty() and stk.top() == node) {\n      stk.push(node->right);\n      stk.push(node->right);\n      stk.push(node->left);\n      stk.push(node->left);\n    } else {\n      process(node);\n    }\n  }\n}\n\n```",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/iterativetreetraversal?category=dsa",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Heapify Analysis Without Math",
      "content": "# Heapify Analysis Without Math\n\n## Heap Recap\n\n## What's Heapify?\n\n## Proof\n\n## Appendix: The Proof in Numbers\n\n## Appendix: Full heap implementation\n\nI'm writing about heaps for Beyond Cracking the Coding Interview (beyondctci.com), and the most technical part is the analysis ofheapify. It's easy to show that it takesO(n log n)time, wherenis the number of nodes in the heap, but it's not straightforward to show that this is not tight and the method actually takesO(n). time.\n\nEvery proof I have found online involves a summation over the levels of the heap that ends up looking something like the one inWikipedia heap page:\n\nwhich is more math than I want to put in this book (the bulk of the audience consists of people trying to land a SWE job, not math enthusiasts).\n\nBelow is the proof \"without complicated math\" I came up with that heapify takesO(n)time. If you are familiar with the classic proof, let me know if you find it easier - I might use it for the book. Also, please let me know if you've seen someone else proving it in a similar way.\n\nIf you already know what heapify is, you can jump directly to theProof.\n\nHeaps are binary trees with two special properties:\n\nI will focus on the heapify operation and its analysis, but if you want to learn heaps from scratch, the Algorithms with Attitude Youtube channel has agreat videoon it. He also covered theclassic linear-time prooffor heapify, if you want to compare it to mine.\n\nIn any case, I left a full Python heap implementation at the bottom of this post.\n\nHeapify (invented byRobert W. Floyd) converts a binary tree which is already complete, but may not have the heap property, into a proper heap.\n\nHeapify uses the \"bubble-down\" procedure, which starts at a node that may not satisfy the heap property, and recursively swaps it with the smallest of its two children until the heap property is restored:\n\nHeapify works by \"bubbling down\" every non-leaf (internal) node, from bottom to top:\n\nThis figure shows the heapify steps for a min-heap. The first tree is the initial state, which doesn't yet have the min-heap property. Leaves are already at the bottom, so bubbling them down has no effect. The next 3 trees show the evolution after bubbling down the two nodes at depth 1 and then the node at depth 0.\n\nIn the array-based heap implementation,heapify()looks like this:\n\nThe reason why we start bubbling down from the middle of the heap is that, in a complete tree, at least half the nodes are leaves, and we don't need to bubble those down.\n\nHere, we won't prove that itworks, only that its analysis isO(n).\n\nI'll start with a definition and a fact we'll use later:\n\nAperfectbinary tree is a complete tree where the last level is full:\n\nFact 1: In a perfect tree, the number of leaves is 1 more than the number of internal nodes.\n\nFact 1 is true because the number of nodes at each level is a power of 2, so:\n\nThe sum of the first few powers of 2 add up to one less than the next power of 2. You can see that if you line them up like this:\n\nIt's a bit likeZeno's paradox, where each power of 2 in the sum halves the remaining distance, but never quite gets to 64.\n\nWith that out of the way, back to heapify:\n\nIn the worst case, each node will get bubbled down all the way to a leaf. Thus, each node needs to move downO(log n)levels, so one might reasonably expect heapify to takeO(n log n)time. This is correct in the 'upper bound' sense, but not tight: the total time is actuallyO(n). The intuition for why that is the case is that most nodes are in the deeper levels of the tree, where they don't need to travel a lot to get to the bottom.\n\nWe'll actually prove astrongerclaim:\n\nMain Claim: If you heapify a perfect tree, the number of 'bubble-down' swaps is smaller thann, the number of nodes.\n\nThe proof goes like this:\n\nIf we can prove (2), together with (1) it implies the Main Claim because, as we add levels, the number of swaps can never catch up to the number of nodes.\n\nTo see why (2) is true, imagine we add a new level to a perfect tree:\n\nEvery preexisting node needs to bubble down one additional level, while the new leaves do not need to do to be bubbled down. Thus, the number of swaps increases by the number of preexisting nodes.\nBut, another way of saying Fact 1 is that if you take a perfect tree and add a new level, the number of new/leaf nodes is 1 more than the number of preexisting/internal nodes.\n\nAnd that's the proof!\n\nWe can compute the actual number of swaps needed, in the worst case, for concrete heights:\n\nWe can see that the number of swaps never catches up with the root, per the Main Claim.\n\nWe can also show how the number of nodes grows vs the number of swaps:\n\n```\n  def bubble_down(self, idx):\n    left_idx, right_idx = left_child(idx), right_child(idx)\n    is_leaf = left_idx >= len(self.heap)\n    if is_leaf: return  # Leaves cannot be bubbled down.\n\n    # Find the index of the smallest child\n    child_idx = left_idx\n    if right_idx < len(self.heap) and self.heap[right_idx] < self.heap[left_idx]:\n      child_idx = right_idx\n\n    if self.heap[child_idx] < self.heap[idx]:\n      self.heap[idx], self.heap[child_idx] = self.heap[child_idx], self.heap[idx]\n      self.bubble_down(child_idx)\n\n```\n\n```\n  def heapify(self, arr):\n    self.heap = arr\n    for idx in range(len(self.heap) // 2, -1, -1):\n      self.bubble_down(idx)\n\n```\n\n```\n- Height 1: 1 leaf,   0 internal nodes,  1 total\n- Height 2: 2 leaves, 1 internal node,   3 total\n- Height 3: 4 leaves, 3 internal nodes,  7 total\n- Height 4: 8 leaves, 7 internal nodes, 15 total\n\n```\n\n```\n- Height 1 (  1 node ):   0 swaps\n- Height 2 (  3 nodes):   1 swap\n- Height 3 (  7 nodes):   4 swaps: 2 to bubble down the root and  1*2 for the 2 subtrees of the root\n- Height 4 ( 15 nodes):  11 swaps: 3 to bubble down the root and  4*2 for the 2 subtrees of the root\n- Height 5 ( 31 nodes):  26 swaps: 4 to bubble down the root and 11*2 for the 2 subtrees of the root\n- Height 6 ( 63 nodes):  57 swaps: 5 to bubble down the root and 26*2 for the 2 subtrees of the root\n- Height 7 (127 nodes): 120 swaps: 6 to bubble down the root and 57*2 for the 2 subtrees of the root\n- ...\n\n```\n\n```\n- Height 1 to 2: the size increases from  1 to  3. We add  2 nodes and  1 swap\n- Height 2 to 3: the size increases from  3 to  7. We add  4 nodes and  3 swaps\n- Height 3 to 4: the size increases from  7 to 15. We add  8 nodes and  7 swaps\n- Height 3 to 4: the size increases from 15 to 31. We add 16 nodes and 15 swaps\n- ...\n\n```\n\n```\ndef parent(idx):\n  if idx == 0: return -1  # The root has no parent.\n  return (idx - 1) // 2\n\ndef left_child(idx):\n  return 2 * idx + 1\n\ndef right_child(idx):\n  return 2 * idx + 2\n\nclass MinHeap:\n  def __init__(self):\n    self.heap = []\n\n  # Returns the smallest element.\n  def top(self):\n    if not self.heap: return None\n    return self.heap[0]\n\n  def add(self, elem):\n    self.heap.append(elem)\n    self.bubble_up(len(self.heap)-1)\n\n  # Removes the smallest element.\n  def pop(self):\n    if not self.heap: return None\n    if len(self.heap) == 1:\n      self.heap = []\n      return\n    self.heap[0] = self.heap[-1]\n    self.heap.pop()\n    self.bubble_down(0)\n\n  def bubble_up(self, idx):\n    if idx == 0: return  # The root cannot be bubbled up.\n    parent_idx = parent(idx)\n    if self.heap[idx] < self.heap[parent_idx]:\n      self.heap[idx], self.heap[parent_idx] = self.heap[parent_idx], self.heap[idx]\n      self.bubble_up(parent_idx)\n\n  def bubble_down(self, idx):\n    left_idx, right_idx = left_child(idx), right_child(idx)\n    is_leaf = left_idx >= len(self.heap)\n    if is_leaf: return  # Leaves cannot be bubbled down.\n\n    # Find the index of the smallest child\n    child_idx = left_idx\n    if right_idx < len(self.heap) and self.heap[right_idx] < self.heap[left_idx]:\n      child_idx = right_idx\n\n    if self.heap[child_idx] < self.heap[idx]:\n      self.heap[idx], self.heap[child_idx] = self.heap[child_idx], self.heap[idx]\n      self.bubble_down(child_idx)\n\n  def heapify(self, arr):\n    self.heap = arr\n    for idx in range(len(self.heap) // 2, -1, -1):\n      self.bubble_down(idx)\n\n```",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/heapify-analysis?category=dsa",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Problem Solving BCtCI Style",
      "content": "# Problem Solving BCtCI Style\n\n## Problem Statement\n\n## Digesting the problem\n\n## Approach\n\n## Part A: Find all the special substrings\n\n## M: Minimally sketch brute force\n\n## I: Identify upper and lower bounds\n\n## K: Keywords (triggers)\n\n## E: Employ boosters\n\n## Booster 1: Brute force optimization\n\n## Booster 2: Hunting for properties\n\n## Part B: Find the most non-overlapping special substrings\n\n## Full implementation\n\n## Conclusion\n\n### Property 1\n\n### Property 2\n\nHere's a thought: You don't want the first time you think about the question\"What should I do if I get stuck in a coding interview?\"to be when you are stuck in a coding interview.\n\nIn a way, getting stuck in a coding interview is an opportunity. The main goal of the interview is to see your problem-solving thought process, and being stuck is the ideal time to showcase it.\n\nBut you want to be prepared. It's valuable to have a plan for this exact scenario. We all dread blanking out in an interview, but having a plan makes it easy to simply focus on executing it. So, let's talk about what such a plan could look like in this blog post.\n\nInBeyond Cracking the Coding Interview, we go over all the steps in an interview, and our best tips to do well in each of them:\n\nIn this blog post, I'll zoom in on the problem-solving step, \"Design the Algorithm,\" and illustrate the thought process with a problem.\n\nAs you can see, we break it down into four steps:\n\nThese are not revolutionary ideas -- it's what good problem solvers do and think about instinctively. One of the main goals of the book, and of this blog post, is to spell out the thought process of people who are really good at this in a relatable way so that anyone can reproduce it.\n\nWe playfully call this theMIKE template(Minimally sketch brute force,Identify bounds,Keywords (triggers),Employ boosters) afterMike Mroczka, one of the authors of BCtCI.\n\nRather than expanding on these now, we'll see them in action with the following problem.\n\nThe problem is based onLeetCode 3458, which appeared in a recent contest. You can go and give it a try before reading on (it's labeled as medium, but I think it's on the harder end of medium). The thought process I'll walk through here is based on how I solved it during the contest.\n\nGiven a strings, a substring ofsisspecialif any character in it does not appear outside it.\n\nFor example, ifsis\"abcba\":\n\nGiven a stringsconsisting ofnlowercase English letters, determine the maximum number of disjointspecialsubstrings. Two substrings are disjoint if they do not overlap.\n\nFirst, we need to digest what the problem is asking. This problem follows a common pattern: it introduces a kind of esoteric definition, \"special substring\", and then asks us to do something with it.\n\nTo make sure we understand what a special substring is, it's good to look at a few examples, starting with the provided ones. For instance, in\"abcba\", do you understand why\"a\"is not special but\"c\"is?\n\nTake some time to come up with your own examples. Rushing to solving a problem before understanding it well is a common but often costly mistake.\n\nSometimes, it helps to tackle just one part of the problem first, so we can start making progress.\n\nWe can think of an algorithm with 2 parts:\n\nLet's start with part A.\n\nWe'll walk through the MIKE template.\n\nThe key here is to not overthink it. We just want to get the ball rolling and have a baseline we can improve upon.\n\nSince we don't want to spend too much time in an interview, you could even just describe the idea in a sentence and move on. But we prefer to briefly sketch it in very high-level pseudocode. We call it 'intended English': it's written like English, but with indentation to show the code structure:\n\nInterviews often involve considering trade offs between algorithms, so it's a\ngood habit to give them names and list their time/space complexity.\n\nIn this case, the space complexity depends on how many special substrings we might find, which is not clear yet, so we'll leave it out for now.\n\nSketching the brute force solution helps us ensure we understand the problem\n(and if we are solving for the wrong thing, we give the interviewer a chance\nto let us know).\n\nWe can use big O analysis to narrow down the range of possible solutions. An upper bound means \"we don't have to consider any solution that takes longer than this\", and a lower bound means the opposite: \"we don't have to consider any solution that takes less time than this\". In the book, we go over two ways of establishing an upper bound and two ways of establishing a lower bound:\n\nCombining our findings, we can narrow down our search range toO(n log n)orO(n)algorithms (something likeO(n log^2 n)would also be fine, it's just less common).\n\nThere are certain properties of problems that point to a specific approach. Here are some triggers we can identify for this problem:\n\nUnfortunately, triggers are not a guarantee, and these triggers don't seem to help for this problem:\n\nDo you think I missed any other triggers?\n\nSo, triggers didn't help, and brute force is still far from the target complexity. It's time to employ boosters.\n\nThe boosters are roughly ordered, but we don't always have to use them in order. In fact, here's a plot twist: what we did at the beginning, splitting the problem into two parts, is the third booster:Decrease the Difficulty->Break Down the Problem.\n\nThe first booster is straightforward: take the brute force pseudocode we already have and try to optimize it.\n\nIn the boosters diagram, we list three ways to go about it. One of them is theData structure pattern. Many bottlenecks come from having to do some calculation inside a loop. In those situations, ask yourself,\n\n\"Do I know of any data structure which makes this type of operation faster?\"\n\nFor this problem, we can use a hash set to optimize the innermost loop:\n\nIf you have working code or pseudocode but think of an optimization or better\napproach, do NOT edit your code. Copy-paste it and work on a separate copy.\nThis way, if you don't have time to finish or realize it's wrong, you'll still\nhave the previous working version.\n\nWe got down toO(n^3)time, but we know we still need to bring this down to the target complexity.\n\nLet's say we don't know how to optimize the code further. Often, the breakthrough comes from uncovering some \"hidden\" observation orpropertynot explicitly mentioned in the statement. Our second booster is to go hunting for those.\n\nIn the book, we discuss a bunch of ways of doing this, but the most basic and effective one is to try to solve the problem manually with a non-trivial example. By non-trivial, we mean that is is not some weird edge case, which would not be helpful for figuring out a general algorithm.\n\nLet's actually do that: takes = \"mississippi\"andmanuallytry to find all the special substrings.\n\nDon't overthink it. Don't think about algorithms yet. Just write them down.\n\nDone? Ok,nowtry to reverse-engineer what shortcuts your brain took. This is one property you may have noticed:\n\nProperty 1:a special substring must start at the first occurrence of a letter.\n\nYou may have noticed this property when your brain skipped over the second, third, or fourth'i's inmississippiand intuitively realized that there is no special substring starting at those. Writing down the propertyformalizesthis instinct and ropes in the interviewer.\n\nNow that we have a property, we have to find a way to use it.Property 1allows us to optimize the outer loop: it means we only have26 = O(1)possible starts to check (problems where the input consists of only lowercase letters often have optimizations like this).\n\nAs we iterate through the possible starts, we can track letters seen so far (e.g., in a hash set):\n\nWe like to write down the big O simplification (O(26 * n^2) = O(n^2)), so\nthe interviewer doesn't think we missed steps.\n\nWe haven't hit our target time complexity yet, so let's keep hunting for properties. Here is another one:\n\nProperty 2:of all the special substrings that start at a given letter, we only care about the shortest one.\n\nOur ultimate goal is to find the most non-overlapping special substrings. If we can choose between two special substrings, one of which contains the other, it is always \"optimal\" or, at least, \"safe\" to pick the smaller one.\n\nFor instance, ifsis\"baa\", we have two choices for special substrings starting at'b':\"baa\"and\"b\". We should pick\"b\"so that the\"aa\"part can be in another disjoint special substring.\n\nAgain, when we find a property, we need to think of how to apply it.Property 2means that, for each starting pointi, we can grow a substring one letter at a time, and stop as we find the first special substring.\n\nLet's break this down a bit more: say you start at indexi.\n\nFor example, imagineistarts at the first'b'in the following string:\n\nThat means we need to grow the substring at least up to the last'b'in the string:\n\nAs we grow the substring, we hit an'a', which appears beforei, and we realize that no substring starting atican be special.\n\nWe can now add this logic to our algorithm. We can start the algorithm by computing the first and last index of each letter (this is an example of thepreprocessing patternin the boosters diagram -- it's common for properties from Booster 2 to enable optimizations from Booster 1).\n\nThen, as we grow each substring, we keep track of the farthest index we need to reach. (This is actually a common pattern in sliding window algorithms, where we maintain information about the window as it 'slides', rather than computing it from scratch every time the window moves. So, the 'sliding windows' trigger wasn't completely off).\n\nWe got the time down toO(n). Since we hit the lower bound, we can be confident Part A is as good as it can be, and we can move on to Part B.\n\nLet's be honest: even if in the book we reallyemphasizedeveloping your problem-solving skills by using the MIKE template and the boosters, knowing a bunch of leetcode questions DOES give you an edge in coding interviews. So, I'll tell you how I actually solved this problem in the contest. I realized that Part B is just a variation of a classic greedy problem: most non-overlapping intervals. Indeed, a substring can be seen as an interval of the string.\n\nThe \"most non-overlapping intervals\" problem is in BCtCI, so I already knew that it can be solved with a greedy algorithm that sorts the intervals by their end time and then iterates through them, picking the ones that don't overlap with the previous one (hereis a similar problem on leetcode). This algorithm fits within our target time complexity, so I didn't have to think beyond that.\n\nIf I didn't already know the solution, I would have walked through the MIKE template again for Part B.\n\nHere is a full implementation:\n\nYou may think that the bottleneck is the sorting, but it's not. Recall that there are only up to 26 special substrings (by Property 1). Sorting26intervals takesO(26 log 26) = O(1)time.\n\nI wanted to give an overview of all the high-level ideas for problem-solving in leetcode-style interviews. We could dive a lot deeper into any of those ideas, so this blog post may feel a bit rushed, but the meta-point is thatyou should have a plan for when you are stuck in an interview(and you should be following it during your practice sessions so it becomes second nature). It's not important that you use the MIKE template --yourplan should work foryou. But the ideas covered in this post should probably be part of it.\n\nIf you have any comments, let me know onlinkedinorX.\n\n```\nExample 1: s = \"abcba\"\nOutput: 1\nThe special substrings are \"abcba\", \"bcb\", and \"c\". They all overlap with each other, so we can only pick 1.\n\nExample 2: s = \"banana\"\nOutput: 2\nThe special substrings are \"b\", \"banana\", and \"anana\". We can pick \"b\" and \"anana\".\n\n```\n\n```\nAlgo 1: brute force\nT: O(n^4)\nfor each possible substring start\n  for each possible substring end\n    # check if it is special\n    for each letter inside the substring\n      for each letter outside the substring\n        if they match, it is not special\n\n```\n\n```\nAlgo 2: set optimization\nT: O(n^3)\nfor each possible substring start\n  for each possible substring end\n    # check if it is special\n    dump the substring into a set\n    for each letter outside the substring\n      if it is in the set, it is not special\n\n```\n\n```\nAlgo 3: selective start\nT: O(26 * n^2) = O(n^2)\nfor each possible substring start i\n  if seen s[i] before\n    continue\n  add s[i] to seen set\n  for each possible substring end\n    # check if it is special\n    dump the substring into a set\n    for each letter outside the substring\n      if it is in the set, it is not special\n\n```\n\n```\n\"abbbbbabbba\"\n  ^\n  i\n\n```\n\n```\n\"abbbbbabbba\"\n  ^       ^\n  i   need to grow up to here\n\n```\n\n```\n\"abbbbbabbba\"\n  ^    ^\n  i invalid\n\n```\n\n```\nAlgo 4: smallest special substring\nT: O(26 * n) = O(n)\nS: O(26 * n) = O(n)\npreprocessing: compute the first and last index of each letter\n\nfor each possible substring start i\n  for each index j starting at i\n    if s[j] appears before i\n      no special string starts at i\n    else\n      must_reach = max(must_reach, last occurrence of s[j])\n    if j reached must_reach:\n      s[i]...s[j] is a special substring (the shortest one starting at s[i])\n\n```\n\n```\n# T: O(26 * n) = O(n)\n# S: O(26 * n) = O(n)\ndef select_k_disjoint_special_substrings(s):\n    special_substrings = find_special_substrings(s)  # Part A\n    return most_non_overlapping_intervals(special_substrings)  # Part B\n\ndef find_special_substrings(s):  # Algo 4\n    # Preprocessing: compute the first and last index of each letter\n    first_idx = {}\n    last_idx = {}\n    for i, char in enumerate(s):\n        if char not in first_idx:\n            first_idx[char] = i\n        last_idx[char] = i\n\n    special_substrings = []\n    for i in range(len(s)):\n        if i != first_idx[s[i]]:\n            continue\n\n        must_reach = i\n        for j in range(i, len(s)):\n            if first_idx[s[j]] < i:\n                break\n            must_reach = max(must_reach, last_idx[s[j]])\n\n            if j == must_reach:\n                special_substrings.append((i, j))\n                break\n\n    return special_substrings\n\ndef most_non_overlapping_intervals(intervals):  # Classic Greedy\n    intervals.sort(key=lambda x: x[1])  # Sort by endpoint\n    count = 0\n    prev_end = -math.inf\n    for l, r in intervals:\n        if l > prev_end:\n            count += 1\n            prev_end = r\n    return count\n\n```",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/problem-solving-bctci-style?category=dsa",
      "author": "",
      "user_id": ""
    },
    {
      "title": "In Defense of Coding Interviews",
      "content": "# In Defense of Coding Interviews\n\n## The rationale for coding interviews\n\n## The two crucial flaws: memorization and cheating\n\n## The problems with the alternatives\n\n## Trial periods\n\n## How to improve coding interviews\n\n## More good things about coding interviews\n\n## Final thoughts\n\n### Take-home assignments\n\n### Previous experience\n\n### Other alternatives\n\n### The obvious things\n\n### Low effort ways of countering cheating\n\n### A fundamental tradeoff\n\n### Only one thing to study\n\n### They are not based on pedigree\n\nThere is already a lot of discourse about everything wrong with coding interviews. Indeed, one of the first chapters inBeyond Cracking the Coding InterviewisWhat's Broken About Coding Interviews?(it's one of the sneak peek free chapters inbctci.co/free-chapters).\n\nHere, I want tocollect all the arguments for the contrary view: that there are no clear better alternatives to coding interviews at Big Tech companies.\n\nI think Big Tech companies understand that being cracked at DS&A is not really necessary to be a good SWE. I don't think coding interviews are about that at all.\n\nImagine you are a Big Tech company, like Google. You receive a massive stream of applications, and you have to trim that down to a still large number of hires. Your hiring system needs to bescalable:\n\nSo, the first thing you do to scale--in true engineering fashion--is decoupling hiring and team matching. But that means you cannot hire for specific tech or domain experience: You don't know in what team candidates will end up, and your teams use a bunch of different languages and tech stacks (and a lot of it is internal anyway, so you definitely can't hire for that).\n\nSo, you need acompetence assessmentthat is independent of any particulars about the job, much like the role the SAT plays for college admissions. How do you do that?\n\nIf you are a Big Tech company, what you actually want is candidates who can take any complex software system (that's not part of the candidate's previous expertise) and answer hard questions about it, like what's the best way to add a feature, how to optimize it, or how it should be refactored. In other words, the competence you want to assess is general problem-solving skills, and that's what coding interviews are designed for: you are given a tough problem that you haveideallynever seen before (more on this later), and asked to showcase your thought process on how you approach it. When working as intended, I believe it gives moresignalabout your problem-solving skills and is easier to evaluate impartially than other popular interview formats, like talking about previous experience or take-home assignments. And there's an impartial way to evaluate them, by looking at the optimality of the solution.\n\nYes, there's a lot more to being a SWE than problem-solving skills--and that's why Google also does system design and behavioral interviews, but you still want to hire for this trait.\n\nHopefully, the rationale above covered one of the most common criticisms of coding interviews: that they do not reflect the day-to-day work of an engineer. Instead, I want to focus on whatIthink are the two biggest issues with coding interviews:\n\nMemorizing an absurd amount of leetcode problems gives you an edge.This is the classic reason why peoplehatecoding interviews with a passion. It has led to an \"arms race\" where candidates have to memorize more and more problems to improve their odds, and interviewers keep asking about more niche topics. At the extreme, coding interviews end up feeling like a lottery, and candidates find prep a soul-sucking waste of time.\n\nCheating has become easy with AI.This is a newer issue that's becoming more prevalent due to the fact that LLMs are pretty good at leetcoding. In real time, a cheater can feed the problem statement to an LLM (without obvious tales like \"select all\"), get a solution, and even a script for what to say.\n\nFrom the company's side, Issue (1) is not much of an issue. It definitely undermines the \"problem-solving\" part of the interview if a candidate is just recalling the question, but, statistically, if they do enough rounds, it's unlikely to happen every round. Some people (not me) also argue that the memorization is even good for the companies because it rewards hard work and dedication.\n\nFor what it's worth, one thing we hoped to change about the interview prep\ndiscourse with BCtCI is that candidates should focus on improving their\nproblem-solving skills rather than memorizing. See, for instance, how weteach binary searchor how weapproach hard\nproblems. But yes,\ngrinding is still necessary.\n\nIssue (1) also means that they'll lose a big chunk of candidates who are great SWEs but won't put up with grinding leetcode or that simply don't perform well under pressure (and, from personal experience, many great developers fall in this group). This sucks from the candidate's perspective, but if you are Google, you receive an overwhelming amount of applications from qualified candidates, so you are more OK with rejecting good candidates than accepting bad ones.\n\nIssue (2), on the other hand, has the potential to completely ruin coding interviews from the company's side. I'm seeing a quick rise of stories from frustrated interviewers who interviewed or even hired cheaters who could then not do the job (ExhibitA).\n\nI expect to see some kind of systematic response to this from Big Tech, but it's not clear what as of April 2025.This articleincludes some internal comments from Google execs:\n\n[Brian] Ong [Google‚Äôs vice president of recruiting] said candidates and Google employees have said they prefer virtual job interviews because scheduling a video call is easier than finding a time to meet in available conference rooms. The virtual interview process is about two weeks faster, he added.\n\nHe said interviewers are instructed to probe candidates on their answers as a way to decipher whether they actually know what they‚Äôre talking about.\n\n‚ÄúWe definitely have more work to do to integrate how AI is now more prevalent in the interview process,‚Äù said Ong. He said his recruiting organization is working with Google‚Äôs software engineer steering committee to figure out how the company can refine its interviewing process.\n\n‚ÄúGiven we all work hybrid, I think it‚Äôs worth thinking about some fraction of the interviews being in person,‚Äù Pichai responded. ‚ÄúI think it‚Äôll help both the candidates understand Google‚Äôs culture and I think it‚Äôs good for both sides.‚Äù\n\nI thought going back to in-person interviews would be ano-brainerfor a company like Google, but my reading of these comments is that they don't seem too bothered for now. ~shrug~\n\nDisclaimer: I haven't worked for a Big Tech company since before AI cheating\nwent viral, so I don't have internal insight into what people in charge of\nhiring are actually thinking.\n\nTwo related arguments that I don't subscribe to are (1) that leetcode-style interviews are no longer relevant because AI can solve them, and (2) that LLMs should be allowed during coding interviews because they are allowed on the job. The fact that AI can solve coding questions doesn't change that it still gives you the important signal that you want from humans: algorithmic thinking and general problem-solving skills. We just need humans to not cheat.\n\nI'll share my thoughts on how to improve coding interviews to address these issues. First, let's see why I think the alternatives are not better.\n\nTake-home assignments are even more subject to cheating, so that can't be the answer to cheating. Never mind LLMs, you don't even know who did the assignment. But take-home assignments have other flaws:\n\nI find this too subjective to give signal about problem-solving skills, and it's more about being a good \"salesperson\". I also think it's more subject to bias:people with a similar background as yours are probably more likely to have similar interests, and thus you may find their side-projects more interesting.\n\nThis makes sense to me in smaller companies, where you find a candidate with the perfect profile for the task at hand. It doesn't scale to Big Tech companies.\n\nIf there are other alternatives that fulfill the same purpose as coding interviews but don't suffer from the same issues, I'd love to hear about them.\n\nOne idea I liked is going through a code review during the interview, but it's not clear that (1) it offers as much signal about problem-solving skills, and (2) it is easy to evaluate impartially.\n\nRight now, FAANG interviewers focus too much on \"Did they solve the question or not?\" That's because they don't get much training on how to interview well (if at all), and it's the most straightforward way to pass on a hire/no hire recommendation to the hiring committee. This leads to many interviewers just pasting the prompt in and mostly sitting in silence. This is the ideal scenario for cheaters.\n\nThere are obvious ways to improve this situation:\n\nI also think that measures designed to throw LLMs off could be effective (at least in the short term) and require minimal effort, such as:\n\nSeeLinkedIn discussion.\n\nPerhaps the most effective way to counter both memorization and cheating is to make coding interviews more open ended and conversational. To use a chess analogy, a cheater may make a great move, but if you ask them to explain why they did it, they may not be able to.\n\nThe interviewer can use a coding question as a launching point, but then drill down on technical topics as they come up. So, e.g., if a candidate chooses to use a heap, the interviewer could go into:\n\nIf interviewers did that, it wouldn't even be necessary to ask tricky questions. They could evenaskFibonacci.\n\nThe problem is that, the more open ended the interview is, the more difficult\nit is to evaluate candidates systematically. To start, you'd need better\ninterviewers and better interviewer training. However, it seems to me that\nthere isa fundamental tradeoff between how objective the evaluation is and\nhowgameablethe interview is by memorizing or cheating.\n\nI don't have a good solution to this--I would love to hear yours.\n\nAn underrated upside of leetcode interviews is that you only need to study one thing for all the big companies. I feel like if every company asked different things, interview prep time would decrease for any specific company but increase overall.\n\nIn fact, a likely outcome of the push for fewer leetcode-style interviews is an even worse compromise: coding interviews won't completely go away, so you'll still need to grind leetcode, but you'll also have to prep a bunch of specialized stuff for each company on top of that.\n\nSeeLinkedIn discussion.\n\nCoding interviews act as a form of standardized testing, similar to the role of SAT for college admissions in the US. And, much like the SAT allows high-school students from all backgrounds to attend top colleges, coding interviews allow candidates from all backgrounds to get at the top companies. The leetcode grind is the same for everyone.\n\nIf we kill coding interviews without a good alternative, it seems inevitable that Big Tech companies will give more weight to resume and referrals. We all agree that's a bad thing.\n\nThe best question we got in ourReddit AMAfor BCtCI was whetherwe'd use coding interviews ourselves if we were in charge of hiring. You can see Gayle's, Mike's (mikemroczka.com), and my answers. We all saidnoin its current form, but yes with caveats/improvements.\n\nMy favorite answer was Mike's. He's less of a proponent of leetcode-style interviews than I am, but I think he strikes a thoughtful balance between DS&A and practical stuff:\n\nBest question so far. Yes, I would ask DS&A questions still, but not exclusively and not difficult ones. Many startups shouldn't ask them though, because most people are bad at discerning what a reasonable question is.\n\nI would do 4-5 rounds of interviews because less than that is hard to be significant, but more than that and you're wasting too much of a candidate's time (Netflix has a whopping 8 rounds!!). For a senior engineer role, I'd do something like this.\n\nRound 1: An online DS&A assessment to filter out people that can't do the simple things (easy & very simple medium questions only, not hard)\n\nRound 2: Live interview of DS&A (simple medium, not hard. essentially just making sure you didn't cheat on the previous round by asking you to explain your answers and code something new from scratch)\n\nRound 3: System design (no need for perfect answers, but I'd ask an uncommon question to ensure it was something they hadn't memorized)\n\nRound 4: Behavioral, with a focus on cross-team impact. This would just be a simple pass/fail and just a vibe check. It might also be skipped if the prior two rounds had good signal for emotional intelligence\n\nRound 5: Remote logging into a server and working on an actual bug that was fixed in our codebase before. There would be no time limit, but time on the server would be logged to weed people out who needed days to complete a simple task.\n\nThis ends up testing a little bit of theory, practical knowledge, emotional intelligence, and the generalized SWE skillset.\n\nFull disclosure. This is my answer. Not the answer of every author. Again, I'd stress that the average startup wouldn't benefit from DS&A and shouldn't be asking them\n\nWant to leave a comment? You can post under thelinkedin postor theX post.",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/in-defense-of-coding-interviews?category=dsa",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Lazy vs Eager Algorithms",
      "content": "# Lazy vs Eager Algorithms\n\n## Introduction\n\n## Lazy vs Eager Tree Traversals\n\n## Lazy vs Eager graph DFS\n\n## Lazy vs Eager grid algorithms\n\n## Lazy vs Eager Memoization DP\n\n## Lazy vs Eager Iterative Tree traversals\n\n## Eager Graph BFS is better than lazy Graph BFS\n\n## Eager Dijkstra is better than Lazy Dijkstra, but harder to implement\n\n## So, Lazy or Eager?\n\n### Pros of lazy algorithms\n\n### Pros of eager algorithms\n\n### My preference\n\nWarning: I have not tested any code snippet below. Please let me know if you find a bug.\n\nMost algorithms have multiple valid implementations. For instance, in a binay tree problem, you have multiple ways of handling NULL nodes. I'm currently writingBeyond Cracking the Coding Interview(beyondctci.com), which means that my co-authors and I need to take a stance on what version of each algorithm to use. Ideally, we want to show the simplest version of each algorithm:\n\nIn the book, we don't claim that the version we show is \"the best\" - we say to use the one that works best for you. But showing one in the book is an implicit endorsement.\n\nOne particular decision that comes up again and again with recursive algorithms is choosing between thelazyversion and theeagerversion of an algorithm.\n\nWhat 'valid' means depends on the algorithm--we'll see plenty of examples. We'll also translate the concept of eager vs lazy to iterative algorithms.\n\nAneagertree traversal eagerly validates that the children are not NULL before passing them to the recursive function. Alazytree traversal doesn't, so it needs to check if the current node is NULL before accessing it.\n\nFor instance, here is eager vs lazy preorder traversal:\n\nBoth have the same runtime and space analysis. Even the constant factors probably don't change much, so it comes down to style preference. Which one do you prefer?\n\nAneagergraph DFS eagerly checks that the neighbors are not already visited before passing them to the recursive function. Alazygraph DFS doesn't, so it needs to check if the current node is already visited.\n\nFor a graph DFS, we can also do a mix between lazy and eager: we can eagerly check if nodes are already visited, and lazily mark them as visited:\n\nAgain, they all have the same analysis. Which one do you prefer?\n\nConsider the same DFS algorithm but on a grid of 0's and 1's. The 0's are walkable cells, the 1's are obstacles, and\nwalkable cells next to each other are connected. This time, we need to check that the neighbors are not out of bounds, which we can do lazily or greedily.\n\nIn alazymemoization DP (Dynamic Programming) algorithm, we call the recursive function for a subproblem without checking first if we have already computed that subproblem. In aneageralgorithm, we only call the recursive function for subproblems that we still need to compute.\n\nFor memoization DP, I thinklazyis cleaner and more conventional.\n\nConsider a level-order traversal on a binary tree. A level-order traversal is an iterative algorithm that uses a queue data structure.\n\nThis is the first exception where one is better than the other in terms of big O analysis. ThelazyBFS allows adding already-visited nodes to the queue, while theeagerone does not. We'll first look at the two versions, and then analyze them.\n\nIt may come as a surprise that these two arenotequivalent like all the other examples.\n\nLet's sayVis the number of nodes andEis the number of edges. To keep things simple, consider that the graph is connected, meaning thatEis at leastV-1and at mostO(V¬≤).\n\nBoth versions takeO(E)time. The difference is in the space complexity: the eager version takesO(V)space because we never have the same node twice in the queue. The lazy version takesO(E)space because we allow the same nodes multiple times in the queue.\n\nTo see this, consider a complete graph:\n\nBy the time we finish popping the nodes added as neighbors of the start node, we've doneVqueue pops andV¬≤queue appends, so the queue size isO(V¬≤).\n\nSo, why didn't this happen for other lazy algorithms we have seen?\n\nI wrote extensively about different Dijktsra implementations inthis Dijkstra blog post.\n\nDijkstra is similar to BFS, with the main difference that it uses a priority queue (PQ) instead of a queue to visit the nodes that are closer first (in terms of shortest paths).\n\nIn BFS, when a node is added to the queue, its distance from the starting node is already established and there is never a reason to add it again to the queue. In Dijkstra, when a node is added to the PQ, we might later find a shorter path while it is still in the PQ. When that happens, we can do two things:\n\nBoth versions takeO(E*log V)time, but eager is more space efficient, analogously to eager BFS:O(V)for eager Dijkstra vsO(E)for lazy Dijkstra.\n\nHere is lazy Dijkstra:\n\nUnfortunately, eager Dijkstra is not so easy to implement in Python because we are missing thedecrease_key()operation in a heap (and Python does have a self-balancing BST data structure, which can also be used for eager Dijkstra). You can see a BST-based C++ implementation in my other blog post.\n\nThedijkstra_lazy()algorithm above is more or less standard and it has been known as \"lazy Dijkstra\" for a while. However, it is possible to make an even lazier version which has the same runtime and space analysis (but likely bigger constant factors). The idea is that instead of only adding to the PQ the neighbors for whom we find an improved distance, we can simply add all of them, and discard duplicates once we extract them from the PQ:\n\nWe could keep looking at lazy vs eager algorithms, but I'll stop here. In aggregate, these are the pros and cons that I see:\n\nHere are my personal preferences for coding interviews (not those of the other authors of 'Beyond Cracking the Coding Interview'):\n\nIn the book, we'll definitely mention that some algorithms can be implemented in a lazy or eager way (in way less detail than here), and that you should choose the one that feels easier to you. But, we still need to pick one to show in the problem solutions. One idea is trying to be consistent throughout (e.g., doing all tree and graph traversals in an eager way). If you have an opinion on which one is better, please reach out! I'd love to hear it.\n\n```\nclass Node:\n  def __init__(self, val, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\n\ndef preorder_traversal_eager(root):\n  res = []\n\n  # CANNOT be called with node == None\n  def visit(node):\n    res.append(node.val)\n    if node.left:\n      visit(node.left)\n    if node.right:\n      visit(node.right)\n\n  if not root:\n    return []\n  visit(root)\n  return res\n\ndef preorder_traversal_lazy(root):\n  res = []\n\n  # CAN be called with node == None\n  def visit(node):\n    if not node:\n      return\n    res.append(node.val)\n    visit(node.left)\n    visit(node.right)\n\n  visit(root)\n  return res\n\n```\n\n```\n# Returns all nodes reachable from start\ndef dfs_eager(adj_lists, start):\n  res = []\n  visited = set()\n\n  def visit(node):\n    res.append(node)\n    for neighbor in adj_lists[node]:\n      if neighbor not in visited:\n        visited.add(neighbor)\n        visit(neighbor)\n\n  visited.add(start)\n  visit(start)\n  return res\n\ndef dfs_lazy(adj_lists, start):\n  res = []\n  visited = set()\n\n  def visit(node):\n    if node in visited:\n      return\n    visited.add(node)\n    res.append(node)\n    for neighbor in adj_lists[node]:\n      visit(neighbor)\n\n  visit(start)\n  return res\n\n```\n\n```\ndef dfs_lazy(adj_lists, start):\n  res = []\n  visited = set()\n\n  def visit(node):\n    visited.add(node)\n    res.append(node)\n    for neighbor in adj_lists[node]:\n      if neighbor not in visited:\n        visit(neighbor)\n\n  visit(start)\n  return res\n\n```\n\n```\n# Returns all cells reachable from (start_row, start_col).\ndef grid_dfs_eager(grid, start_row, start_col):\n  nr, nc = len(grid), len(grid[0])\n  res = []\n  visited = set()\n\n  def visit(row, col):\n    res.append((row, col))\n    for dir in ((-1, 0), (1, 0), (0, 1), (0, -1)):\n      r, c = row + dir[0], col + dir[1]\n      if 0 <= r < nr and 0 <= c < nc and grid[r][c] == 0 and (r, c) not in visited:\n        visited.add((r, c))\n        visit(r, c)\n\n  # Assumes (start_row, start_col) is within bounds\n  visited.add((start_row, start_col))\n  visit(start_row, start_col)\n  return res\n\ndef grid_dfs_lazy(grid, start_row, start_col):\n  nr, nc = len(grid), len(grid[0])\n  res = []\n  visited = set()\n\n  def visit(row, col):\n    if row < 0 or row >= nr or col < 0 or col >= nc or grid[row][col] == 1:\n      return\n    if (row, col) in visited:\n      return\n    visited.add((row, col))\n    res.append((row, col))\n    for dir in ((-1, 0), (1, 0), (0, 1), (0, -1)):\n      visit(row + dir[0], col + dir[1])\n\n  visit(start_row, start_col)\n  return res\n\n```\n\n```\n# Returns all cells reachable from (start_row, start_col).\ndef fibonacci_eager(n):\n  memo = {}\n\n  def fib_rec(i):\n    if i <= 1:\n      return 1\n    if i-1 in memo:\n      prev = memo[i-1]\n    else:\n      prevprev = fib_rec(i-1)\n    if i-2 in memo:\n      prevprev = memo[i-2]\n    else:\n      prev = fib_rec(i-2)\n    memo[i] = prev + prevprev\n    return memo[i]\n\n  return fib_rec(n)\n\ndef fibonacci_lazy(n):\n  memo = {}\n\n  def fib_rec(i):\n    if i <= 1:\n      return 1\n    if i in memo:\n      return memo[i]\n    memo[i] = fib_rec(i-1) + fib_rec(i-2)\n    return memo[i]\n\n  return fib_rec(n)\n\n```\n\n```\ndef level_order_traversal_eager(root):\n  if not root:\n    return []\n  res = []\n  Q = deque([root])\n  while Q:\n    node = Q.popleft()\n    res.append(node.val)\n    if node.left:\n      Q.append(node.left)\n    if node.right:\n      Q.append(node.right)\n  return res\n\ndef level_order_traversal_lazy(root):\n  res = []\n  Q = deque([root])\n  while Q:\n    node = Q.popleft()\n    if not node:\n      continue\n    res.append(node.val)\n    Q.append(node.left)\n    Q.append(node.right)\n  return res\n\n```\n\n```\ndef graph_bfs_eager(adj_lists, start):\n  res = []\n  visited = set()\n  visited.add(start)\n  Q = deque([start])\n\n  while Q:\n    node = Q.popleft()\n    res.append(node.val)\n    for neighbor in adj_lists[node]:\n      if neighbor not in visited:\n        visited.add(neighbor)\n        Q.append(neighbor)\n  return res\n\ndef graph_bfs_lazy(adj_lists, start):\n  res = []\n  visited = set()\n  Q = deque([start])\n\n  while Q:\n    node = Q.popleft()\n    if node in visited:\n      continue\n    visited.add(node)\n    res.append(node)\n    for neighbor in adj_lists[node]:\n      Q.append(neighbor)\n  return res\n\n```\n\n```\ndef dijkstra_lazy(adj_lists, start):\n  dist = defaultdict(int)\n  dist[start] = 0\n  visited = set()\n  PQ = [(0, start)]\n  while PQ:\n    _, node = heappop(PQ)  # Only need the node, not the distance.\n    if node in visited:\n      continue  # Not the first extraction.\n    visited.add(node)\n    for neighbor, weight in adj_lists[node]:\n      if dist[node]+weight < dist[neighbor]:\n        dist[neighbor] = dist[node]+weight\n        # Neighbor may already be in the PQ; we add it anyway.\n        heappush(PQ, (dist[neighbor], neighbor))\n  return dist\n\n```\n\n```\ndef dijkstra_super_lazy(adj_lists, start):\n  dist = defaultdict(int)\n  dist[start] = 0\n  PQ = [(0, s)]\n  while PQ:\n    d, node = heappop(PQ)\n    if dist[node] != math.inf: continue\n    dist[node] = d\n    for neighbor, weight in adj_lists[node]:\n      heappush(PQ, (dist[node]+weight, neighbor))\n  return dist\n\n```",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/lazy-vs-eager?category=dsa",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Actually Implementing Dijkstra's Algorithm",
      "content": "# Actually Implementing Dijkstra's Algorithm\n\n## Introduction\n\n## The shortest-path problem\n\n## The graph's representation\n\n## Dijkstra's algorithm idea\n\n## Priority queues\n\n## Pseudocode with a priority queue\n\n## Analysis of Dijkstra's algorithm\n\n## Linear-search Dijkstra for dense graphs\n\n## Priority queues for sparse graphs\n\n## Lazy Dijkstra\n\n## BST Dijkstra\n\n## Practice problems\n\nDijkstra's algorithm for the shortest-path problem is one of the most important graph algorithms, so it is often covered in algorithm classes. However, going from the pseudocode to an actual implementation is made difficult by the fact that it relies on a priority queue with a \"decrease key\" operation. While most programming languages offer a priority queue data structure as part of their standard library, this operation is generally not supported (e.g., in C++, Java or Python). In this blog, we go over the different ways to implement Dijkstra's algorithm with and without this operation, and the implications of using each. All in all, we consider 5 versions of Dijkstra (names mostly made up by me):\n\nRoughly, each of the 5 versions corresponds to a different data structure used to implement the priority queue. Throughout the post, letnbe the number of nodes andmthe number of edges. Here is summary of the resulting runtime and space complexities:\n\nWe provide implementations in Python and C++. The initial sections are mostly background. If you are already familiar with Dijkstra's algorithm, you can skip to the code snippets.\n\nThe input consists of a graphGand a special nodes. The edges ofGare directed and have non-negative weights. The edge weights represent the \"lengths\" of the edges. The goal is to find the distance fromsto every other node inG. The distance fromsto another node is the length of the shortest path fromsto that node, and the length of a path is the sum of the lengths of its edges. If a node is unreachable froms, then we say that the distance is infinite.\n\nMore precisely, this is known as the \"single-source shortest-path\" (SSSP) problem, because we find the distance from one node to every other node. Related problems include the \"all-pairs shortest paths\" problem and the single-source single-destination problem. Dijkstra's algorithm is a really efficient algorithm for the SSSP problem when the edges are non-negative. Dijkstra's algorithm does not work in the presence of negative edges (zero-weight edges are fine). IfGcontains negative edges, we should use the Bellman-Ford algorithm instead.\n\nThe constraint that the edges are directed is not important: ifGis undirected, we can simply replace every undirected edge{u,v}with a pair of directed edges(u,v)and(v,u)in opposite directions and with the weight of the original edge.\n\nTo simplify things, we make a couple of assumptions that do not make any actual difference:\n\nA graph is a mathematical concept. In the context of graph algorithms, we need to specify how the graph is represented as a data structure. For Dijkstra's algorithm, the most convenient representation is the adjacency list. The valuable thing about the adjacency list representation is that it allows us to iterate through the out-going edges of a node efficiently.\n\nIn the version of the adjacency list that we use, each node is identified with an index from0ton-1. The adjacency list contains one list for each node. For each nodeubetween0andn-1, the listG[u]contains one entry for each neighbor ofu. In a directed graph, if we have an edge(u,v)fromutov, we say thatvis a neighbor ofu, butuis not a neighbor ofv. Since the graph is weighted, the entry for each neighborvconsists of a pair of values,(v, l): the destination nodev, and the lengthlof the edge(u,v).\n\nOne of the data structures that we maintain is a listdistwheredist[u]is the best distance known foruso far. At the beginning,dist[s] = 0, and for every other nodedist[u] = infinity. These distances improve during the algorithm as we consider new paths. Our goal is to get to the point wheredistcontains the correct distance for every node.\n\nDuring the algorithm, thedistlist is only updated through an operation called \"relaxing\" an edge.\n\nIn words, relaxing an edge(u,v)means checking if going toufirst and then using the edge(u,v)is shorter than the best distance known forv. If it is shorter, then we updatedist[v]to the new, better value.\n\nDijkstra's algorithm is based on the following observations:\n\nDijkstra's algorithm is efficient because every edge is relaxed only once (unlike other algorithms like Bellman-Ford, which relaxes the edges multiple times). To relax every edge only once, we must relax the out-going edges of each node only after we have found the correct distance for that node.\n\nAt the beginning, onlyshas the correct distance, so we relax its edges. This updates the entries indistfor its neighbors. The neighbor ofsthat is closest tos, say,x, has the correct distance at this point. This is because every other path fromstoxstarts with a longer edge, and, since the graph does not have negative-weight edges, additional edges can only increase the distance. Next, sincexhas the correct distance, we can relax its out-going edges. After that, the nodeywith the 3rd smallest distance indist(aftersandx) has the correct distance because the node beforeyin the shortest path fromstoymust be eithersorx. It cannot be any other node because simply reaching any node that is notsorxis already more expensive than the distance we have found fory. We continue relaxing the out-going edges of nodes, always taking the next node with the smallest found distance. By generalizing the argument above, when we relax the out-going edges of each node, that node already has the correct distance. We finish after we have gone through all the nodes. At that point,distcontains the correct distance for every node.\n\nIn order to implement Dijkstra's algorithm, we need to decide the data structures used to find the unvisited node with the smallest distance at each iteration.\n\nPriority queues are data structures that are useful in many applications, including Dijkstra's algorithm.\n\nIn a normal queue, we can insert new elements and extract the oldest element. A priority queue is similar, but we can associate a priority with each element. Then, instead of extracting the oldest element, we extract the one with highest priority. Depending on the context, \"highest priority\" can mean the element with the smallest or largest priority value. In this context, we will consider that the highest priority is the element with the smallest priority value.\n\nA priority queue is anabstractdata structure. That means that it only specifies which operations it supports, but not how they are implemented. There actually exist many ways to implement a priority queue. To make matters more confusing, different priority queues implementations support different sets of operations. The only agreed part is that they must support two basic operations:\n\nFor Dijkstra's algorithm, we can use a priority queue to maintain the nodes, usingdist[u]as the priority for a nodeu. Then, at each iteration we can extract the unvisited node with the smallest distance. However, there is a problem: when we relax an edge, the valuedist[u]may decrease. Thus, we need the priority queue to support a third operation which is not commonly supported:\n\nA related operation is removing elements that are not the most prioritary:\n\nIf a priority queue implements remove, we can use it to obtain the same functionality aschange-priority(e, k): we can first callremove(e)and then reinsert the element with the new key by callinginsert(e, k).\n\nAssuming that we have a priority queue data structure that supportsinsert,extract-min, andchange-priority, Dijkstra's pseudocode would be as follows.\n\nThe priority queue contains the unvisited nodes, prioritized by distance froms. At the beginning, the priority queue contains all the nodes, and they are removed as they are visited.\n\nA common variation is to add them to the priority queue when they are reached for the first time, instead of adding all the nodes at the beginning. The only change is how the priority queue is initialized and the if-else cases at the end:\n\nIt does not change the runtime or space complexity, but there is also no downside to deferring insertions to the PQ. On average, the PQ will contains fewer elements.\n\nUsually, we analyze the algorithmsafterimplementing them. However, in order to choose the best data structure for the priority queue, we need to analyze how much we use each type of operation.\nThus, it is convenient to define the runtime in terms of the priority queue operations, without specifying yet how they are done. LetT_ins,T_min, andT_changebe the time perinsert,extract_min, andchange_priorityoperation, respectively, on a priority queue containingnelements.\n\nThe mainwhileloop hasniterations, and the total number of iterations of the innerforloop, across allniterations, ism. This is because each edge is relaxed once.\n\nThe runtime is dominated by the priority queue operations, so it isO(n*T_ins + n*T_min + m*T_change). These operations dominate the runtime because everything else combined (like updating thedistlist) takesO(n+m)time.\n\nThe simplest way to simulate theextract_minfunctionality of a priority queue is to iterate through the entiredistlist to find the smallest value among the non-visited entries. If we do this, we don't need a priority queue. We call thislinear-search Dijkstra. We getT_ins = O(1),T_min = O(n), andT_change = O(1). Plugging those in, the total runtime of linear-search Dijkstra isO(n + n*n + m) = O(n¬≤), where we simplify out themterm becausen¬≤ > min any graph. More precisely, a directed graph withnnodes has at mostn*(n-1)=O(n¬≤)edges.\n\nA graph with \"close to\"n*(n-1)edges is called dense.Linear-search Dijkstra is actually optimal for dense graphs.This is because Dijkstra's algorithm must takeO(m)time just to relax all edges, so it cannot be faster thanO(m), and, in dense graphs that is already proportional toO(n¬≤).\n\nHere is a Python implementation:\n\nAnd C++. We omit the includes and \"using namespace std;\".\n\nTheO(n¬≤)time from the implementation above is slow if the graphGis sparse, meaning that the number of edges is small relative toO(n¬≤). Recall that the time isO(n*T_ins + n*T_min + m*T_change). Ifmis more similar tonthan ton¬≤, then we would be happy to trade a slowerchange_prioritytime for a fasterextract_mintime.\n\nThe best possible answer in terms of big-O notation is to use a priority queue implementation based on a data structure known as aFibonacci Heap. A Fibonacci heap containing at mostnelements achieves the following times:\n\nAmortized time means that it could take more time, but, if we average out the times for that operation across the execution of an algorithm, each one takes that time on average.\n\nUsing a Fibonacci heap, we get a total time ofO(n*log n + m)for Dijkstra's algorithm. This is really fast in terms of big-O notation, but Fibonacci heaps have larger constant factors than other data structures, making them slower in practice.\n\nThe most common way to implement a priority queue is with abinary heap. It is simple and fast in practice. Binary heaps supportinsertandextract_mininO(log n)like a Fibonacci heap. However, they do not support thechange_priorityoperation.\n\nIt is possible to modify a binary heap to to support thechange_priorityoperation inO(log n)time. The result is sometimes called an \"indexed priority queue\". Using an indexed priority queue, we would get a total runtime ofO(n*log n + m*log n) = O(m*log n). This is slightly worse than with a Fibonacci heap, and faster in practice.\n\nIn any case, the priority queues provided by languages like C++, Python, and Java, do not support thechange_priorityoperation. This creates a disconnect between the pseudocode taught in classrooms and the actual code that we can write.\n\nThe goal of this post is to illustrate the options to deal with this issue. There are 3:\n\nWe will cover the latter two options. The first option is an interesting exercise in data structures (Iimplementedit once for a project), but it is more about the inner workings of binary heaps than it is about Dijkstra's algorithm.\n\nAll three options have a runtime ofO(m*log n). Note that for dense graphs, this becomesO(n¬≤ log n)time, so they are all worse than the naive linear-search Dijkstra. In terms of space, lazy Dijkstra is worse than the others, as it needsO(m)space, as opposed toO(n)for the other options.\n\nWe implement Dijkstra using a priority queue that does not support the change-priority operation. We need the following change: when we find a shorter distance to a node that is already in the priority-queue, instead of using the \"change-priority\" operation, we simply use an \"insert\" operation and add a copy of the node in the priority queue with the new distance. Then, when we extract a node from the priority queue, we ignore it if it is not the first time we extract that node. We call this version of Dijkstra \"lazy Dijkstra\" because we \"postpone\" the removal of the pre-existing copy of the node.\n\nHere is a Python version. The logical structure of a binary heap is a binary tree, but, internallythe tree is represented as an arrayfor efficiency reasons. Python is a bit whack because, instead of having a priority queue module that encapsulates the implementation, we have theheapqmodule, which provides priority queue operations that can be used directly on a list representing a binary heap.heapqoffers functionsheappop(equivalent toextract_min) andheappush(equivalent toinsert). These functions receive a normal Python list as a parameter, and this list is assumed to represent a binary heap. In Python, if the priority queue contains tuples, then the first element in the tuple is the priority. Thus, in the implementation we insert tuples to the priority queue with the distance first and the node second.\n\nHere is a C++ version:\n\nAnalysis: since nodes can be added to the priority queue multiple times, in lazy Dijkstra the maximum number of elements in the priority queue increases fromO(n)toO(m). As a result, we doO(m)extract_minandinsertoperations. The total runtime isO(m*log m). This can be simplified toO(m*log n), becauselog m < log (n¬≤) = 2 log n = O(log n). Thus, in terms of big-O notation,lazy Dijkstra is equally fast as textbook Dijkstra(Dijkstra with an indexed priority queue). The only thing that got worse is the space used by the priority queue.\n\nSelf-balancing binary search trees, like red-black trees or AVL trees, are a type of data structure that maintains a set of elements ordered according to values associated with the elements, known as the elements' keys. They support a few operations, all inO(log n)time. For our use case, we are interested in the following ones:\n\nThese operations allow us to use a self-balancing BST to implement a priority queue. With the third operation, we can even implement thechange_priorityoperation, as we mentioned.\n\nPython does not actually have a self-balancing binary search tree module (why?!), so we cannot implement this version of Dijkstra either without finding or implementing our own self-balancing BST.\n\nHere is a C++ version. In C++, the set data structure is implemented as a self-balancing BST:\n\nAnalysis: in a sense, BST Dijkstra combines the best of both worlds: it has the same runtime and space complexity as textbook Dijkstra, without needing the extra space of Lazy Dijkstra, but it uses a much more ubiquitous data structure, a self-balancing BST. However, in practice, self-balancing BSTs are slower than binary heaps. This has to do with the fact that heaps can be implemented on top of an array, while BSTs use recursive tree data structures with child pointers. The array has much betterlocality of reference. For sparse graphs, I'd expect the performance of the different versions to be ordered as follows:\n\nTextbook Dijkstra > Lazy Dijkstra > BST Dijkstra > Theoretical Dijkstra > Linear-search Dijkstra\n\nHere are some problems on leetcode:\n\n```\ndef relax(u,v,l): #l is the length of the edge (u,v)\n    if dist[u] + l < dist[v]:\n        dist[v] = dist[u] + l\n\n```\n\n```\nHigh-level pseudocode of Dijkstra's algorithm\n\ndijkstra(G, s):\n    dist = list of length n initialized with INF everywhere except for a 0 at position s\n    mark every node as unvisited\n    while there are unvisited nodes:\n        u = unvisited node with smallest distance in dist\n        mark u as visited\n        for each edge (u,v):\n            relax((u,v))\n\n```\n\n```\nDijkstra pseudocode (with a priority queue)\n\ndijkstra(G, s):\n    dist = list of length n initialized with INF everywhere except for a 0 at position s\n    PQ = empty priority queue\n    for each node u: PQ.insert(u, dist[u])\n    while not PQ.empty():\n        u = PQ.extract_min()\n        for each edge (u,v) of length l:\n            if dist[u]+l < dist[v]:\n                dist[v] = dist[u]+l\n                PQ.change_priority(v, dist[v])\n\n```\n\n```\nDijkstra pseudocode (with deferred insertions to the PQ)\n\ndijkstra(G, s):\n    dist = list of length n initialized with INF everywhere except for a 0 at position s\n    PQ = empty priority queue\n    PQ.insert(s, 0)\n    while not PQ.empty():\n        u = PQ.extract_min()\n        for each edge (u,v) of length l:\n            if dist[u]+l < dist[v]:\n                dist[v] = dist[u]+l\n                if v in PQ: PQ.change_priority(v, dist[v])\n                else: PQ.insert(v, dist[v])\n\n```\n\n```\ndef linearSearchDijkstra(G, s):\n    n = len(G)\n    INF = 9999999\n    dist = [INF for node in range(n)]\n    dist[s] = 0\n    vis = [False for node in range(n)]\n    for i in range(n):\n        u = -1\n        for v in range(n):\n            if not vis[v] and (u == -1 or dist[v] < dist[u]):\n                u = v\n        if dist[u] == INF: break #no more reachable nodes\n        vis[u] = True\n        for v, l in G[u]:\n            if dist[u] + l < dist[v]:\n                dist[v] = dist[u] + l\n    return dist\n\n```\n\n```\nvector<int> linearSearchDijkstra(const vector<vector<pair<int,int>>>& G, int s) {\n    int n = G.size();\n    vector<int> dist(n, INT_MAX);\n    dist[s] = 0;\n    vector<int> vis(n, false);\n    for (int i = 0; i < n; i++) {\n        int u = -1;\n        for (int v = 0; v < n; v++)\n            if (not vis[v] and (u == -1 or dist[v] < dist[u]))\n                u = v;\n        if (dist[u] == INT_MAX) break; //no more reachable nodes\n        vis[u] = true;\n        for (auto edge : G[u]) {\n            int v = edge.first, l = edge.second;\n            if (dist[u]+l < dist[v])\n                dist[v] = dist[u]+l;\n        }\n    }\n    return dist;\n}\n\n```\n\n```\ndef lazyDijkstra(G, s):\n    n = len(G)\n    INF = 9999999\n    dist = [INF for u in range(n)]\n    dist[s] = 0\n    vis = [False for u in range(n)]\n    PQ = [(0, s)]\n    while len(PQ) > 0:\n        _, u = heappop(PQ) #only need the node, not the distance\n        if vis[u]: continue #not first extraction\n        vis[u] = True\n        for v, l in G[u]:\n            if dist[u]+l < dist[v]:\n                dist[v] = dist[u]+l\n                heappush(PQ, (dist[u]+l, v))\n    return dist\n\n```\n\n```\nvector<int> lazyDijkstra(const vector<vector<pair<int,int>>>& G, int s) {\n    int n = G.size();\n    vector<int> dist(n, INT_MAX);\n    dist[s] = 0;\n    vector<int> vis(n, false);\n    //PQ of (distance, node) pairs prioritized by smallest distance\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> PQ;\n    PQ.push({0, s});\n    while (not PQ.empty()) {\n        int u = PQ.top().second;\n        PQ.pop();\n        if (vis[u]) continue; //not first extraction\n        vis[u] = true;\n        for (auto edge : G[u]) {\n            int v = edge.first, l = edge.second;\n            if (dist[u]+l < dist[v]) {\n                dist[v] = dist[u]+l;\n                PQ.push({dist[v], v});\n            }\n        }\n    }\n    return dist;\n}\n\n```\n\n```\nvector<int> bstDijkstra(const vector<vector<pair<int,int>>>& G, int s) {\n    int n = G.size();\n    vector<int> dist (n, INT_MAX);\n    dist[s] = 0;\n    //self-balancing BST of (distance, node) pairs, sorted by smallest distance\n    set<pair<int, int>> PQ;\n    PQ.insert({0, s});\n    while (not PQ.empty()) {\n        int u = PQ.begin()->second; //extract-min\n        PQ.erase(PQ.begin());\n        for (auto edge : G[u]) {\n            int v = edge.first, l = edge.second;\n            if (dist[u]+l < dist[v]) {\n                //erase and insert instead of change-priority\n                PQ.erase({dist[v], v});\n                dist[v] = dist[u]+l;\n                PQ.insert({dist[v], v});\n            }\n        }\n    }\n    return dist;\n}\n\n```",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/implementing-dijkstra?category=dsa",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Reachability Problems and DFS",
      "content": "# Reachability Problems and DFS\n\n## Introduction\n\n## Which nodes can be reached from node s?\n\n## Can node s reach node t?\n\n## Find a path from s to t\n\n## Is the graph connected?\n\n## How many connected components are there?\n\n## Which nodes are in the same connected components?\n\n## Is the graph acyclic?\n\n## Is the graph a tree?\n\n## Is the graph bipartite?\n\n## Can the graph be two-colored?\n\n## What is the distance from a node s to every other node in a tree?\n\n## Find a spanning tree\n\n## Conclusions\n\n### Prerequisites\n\n### Coding conventions\n\n### Iterative version\n\n### Practice problems\n\n### Practice problems\n\n### Practice problems\n\n### Practice problems\n\n### Practice problems\n\n### Practice problems\n\n### Practice problems\n\nDepth-first search, or DFS, is a fundamental graph algorithm that can be used to solvereachabilityproblems. This post shows how to adapt the basic DFS template to solve several problems of this kind. Reachability problems are often easier in undirected graphs. Below, we specify if the algorithm works for undirected graphs, directed graphs, or both.\n\nWe assume that the reader is already familiar with the concept of DFS.Hereis an excellent video introducing DFS with step-by-step animations. We also assume that the reader is familiar with the adjacency list representation of a graph, and we use big-O notation in the analysis.\n\nThe algorithms below are in Python.ndenotes the number of nodes. Nodes are identified with integers in the range0..n-1. The graphGis a graph stored as an adjacency list:Gis a list ofnlists. For eachvbetween0andn-1,G[v]is the list of neighbors ofG.\n\nIf the graph is given as an edge list instead, we can initialize it as follows:\n\nIf the graph is given as an adjacency matrix, we can iterate through the rows of the adjacency matrix instead of through the adjacency lists. To iterate through the neighbors of a nodev, instead of\n\nNote that using an adjacency matrix affects the runtime analysis of DFS:O(n¬≤)instead ofO(m).\n\nThis is the simplest question that can be answered with DFS. The primary data structure in DFS is a list of booleans to keep track of already visited nodes (we call itvis). If we start a DFS search from a nodes, the reachable nodes will be the ones for whichvisis true.\n\nFor this,Gcan be directed or undirected. We make use of a nested function in Python so that we do not need to passGandvisas parameters (in Python nested functions have visibility over the variables in the scope where they are defined).\n\nDFS runs inO(m)time andO(n)space, wheremis the number of edges. This is because each edge is considered twice, once from each endpoint, if the endpoints end up being visited, or zero times if the endpoints are not visited.\n\nThe iterative version takesO(m)space instead ofO(n)because nodes can be inserted into the stack multiple times (up to one time for each incident edge). Alternatively, we can mark the nodes as visited when we add them to the stack instead of when we remove them. This change reduces the space usage to the usualO(n). However, with this change, the algorithm is no longer DFS. It still works for answering reachability questions because the set visited nodes is the same, but the order in which they are visited is no longer consistent with a depth-first search order (it is closer to a BFS (breath-first search) order, but also not exactly a BFS order).\n\nThe difference between marking nodes when they added vs removed from the stack is discussed in detailhere. Since the recursive version is shorter and optimal in terms of space, we favor it from now on. That said, it should be easy to adapt the iterative version above to the problems below.\n\nWe use the same code from before, but we add early termination as soon as we seet. Now, the recursive function has a return value.\n\nAdding the early termination can make the DFS faster, but in the worst-case the time/space complexity is the same.\n\nThe hardest part on this problem is constructing the graph in the first place.\n\nThe edges \"traversed\" in a DFS search form a tree called the \"DFS tree\". The DFS tree changes depending on where we start the search. The starting node is called the root. We can construct the DFS tree by keeping track of the predecessor of each node in the search (the root has no predecessor). If we construct the DFS tree rooted ats, we can follow the sequence of predecessors fromttosto find a path fromstotin reverse order.\n\nInstead of using the listvisto keep track of visited nodes, we know a node is unvisited if it has no predecessor yet. We indicate that a node has no predecessor with the special value-1.\n\nNote that DFS doesnotfind the shortest path formstot. For that, we can use BFS (breath-first search). It just returns any path without repeated nodes.\n\nFor undirected graphs, this is almost the same question as the first question (\"which nodes can be reached bys?\") because of the following property:\n\nAn undirected graph is connected if and only if every node can be reached froms, wheresis any of the nodes.\n\nThus, the code is exactly the same as for the first question, with two differences: 1) we choosesto be0(could be anything), and 2) we change the last line to check if every entry invisis true.\n\nFor directed graphs, we need to take into account the direction of the edges. A directed graph isstrongly connectedif every node can reach every other node. We can use the following property:\n\nA directed graph is strongly connected if and only ifscan reach every node and every node can reachs, wheresis any of the nodes.\n\nWe already know how to use DFS to check ifscan reach every node. To check if every node can reachs, we can do a DFS starting froms,but in the reverse graph of G. The reverse graph ofGis likeGbut reversing the directions of all the edges.\n\nThe runtime is stillO(m), but the space is nowO(m)because we need to create and store the reverse graph. There are alternative algorithms (like Tarjan's algorithm) which can do this inO(n)space.\n\nWe can use the typical DFS to answer this question for undirected graphs. We use a common pattern in DFS algorithms: an outer loop through all the nodes where we launch a search for every yet-unvisited node.\n\nThe runtime is nowO(n+m)because, ifm < n, we still spendO(n)time iterating through the loop at the end.\n\nFor directed graphs, instead of connected components, we talk aboutstrongly connected components. A strongly connected component is a maximal subset of nodes where every node can reach every other node.\n\nIf we want to find the number of strongly connected components, we can use something likeTarjan's algorithm, a DFS-based algorithm that requires some additional data structures.\n\nThis question is more general than the previous two. We label each nodevwith a numberCC[v]so that nodes with the same number belong to the same CC. Instead of having a listCCin addition tovis, we use the CC number-1to indicate unvisited nodes. This way, we do not needvis\n\nFor directed graphs, again we need Tarjan's algorithm or an equivalent algorithm.\n\nIn the second problem, nodes are given by names, not indices, so they need to be converted.\n\nFor undirected graphs, this question is simple. First, we consider the problem in each CC independently. This is very common pattern in graph problems. We do this with an outer loop through all the nodes where we launch a search for every yet-unvisited node.\n\nDuring the DFS search in each CC, if we find an edge to an already visited node that is not the predecessor in the search (the node we just came from), there is a cycle. Such edges in a DFS search are calledback edges. We add one parameter to the recursive functionvisitto know the predecessor node.\n\nFor directed graphs, it is not as simple: the fact that a neighbornbris already visited during the DFS search does not mean thatnbrcan reach the current node. To check if a directed graph is acyclic, we can use the linear-timepeel-off algorithmfor finding a topological ordering. This algorithm detects if the graph is acyclic and finds a topological ordering if so, though we are only interested in the first part.\n\nThis problem is easier to solve using union-find, but it can be done with DFS.\n\nUsually, we ask this question for undirected graphs. We can use this characterization of trees:\n\nAn undirected graph is a tree if and only if it is connected and has exactlyn-1edges.\n\nWe already saw how to check if the graph is connected with DFS, and counting the number of edges is straightforward:\n\nThis is exactly the same question as whether the graph can be two-colored, so see the next section.\n\nTwo-coloring a graph means assigning colors to the nodes such that no two adjacent nodes have the same color, using only two colors. Usually, we consider coloring question for undirected graphs.\n\nWe consider whether each CC can be colored independently from the others. We can color each CC using DFS. We use values0and1for the colors. The color of the start node can be anything, so we set it to0. For the remaining nodes, the color has to be different from the parent, so we only have one option.\n\nInstead of having avisarray, we use the special color-1to denote unvisited nodes.\n\nWith 3 or more colors, the problem becomesa lot harder.\n\nWe cannot use DFS to find the distance between nodes in a graph which can have cycles, because DFS is not guaranteed to follow the shortest path from the root to the other nodes. For that, BFS is more suitable (if the graph is unweighted). However, since trees are acyclic, there is a unique path between any two nodes, so DFS must use the unique path, which, by necessity, is the shortest path. Thus, we can use DFS to find distances in a tree.\n\nA spanning tree of a connected, undirected graphGis a subgraph which has the same nodes asGthat is a tree.\nThe edges traversed by a DFS search on a connected graph form a spanning tree (sometimes called a DFS tree). Thus, we do DFS and add the traversed edges to the resulting tree.\n\nDFS has many uses. We showed how to make minor modifications to the DFS template to answer reachability and connectivity questions.\n\nAfter DFS, the next algorithm to learn would be BFS (breath-first search). Like DFS, it can answer reachability questions. On top of that, it can also answer questions about distance in undirected graphs.\n\n```\ndef makeAdjList(edgeList):\n    n = max(max(edge) for edge in edgeList) + 1\n    G = [[] for v in range(n)]\n    for u,v in edgeList:\n        G[u].append(v)\n        G[v].append(u) #omit this for directed graphs\n    return G\n\n```\n\n```\n    for u in G[v]:\n        #u is a neighbor of v\n        ...\n\n```\n\n```\n    for u in range(n):\n        if adjMatrix[v][u]:\n            #u is a neighbor of v\n            ...\n\n```\n\n```\ndef reachableNodes(G, s): #G is directed or undirected\n    n = len(G)\n    vis = n * [False]\n    vis[s] = True\n\n    #invariant: v is marked as visited when calling visit(v)\n    def visit(v):\n        for nbr in G[v]:\n            if not vis[nbr]:\n                vis[nbr] = True\n                visit(nbr)\n\n    visit(s)\n    return [v for v in range(n) if vis[v]]\n\n```\n\n```\ndef reachableNodes(G, s): #G is directed or undirected\n    n = len(G)\n    vis = n * [False]\n    stk = [s]\n    #mark nodes as visited when removed from the stack, not when added\n    while stk:\n        v = stk.pop()\n        if vis[v]: continue\n        vis[v] = True\n        for nbr in G[v]:\n            if not vis[nbr]:\n                stk.append(nbr)\n    return [v for v in range(n) if vis[v]]\n\n```\n\n```\ndef canReachNode(G, s, t): #G is directed or undirected\n    n = len(G)\n    vis = n * [False]\n    vis[s] = True\n\n    #returns True if the search reaches t\n    def visit(v):\n        if v == t: return True\n        for nbr in G[v]:\n            if not vis[nbr]:\n                vis[nbr] = True\n                if visit(nbr): return True\n        return False\n\n    return visit(s)\n\n```\n\n```\ndef findPath(G, s, t): #G is directed or undirected\n    n = len(G)\n    pred = n * [-1]\n    pred[s] = None\n    def visit(v):\n        for nbr in G[v]:\n            if pred[nbr] == -1:\n                pred[nbr] = v\n                visit(nbr)\n    visit(s) #builds DFS tree\n    path = [t]\n    while path[-1] != s:\n        p = pred[path[-1]]\n        if p == -1: return None #cannot reach t from s\n        path.append(p)\n    path.reverse()\n    return path\n\n```\n\n```\ndef isConnected(G): #G is undirected\n    n = len(G)\n    vis = n * [False]\n    vis[0] = True\n    def visit(v):\n        for nbr in G[v]:\n            if not vis[nbr]:\n                vis[nbr] = True\n                visit(nbr)\n    visit(0)\n    return all(vis)\n\n```\n\n```\ndef isConnected(G): #G is directed\n    n = len(G)\n    vis = n * [False]\n    vis[0] = True #use 0 for start node\n    def visit(G, v):\n        for nbr in G[v]:\n            if not vis[nbr]:\n                vis[nbr] = True\n                visit(G, nbr)\n    visit(G, 0) #nodes reachable from s\n    if not all(vis): return False\n    Greverse = [[] for v in range(n)]\n    for v in range(n):\n        for nbr in G[v]:\n            Greverse[nbr].append(v)\n    vis = n * [False] #reset vis for the second search\n    vis[0] = True\n    visit(Greverse, 0) #nodes that can reach s\n    return all(vis)\n\n```\n\n```\ndef numConnectedComponents(G): #G is undirected\n    n = len(G)\n    vis = n * [False]\n    def visit(v):\n        for nbr in G[v]:\n            if not vis[nbr]:\n                vis[nbr] = True\n                visit(nbr)\n    numCCs = 0\n    for v in range(n):\n        if not vis[v]:\n            numCCs += 1\n            vis[v] = True\n            visit(v)\n    return numCCs\n\n```\n\n```\ndef connectedComponents(G): #G is undirected\n    n = len(G)\n    CC = n * [-1]\n\n    ##invariant: v is labeled with CC i>=0\n    def visit(v, i):\n        for nbr in G[v]:\n            if CC[nbr] == -1:\n                CC[nbr] = i\n                visit(nbr, i)\n\n    i = 0\n    for v in range(n):\n        if CC[v] == -1:\n            CC[v] = i\n            visit(v, i)\n            i += 1\n    return CC\n\n```\n\n```\ndef hasCycles(G): #G is undirected\n    n = len(G)\n    vis = n * [False]\n\n    #returns True if the search finds a back edge\n    def visit(v, p):\n        for nbr in G[v]:\n            if vis[nbr] and nbr != p: return True\n            if not vis[nbr]:\n                vis[nbr] = True\n                if visit(nbr, v): return True\n        return False\n\n    for v in range(n):\n        if not vis[v]:\n            vis[v] = True\n            #the root of the search has no predecessor\n            if visit(v, -1): return True\n    return False\n\n```\n\n```\n    #for undirected graphs:\n    m = sum(len(G[v]) for v in range(n)) / 2\n    #for directed graphs:\n    m = sum(len(G[v]) for v in range(n))\n\n```\n\n```\ndef is2Colorable(G): #G is undirected\n    n = len(G)\n    color = n * [-1]\n\n    #returns True if we can color all the nodes reached from v\n    #invariant: v has an assigned color\n    def visit(v):\n        for nbr in G[v]:\n            if color[nbr] == color[v]: return False\n            if color[nbr] == -1:\n                color[nbr] = 1 if color[v] == 0 else 0\n                if not visit(nbr): return False\n        return True\n\n    for v in range(n):\n        if color[v] == -1:\n            color[v] = 0\n            if not visit(v): return False\n    return True\n\n```\n\n```\ndef getDistances(G, s): #G is undirected and a tree\n    n = len(G)\n    dists = n * [-1]\n    dists[s] = 0\n\n    #invariant: v has an assigned distance\n    def visit(v):\n        for nbr in G[v]:\n            #check nbr is not the predecessor\n            if dists[nbr] != -1: continue\n            dists[nbr] = dists[v] + 1\n            visit(nbr)\n    visit(s)\n    return dists\n\n```\n\n```\ndef spanningTree(G): #G is undirected and connected\n    n = len(G)\n    vis = n * [False]\n    vis[0] = True\n    T = [[] for v in range(n)]\n\n    def visit(v):\n        for nbr in G[v]:\n            if not vis[nbr]:\n                vis[nbr] = True\n                T[v].append(nbr)\n                T[nbr].append(v)\n                visit(nbr)\n    visit(0)\n    return T\n\n```",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/reachability-problems-and-dfs?category=dsa",
      "author": "",
      "user_id": ""
    },
    {
      "title": "Get Binary Search Right Every Time, Explained Without Code",
      "content": "# Get Binary Search Right Every Time, Explained Without Code\n\n## The transition point problem\n\n## The reduction\n\n## Practice\n\nOne of the things that makes binary search tricky to implement is that you usually need to tweak the pointer manipulation logic in subtle ways based on the specifics of the problem.\n\nE.g., an implementation that works for finding a target in a sorted array when the target is present, may not work if the target is missing. Or, it may not be clear how to tweak the code to find the last occurrence of the target instead of the first one. And of course, there are plenty of less conventional applications of binary search where the input is not an array, likecatching bike thieves.\n\nInBeyond Cracking the Coding Interview, we wanted to simplify this, so we went looking for a general binary search template. Going into it, I thought we might need at least two templates, but we ended up with just one, which we called the \"transition point recipe\", and which works for every problem we tried, including the 17 problems in the binary search chapter of the book. If you find one where it doesn't work, let me know!\n\nHere is the thesis of the transition point recipe:\n\nEvery binary search problem can be reduced to the 'transition point problem'.\n\nIn the 'transition point problem', you are given an array with just two values, say1and2, where all the1s come before the2s, and you need to point where it changes.\n\nE.g., in the array[1, 1, 1, 1, 1, 2, 2, 2], the last1is at index4and the first2is at index5.\n\nKnowing how to solve this specific problem is key to our recipe. The specific binary search implementation is not important, but there is an invariant we can follow that makes it quite easy: ensure that the left pointer is always at a1and the right pointer is always at a2.\n\nWe give code in the book, but remembering exact code in an interview is error prone. Instead, the four bullet points below are all Ipersonallyremember, and I feel confident that I can derive the rest easily.\n\nCombining the invariant with the stopping condition, we get that, at the end,leftwill be at the last1andrightwill be at the first2.\n\nThese bullet points rely on two ideas to make binary search easier: (1) handling edge cases upfront, and (2) letting strong invariants guide the implementation. Notice how the invariant even guides the edge cases at the beginning, as they are the necessary ones to be able to initializeleftandrightin a way that satisfies it.\n\nOk, so now, let's take for granted that we can solve the transition point problem. How does this help us solve other binary search problems?\n\nThe idea is to come up with a (problem-specific)predicate, like< target,>= target, orx % 2 == 0, which splits the search range into two regions, the \"before\" region and the \"after\" region.\n\nThis predicate is a function that takes an element of the search range and returns a boolean, and -- as you probably saw coming -- it is key that all the elements withtruevalues come before the elements withfalsevalues (or the other way around).\n\nThen, we can use the solution to the transition point problem to find the transition point between the 'before' and 'after' regions. The only difference is that, instead of checking boolean values directly, we check the result of the predicate.\n\nYou can even wrap the predicate in a function, which we calledis_before(x)in the book, which tells you whether a given element is in the 'before' region. Then, it's really obvious that we are just solving the transition point problem every time.\n\nThe only part that requires some thinking is choosing the right transition point. For example:\n\nAnd so on for other problems.\n\nYou can try the transition-point recipe on all the problems from the binary search chapter of the book online atstart.interviewing.io/beyond-ctci/part-vii-catalog/binary-search, even if you don't have the book. There, you can also find all our solutions using the recipe, in Python, JS, Java, and C++.\n\nBy the way, the binary search chapter of the book is free -- it's inbctci.co/free-chapters.\n\nWant to leave a comment? You can post under thelinkedin postor theX post.",
      "content_type": "blog",
      "source_url": "https://nilmamano.com/blog/binary-search?category=dsa",
      "author": "",
      "user_id": ""
    }
  ]
}